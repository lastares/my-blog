/*
Navicat MySQL Data Transfer

Source Server         : root
Source Server Version : 50505
Source Host           : 127.0.0.1:3306
Source Database       : myblog

Target Server Type    : MYSQL
Target Server Version : 50505
File Encoding         : 65001

Date: 2018-01-11 21:00:14
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for syf_article_tags
-- ----------------------------
DROP TABLE IF EXISTS `syf_article_tags`;
CREATE TABLE `syf_article_tags` (
  `article_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '文章id',
  `tag_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '标签id',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of syf_article_tags
-- ----------------------------
INSERT INTO `syf_article_tags` VALUES ('1', '1', '2017-07-18 07:35:12', '2016-07-18 07:35:12', null);
INSERT INTO `syf_article_tags` VALUES ('3', '9', '2017-12-28 16:53:35', '2017-12-28 16:53:35', null);
INSERT INTO `syf_article_tags` VALUES ('4', '4', '2017-12-28 18:45:51', '2017-12-28 18:45:51', null);
INSERT INTO `syf_article_tags` VALUES ('6', '1', '2017-12-29 14:44:48', '2017-12-29 14:44:48', null);
INSERT INTO `syf_article_tags` VALUES ('7', '1', '2017-12-29 14:45:49', '2017-12-29 14:45:49', null);
INSERT INTO `syf_article_tags` VALUES ('8', '2', '2017-12-29 14:46:27', '2017-12-29 14:46:27', null);
INSERT INTO `syf_article_tags` VALUES ('9', '2', '2017-12-29 14:56:09', '2017-12-29 14:56:09', null);
INSERT INTO `syf_article_tags` VALUES ('10', '1', '2017-12-29 14:58:20', '2017-12-29 14:58:20', null);
INSERT INTO `syf_article_tags` VALUES ('11', '1', '2017-12-29 15:00:35', '2017-12-29 15:00:35', null);
INSERT INTO `syf_article_tags` VALUES ('12', '1', '2017-12-29 15:02:54', '2017-12-29 15:02:54', null);
INSERT INTO `syf_article_tags` VALUES ('13', '1', '2017-12-29 15:17:17', '2017-12-29 15:17:17', null);
INSERT INTO `syf_article_tags` VALUES ('14', '2', '2018-01-02 08:53:50', '2018-01-02 08:53:50', null);
INSERT INTO `syf_article_tags` VALUES ('15', '4', '2018-01-02 08:57:15', '2018-01-02 08:57:15', null);
INSERT INTO `syf_article_tags` VALUES ('5', '7', '2018-01-02 10:34:43', '2018-01-02 10:34:43', null);
INSERT INTO `syf_article_tags` VALUES ('16', '6', '2018-01-02 11:00:55', '2018-01-02 11:00:55', null);
INSERT INTO `syf_article_tags` VALUES ('2', '1', '2018-01-02 11:16:35', '2018-01-02 11:16:35', null);
INSERT INTO `syf_article_tags` VALUES ('2', '7', '2018-01-02 11:16:35', '2018-01-02 11:16:35', null);
INSERT INTO `syf_article_tags` VALUES ('17', '1', '2018-01-02 11:36:49', '2018-01-02 11:36:49', null);
INSERT INTO `syf_article_tags` VALUES ('18', '8', '2018-01-02 11:40:03', '2018-01-02 11:40:03', null);
INSERT INTO `syf_article_tags` VALUES ('19', '6', '2018-01-02 11:43:43', '2018-01-02 11:43:43', null);
INSERT INTO `syf_article_tags` VALUES ('20', '8', '2018-01-02 11:48:12', '2018-01-02 11:48:12', null);
INSERT INTO `syf_article_tags` VALUES ('21', '10', '2018-01-02 11:54:03', '2018-01-02 11:54:03', null);
INSERT INTO `syf_article_tags` VALUES ('22', '4', '2018-01-02 12:53:16', '2018-01-02 12:53:16', null);
INSERT INTO `syf_article_tags` VALUES ('23', '4', '2018-01-02 12:55:59', '2018-01-02 12:55:59', null);
INSERT INTO `syf_article_tags` VALUES ('25', '19', '2018-01-02 13:17:21', '2018-01-02 13:17:21', null);
INSERT INTO `syf_article_tags` VALUES ('24', '1', '2018-01-02 13:19:26', '2018-01-02 13:19:26', null);
INSERT INTO `syf_article_tags` VALUES ('26', '11', '2018-01-02 13:21:18', '2018-01-02 13:21:18', null);
INSERT INTO `syf_article_tags` VALUES ('27', '1', '2018-01-02 13:24:23', '2018-01-02 13:24:23', null);
INSERT INTO `syf_article_tags` VALUES ('28', '1', '2018-01-02 13:31:41', '2018-01-02 13:31:41', null);
INSERT INTO `syf_article_tags` VALUES ('29', '6', '2018-01-02 13:34:28', '2018-01-02 13:34:28', null);
INSERT INTO `syf_article_tags` VALUES ('30', '20', '2018-01-02 13:40:59', '2018-01-02 13:40:59', null);
INSERT INTO `syf_article_tags` VALUES ('31', '1', '2018-01-02 13:44:44', '2018-01-02 13:44:44', null);
INSERT INTO `syf_article_tags` VALUES ('32', '5', '2018-01-02 13:53:50', '2018-01-02 13:53:50', null);
INSERT INTO `syf_article_tags` VALUES ('32', '12', '2018-01-02 13:53:50', '2018-01-02 13:53:50', null);
INSERT INTO `syf_article_tags` VALUES ('33', '5', '2018-01-02 13:57:31', '2018-01-02 13:57:31', null);
INSERT INTO `syf_article_tags` VALUES ('33', '12', '2018-01-02 13:57:31', '2018-01-02 13:57:31', null);
INSERT INTO `syf_article_tags` VALUES ('34', '5', '2018-01-02 13:59:37', '2018-01-02 13:59:37', null);
INSERT INTO `syf_article_tags` VALUES ('35', '10', '2018-01-02 14:05:45', '2018-01-02 14:05:45', null);
INSERT INTO `syf_article_tags` VALUES ('36', '21', '2018-01-02 14:33:06', '2018-01-02 14:33:06', null);
INSERT INTO `syf_article_tags` VALUES ('37', '21', '2018-01-02 14:35:10', '2018-01-02 14:35:10', null);
INSERT INTO `syf_article_tags` VALUES ('38', '10', '2018-01-02 14:57:56', '2018-01-02 14:57:56', null);
INSERT INTO `syf_article_tags` VALUES ('39', '22', '2018-01-02 15:26:27', '2018-01-02 15:26:27', null);
INSERT INTO `syf_article_tags` VALUES ('40', '21', '2018-01-02 15:28:39', '2018-01-02 15:28:39', null);
INSERT INTO `syf_article_tags` VALUES ('41', '3', '2018-01-02 15:30:43', '2018-01-02 15:30:43', null);
INSERT INTO `syf_article_tags` VALUES ('42', '23', '2018-01-02 15:34:47', '2018-01-02 15:34:47', null);
INSERT INTO `syf_article_tags` VALUES ('43', '23', '2018-01-02 15:37:04', '2018-01-02 15:37:04', null);
INSERT INTO `syf_article_tags` VALUES ('44', '1', '2018-01-02 15:39:13', '2018-01-02 15:39:13', null);
INSERT INTO `syf_article_tags` VALUES ('45', '4', '2018-01-02 15:44:15', '2018-01-02 15:44:15', null);
INSERT INTO `syf_article_tags` VALUES ('46', '4', '2018-01-02 15:47:16', '2018-01-02 15:47:16', null);
INSERT INTO `syf_article_tags` VALUES ('47', '24', '2018-01-02 15:49:21', '2018-01-02 15:49:21', null);
INSERT INTO `syf_article_tags` VALUES ('48', '25', '2018-01-02 15:53:05', '2018-01-02 15:53:05', null);
INSERT INTO `syf_article_tags` VALUES ('49', '26', '2018-01-02 15:55:39', '2018-01-02 15:55:39', null);
INSERT INTO `syf_article_tags` VALUES ('50', '25', '2018-01-02 15:58:43', '2018-01-02 15:58:43', null);
INSERT INTO `syf_article_tags` VALUES ('51', '1', '2018-01-02 16:03:58', '2018-01-02 16:03:58', null);
INSERT INTO `syf_article_tags` VALUES ('51', '26', '2018-01-02 16:03:58', '2018-01-02 16:03:58', null);
INSERT INTO `syf_article_tags` VALUES ('52', '27', '2018-01-02 16:16:56', '2018-01-02 16:16:56', null);
INSERT INTO `syf_article_tags` VALUES ('53', '1', '2018-01-02 16:19:49', '2018-01-02 16:19:49', null);
INSERT INTO `syf_article_tags` VALUES ('53', '25', '2018-01-02 16:19:49', '2018-01-02 16:19:49', null);
INSERT INTO `syf_article_tags` VALUES ('54', '1', '2018-01-02 16:23:02', '2018-01-02 16:23:02', null);
INSERT INTO `syf_article_tags` VALUES ('54', '11', '2018-01-02 16:23:02', '2018-01-02 16:23:02', null);
INSERT INTO `syf_article_tags` VALUES ('55', '25', '2018-01-02 16:24:48', '2018-01-02 16:24:48', null);
INSERT INTO `syf_article_tags` VALUES ('56', '25', '2018-01-02 16:26:28', '2018-01-02 16:26:28', null);
INSERT INTO `syf_article_tags` VALUES ('57', '3', '2018-01-02 16:30:51', '2018-01-02 16:30:51', null);
INSERT INTO `syf_article_tags` VALUES ('58', '14', '2018-01-02 16:34:32', '2018-01-02 16:34:32', null);
INSERT INTO `syf_article_tags` VALUES ('59', '28', '2018-01-02 16:37:05', '2018-01-02 16:37:05', null);
INSERT INTO `syf_article_tags` VALUES ('60', '29', '2018-01-02 16:42:55', '2018-01-02 16:42:55', null);
INSERT INTO `syf_article_tags` VALUES ('61', '6', '2018-01-02 16:46:38', '2018-01-02 16:46:38', null);
INSERT INTO `syf_article_tags` VALUES ('62', '25', '2018-01-02 16:48:43', '2018-01-02 16:48:43', null);
INSERT INTO `syf_article_tags` VALUES ('63', '25', '2018-01-02 16:51:27', '2018-01-02 16:51:27', null);
INSERT INTO `syf_article_tags` VALUES ('64', '12', '2018-01-02 16:55:58', '2018-01-02 16:55:58', null);
INSERT INTO `syf_article_tags` VALUES ('65', '3', '2018-01-02 17:00:50', '2018-01-02 17:00:50', null);
INSERT INTO `syf_article_tags` VALUES ('66', '25', '2018-01-02 17:02:14', '2018-01-02 17:02:14', null);
INSERT INTO `syf_article_tags` VALUES ('67', '25', '2018-01-02 17:03:47', '2018-01-02 17:03:47', null);
INSERT INTO `syf_article_tags` VALUES ('68', '3', '2018-01-02 17:04:48', '2018-01-02 17:04:48', null);

-- ----------------------------
-- Table structure for syf_articles
-- ----------------------------
DROP TABLE IF EXISTS `syf_articles`;
CREATE TABLE `syf_articles` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '文章表主键',
  `category_id` tinyint(1) NOT NULL DEFAULT '0' COMMENT '分类id',
  `title` char(100) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '标题',
  `author` varchar(15) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '作者',
  `markdown` text COLLATE utf8_unicode_ci NOT NULL COMMENT 'markdown文章内容',
  `html` text COLLATE utf8_unicode_ci NOT NULL COMMENT 'markdown转的html页面',
  `description` char(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '描述',
  `keywords` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '关键词',
  `type` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT '文章类型： 1-原创 2-转载 3-翻译',
  `cover` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '封面图',
  `like` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '文章喜欢数',
  `is_top` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否置顶 1是 0否',
  `click` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '点击数',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=69 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of syf_articles
-- ----------------------------
INSERT INTO `syf_articles` VALUES ('2', '1', 'laravel ckeditor上传图片', '宋耀锋', '##### 1.模板\r\n```html\r\n<div class=\"form-group\">\r\n	<label for=\"content\" class=\"col-sm-2 control-label\">文章内容</label>\r\n	<div class=\"col-sm-6\">\r\n	<textarea name=\"content\" id=\"content\"></textarea>\r\n	</div>\r\n</div>\r\n```\r\n##### 2.引入相关资源文件\r\n```javascript\r\n<script src=\"/plugin/ckeditor/ckeditor.js\"></script>\r\n<script src=\"/plugin/ckeditor/config.js\"></script>\r\n<script src=\"/plugin/ckeditor/lang/zh-cn.js\"></script>\r\n```\r\n##### 3.实例化插件\r\n```javascript\r\n$(function () {\r\n        CKEDITOR.replace(\'content\', {\r\n            height: 450,\r\n            filebrowserUploadUrl: \'{{url(\'ckEditor/upload\')}}?_token={{csrf_token()}}\',\r\n});\r\n```\r\n##### 4.提交表单时将xheditor的内容复制给textarea\r\n```javascript\r\nvar content = CKEDITOR.instances.content.getData();\r\n$(\'#content\').val(content);\r\n```\r\n##### 5.PHP接口\r\n上传图片laravel很简单，这里就省略了，主要是返回的信息，ckeditor有要求，示例如下\r\n```\r\nif( 上传成功 ) {\r\n	$callback = $_REQUEST[\"CKEditorFuncNum\"];\r\necho \"<script type=\'text/javascript\'>window.parent.CKEDITOR.tools.callFunction($callback,\'\".$previewName.\"\',\'\');</script>\";\r\n    // $previewName文件上传成功后在前台显示的图片地址\r\n}\r\n\r\n```', '<h5>1.模板</h5><pre><code class=\"lang-html\">&lt;div class=&quot;form-group&quot;&gt;\n    &lt;label for=&quot;content&quot; class=&quot;col-sm-2 control-label&quot;&gt;文章内容&lt;/label&gt;\n    &lt;div class=&quot;col-sm-6&quot;&gt;\n    &lt;textarea name=&quot;content&quot; id=&quot;content&quot;&gt;&lt;/textarea&gt;\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre><h5>2.引入相关资源文件</h5><pre><code class=\"lang-javascript\">&lt;script src=&quot;/plugin/ckeditor/ckeditor.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;/plugin/ckeditor/config.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;/plugin/ckeditor/lang/zh-cn.js&quot;&gt;&lt;/script&gt;</code></pre><h5>3.实例化插件</h5><pre><code class=\"lang-javascript\">$(function () {\n        CKEDITOR.replace(\'content\', {\n            height: 450,\n            filebrowserUploadUrl: \'{{url(\'ckEditor/upload\')}}?_token={{csrf_token()}}\',\n});</code></pre><h5>4.提交表单时将xheditor的内容复制给textarea</h5><pre><code class=\"lang-javascript\">var content = CKEDITOR.instances.content.getData();\n$(\'#content\').val(content);</code></pre><h5>5.PHP接口</h5><p>上传图片laravel很简单，这里就省略了，主要是返回的信息，ckeditor有要求，示例如下</p><pre><code>if( 上传成功 ) {\n    $callback = $_REQUEST[&quot;CKEditorFuncNum&quot;];\necho &quot;&lt;script type=\'text/javascript\'&gt;window.parent.CKEDITOR.tools.callFunction($callback,\'&quot;.$previewName.&quot;\',\'\');&lt;/script&gt;&quot;;\n    // $previewName文件上传成功后在前台显示的图片地址\n}\n</code></pre>', '1.模板\r\n```html\r\n<div class=\"formgroup\"\r\n	<label for=\"content\" class=\"colsm2 controllabel\"文章内容</label\r\n	<div class=\"colsm6\"\r\n	<textarea name=\"content\" id=\"content\"</textarea\r\n	</div\r\n</div\r\n```\r\n 2.引入相...', 'ckeditor，laravel ckeditor，文件上传', '1', 'uploads/article/default.jpg', '2', '1', '22', '2017-12-20 11:03:03', '2018-01-11 14:44:37', null);
INSERT INTO `syf_articles` VALUES ('3', '2', 'npm install 运行时报错', '宋耀锋', 'npm install 运行时报错\r\n`npm ERR! Unexpected end of JSON input while parsing near \'...{\"shasum\":\"75864225d6\'\r\n\r\nnpm ERR! A complete log of this run can be found in:\r\nnpm ERR!     C:\\Users\\songyaofeng\\AppData\\Roaming\\npm-cache\\_logs\\2017-11-09T02_36_41_924Z-debug.log`\r\n\r\n解决办法： \r\n使用cnpm，并设置成全聚的环境变量 \r\n（1）npm install -g cnpm –registry=https://registry.npm.taobao.org \r\n（2）ng set –global packageManager=cnpm \r\n再次运行ng new router –routing生成新项目就没问题了\r\n\r\n![](/uploads/article/20171228/5a44b0584bc6c.png)', '<p>npm install 运行时报错<br>`npm ERR! Unexpected end of JSON input while parsing near \'...{\"shasum\":\"75864225d6\'</p><p>npm ERR! A complete log of this run can be found in:<br>npm ERR!     C:UserssongyaofengAppDataRoamingnpm-cache_logs2017-11-09T02_36_41_924Z-debug.log`</p><p>解决办法： <br>使用cnpm，并设置成全聚的环境变量 <br>（1）npm install -g cnpm –registry=<a href=\"https://registry.npm.taobao.org\">https://registry.npm.taobao.org</a> <br>（2）ng set –global packageManager=cnpm <br>再次运行ng new router –routing生成新项目就没问题了</p><p><img src=\"/uploads/article/20171228/5a44b0584bc6c.png\" alt=\"\" title=\"\"></p>', 'npm install 运行时报错\r\n`npm ERR! Unexpected end of JSON input while parsing near \'...{\"shasum\":\"75864225d6\'\r\n\r\nnpm ERR! A complete log of this run can be found in:\r\nnpm ERR!     C:\\Users\\songyaofeng\\AppDa...', 'npm, cnpm install', '1', '/uploads/article/20171228/5a44b0584bc6c.png', '1', '1', '131', '2017-11-09 10:54:24', '2018-01-10 15:12:25', null);
INSERT INTO `syf_articles` VALUES ('4', '5', 'docker映射window本地文件夹的nginx的虚拟主机配置文件vhost.nginx.conf', '宋耀锋', '```php\r\nserver {\r\n listen 80;\r\n server_name www.domain.com;\r\n\r\n location ~ \\.php$ {\r\n root  /var/www/html/www/test/public;\r\n fastcgi_pass 127.0.0.1:9000;\r\n fastcgi_index index.php;\r\n fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\r\n include fastcgi_params;\r\n }\r\n location / {\r\n root  /var/www/html/www/;\r\n index  index.php;\r\n }\r\n}\r\n```', '<pre><code class=\"lang-php\">server {\n listen 80;\n server_name www.domain.com;\n\n location ~ \\.php$ {\n root  /var/www/html/www/test/public;\n fastcgi_pass 127.0.0.1:9000;\n fastcgi_index index.php;\n fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n include fastcgi_params;\n }\n location / {\n root  /var/www/html/www/;\n index  index.php;\n }\n}</code></pre>', '```php\r\nserver {\r\n listen 80;\r\n server_name www.domain.com;\r\n\r\n location  \\.php$ {\r\n root  /var/www/html/www/test/public;\r\n fastcgi_pass 127.0.0.1:9000;\r\n fastcgi_index index.php;\r\n fastcgi_param SCRI...', 'docker, nginx vhost', '1', 'uploads/article/default.jpg', '1', '0', '52', '2017-11-26 18:03:34', '2018-01-10 16:11:12', null);
INSERT INTO `syf_articles` VALUES ('5', '5', '使用终端连接docker 内部的MySQL不能连接的解决办法', '宋耀锋', 'MariaDB [(none)]> show databases; \r\n+——————–+ \r\n| Database | \r\n+——————–+ \r\n| information_schema | \r\n| mysql | \r\n| performance_schema | \r\n| test | \r\n+——————–+ \r\n4 rows in set (0.00 sec)\r\n\r\nMariaDB [(none)]> use mysql \r\nDatabase changed \r\nMariaDB [mysql]> update user set host = ‘%’ where user = ‘root’; \r\nERROR 1062 (23000): Duplicate entry ‘%-root’ for key ‘PRIMARY’ \r\nMariaDB [mysql]> GRANT ALL PRIVILEGES ON . TO ‘root’@’%’ WITH GRANT OPTION; \r\nQuery OK, 0 rows affected (0.00 sec)\r\n\r\nMariaDB [mysql]> FLUSH PRIVILEGES \r\n-> ; \r\nQuery OK, 0 rows affected (0.00 sec)\r\n\r\n这样就ok了', '<p>MariaDB [(none)]&gt; show databases; <br>+——————–+ <br>| Database | <br>+——————–+ <br>| information_schema | <br>| mysql | <br>| performance_schema | <br>| test | <br>+——————–+ <br>4 rows in set (0.00 sec)</p><p>MariaDB [(none)]&gt; use mysql <br>Database changed <br>MariaDB [mysql]&gt; update user set host = ‘%’ where user = ‘root’; <br>ERROR 1062 (23000): Duplicate entry ‘%-root’ for key ‘PRIMARY’ <br>MariaDB [mysql]&gt; GRANT ALL PRIVILEGES ON . TO ‘root’@’%’ WITH GRANT OPTION; <br>Query OK, 0 rows affected (0.00 sec)</p><p>MariaDB [mysql]&gt; FLUSH PRIVILEGES <br>-&gt; ; <br>Query OK, 0 rows affected (0.00 sec)</p><p>这样就ok了</p>', 'MariaDB  show databases; \r\n+——————–+ \r\n| Database | \r\n+——————–+ \r\n| information_schema | \r\n| mysql | \r\n| performance_schema | \r\n| test | \r\n+——————–+ \r\n4 rows in set (0.00 sec)\r\n\r\nMariaDB  use mysql \r\n...', 'docker,mysql', '1', 'uploads/article/default.jpg', '2', '1', '32', '2017-11-26 18:00:16', '2018-01-11 20:15:32', null);
INSERT INTO `syf_articles` VALUES ('16', '1', 'PhpStorm 2017.2.4注册码', '宋耀锋', '最好修改hosts文件添加：0.0.0.0 account.jetbrains.com\r\nEB101IWSWD-eyJsaWNlbnNlSWQiOiJFQjEwMUlXU1dEIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In1dLCJoYXNoIjoiNjk0NDAzMi8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-Gbb7jeR8JWOVxdUFaXfJzVU/O7c7xHQyaidCnhYLp7v32zdeXiHUU7vlrrm5y9ZX0lmQk3plCCsW+phrC9gGAPd6WDKhkal10qVNg0larCR2tQ3u8jfv1t2JAvWrMOJfFG9kKsJuw1P4TozZ/E7Qvj1cupf/rldhoOmaXMyABxNN1af1RV3bVhe4FFZe0p7xlIJF/ctZkFK62HYmh8V3AyhUNTzrvK2k+t/tlDJz2LnW7nYttBLHld8LabPlEEjpTHswhzlthzhVqALIgvF0uNbIJ5Uwpb7NqR4U/2ob0Z+FIcRpFUIAHEAw+RLGwkCge5DyZKfx+RoRJ/In4q/UpA==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==', '<p>最好修改hosts文件添加：0.0.0.0 account.jetbrains.com<br>EB101IWSWD-eyJsaWNlbnNlSWQiOiJFQjEwMUlXU1dEIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In1dLCJoYXNoIjoiNjk0NDAzMi8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-Gbb7jeR8JWOVxdUFaXfJzVU/O7c7xHQyaidCnhYLp7v32zdeXiHUU7vlrrm5y9ZX0lmQk3plCCsW+phrC9gGAPd6WDKhkal10qVNg0larCR2tQ3u8jfv1t2JAvWrMOJfFG9kKsJuw1P4TozZ/E7Qvj1cupf/rldhoOmaXMyABxNN1af1RV3bVhe4FFZe0p7xlIJF/ctZkFK62HYmh8V3AyhUNTzrvK2k+t/tlDJz2LnW7nYttBLHld8LabPlEEjpTHswhzlthzhVqALIgvF0uNbIJ5Uwpb7NqR4U/2ob0Z+FIcRpFUIAHEAw+RLGwkCge5DyZKfx+RoRJ/In4q/UpA==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</p>', '最好修改hosts文件添加：0.0.0.0 account.jetbrains.com\r\nEB101IWSWDeyJsaWNlbnNlSWQiOiJFQjEwMUlXU1dEIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6I...', 'PhpStorm,PHP', '1', 'uploads/article/default.jpg', '0', '0', '117', '2017-11-09 16:49:25', '2018-01-11 14:36:35', null);
INSERT INTO `syf_articles` VALUES ('17', '1', 'laravel分页修改默认的page参数', '宋耀锋', '首先我们都是使用paginate()这个方法生成分页，在view页面中使用render()这个方法生成分页链接的，感觉laravel太好用了，都不用自己写分页及一些链接的处理。当我在页面增加两个列表的分页的时候问题出现了，我点击其中一个列表的分页链接的时候，另一个列表的数据都发生了变化，原来是都是用了同一个page，比如你的链接是user?page=1，两个列表都是用了这个page命名就会发生冲突。于是乎我网上搜索了一番，找到了可以使用setPageName()方法为不同的列表分页设定自己的pagename，我非常高兴的设定了这个值，也很有效的改变了这个原始的page为两个不同的命名，例如：user?upage=1和user?ipage=1，我想这下问题该解决了吧！但是要命的来了，点击分页链接的时候内容并没有变化，怎么修改了之后还是没有用……\r\n\r\n我于是沿着paginate()方法查询到在vender文件夹中找vender\\laravel\\framework\\src\\Illuminate\\Pagination\\Paginator目录下的Paginator.php,在里面看看各个方法之间的关系，寻源而上发现$pageName这个变量在LengthAwarePaginator.php中已被setPageName()方法所改变，但是为何url改变而内容却没有任何变化，我想那应该是url链接的数据不正确。\r\n\r\n接着我发现![LengthAwarePaginator][1].php中找到构造函数中options数组中存在pageName参数，这不就是我设定的pageName变量么，我与是打印出来看看，打印出来还是page这个命名，于是我再向上查找，找到了Eloquent/Builder.php，看到里面有paginate这个方法，瞬间恍然大悟，setPageName()这个方法并没有改变查询数据的pagename，所以setPageName()只是在子类中的设置pagename的变化，而向上一层真正生成的分页中没有作用，于是我就在控制器中将paginate()方法增加两个参数，将第三个参数写成将要输入的pagename，再回到页面看看效果，结果大功告成！\r\n\r\n修改方法： \r\n例如：你使用的是User::paginate(2)，这里只有一个参数，Builder.php里面有4个参数，第二个参数这里不做解释，第三个参数就是我们自定义的pagename，于是修改为User::paginate(2, ‘[*]’, ‘uPage’)；这就会将默认的page修改为uPage，并且页面的链接也正确！\r\n\r\n总结：一般paginate传一个参数，即指定每页的显示条数，页码这个参数名叫 ‘page’ ，当传第三个参数时可以去修改。\r\n\r\n作者：金星show \r\n链接：http://www.jianshu.com/p/89e90438aaaf \r\n來源：简书 \r\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。', '<p>首先我们都是使用paginate()这个方法生成分页，在view页面中使用render()这个方法生成分页链接的，感觉laravel太好用了，都不用自己写分页及一些链接的处理。当我在页面增加两个列表的分页的时候问题出现了，我点击其中一个列表的分页链接的时候，另一个列表的数据都发生了变化，原来是都是用了同一个page，比如你的链接是user?page=1，两个列表都是用了这个page命名就会发生冲突。于是乎我网上搜索了一番，找到了可以使用setPageName()方法为不同的列表分页设定自己的pagename，我非常高兴的设定了这个值，也很有效的改变了这个原始的page为两个不同的命名，例如：user?upage=1和user?ipage=1，我想这下问题该解决了吧！但是要命的来了，点击分页链接的时候内容并没有变化，怎么修改了之后还是没有用……</p><p>我于是沿着paginate()方法查询到在vender文件夹中找venderlaravelframeworksrcIlluminatePaginationPaginator目录下的Paginator.php,在里面看看各个方法之间的关系，寻源而上发现$pageName这个变量在LengthAwarePaginator.php中已被setPageName()方法所改变，但是为何url改变而内容却没有任何变化，我想那应该是url链接的数据不正确。</p><p>接着我发现LengthAwarePaginator.php中找到构造函数中options数组中存在pageName参数，这不就是我设定的pageName变量么，我与是打印出来看看，打印出来还是page这个命名，于是我再向上查找，找到了Eloquent/Builder.php，看到里面有paginate这个方法，瞬间恍然大悟，setPageName()这个方法并没有改变查询数据的pagename，所以setPageName()只是在子类中的设置pagename的变化，而向上一层真正生成的分页中没有作用，于是我就在控制器中将paginate()方法增加两个参数，将第三个参数写成将要输入的pagename，再回到页面看看效果，结果大功告成！</p><p>修改方法： <br>例如：你使用的是User::paginate(2)，这里只有一个参数，Builder.php里面有4个参数，第二个参数这里不做解释，第三个参数就是我们自定义的pagename，于是修改为User::paginate(2, ‘[*]’, ‘uPage’)；这就会将默认的page修改为uPage，并且页面的链接也正确！</p><p>总结：一般paginate传一个参数，即指定每页的显示条数，页码这个参数名叫 ‘page’ ，当传第三个参数时可以去修改。</p><p>作者：金星show <br>链接：<a href=\"http://www.jianshu.com/p/89e90438aaaf\">http://www.jianshu.com/p/89e90438aaaf</a> <br>來源：简书 <br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>', '首先我们都是使用paginate()这个方法生成分页，在view页面中使用render()这个方法生成分页链接的，感觉laravel太好用了，都不用自己写分页及一些链接的处理。当我在页面增加两个列表的分页的时候问题出现了，我点击其中一个列表的分页链接的时候，另一个列表的数据都发生了变化，原来是都是用了同一个page，比如你的链接是user?page=1，两个列表都是用了这个page命名就会发生冲突...', 'laravel,page,laravel分页', '2', 'uploads/article/default.jpg', '0', '1', '95', '2017-11-07 15:47:03', '2017-11-07 15:47:03', null);
INSERT INTO `syf_articles` VALUES ('18', '1', 'yii初始化控制器的两种方法', '宋耀锋', '```php\r\n// 方法一\r\npublic function __construct($id, $module, $config = [])\r\n{\r\n    parent::__construct($id, $module, $config = []);\r\n    ##########（要初始化的其他内容）#######################\r\n}\r\n```\r\n```php\r\n// 方法二\r\npublic function init()\r\n{\r\n    ##########（要初始化的其他内容）#######################\r\n}\r\n```', '<pre><code class=\"lang-php\">// 方法一\npublic function __construct($id, $module, $config = [])\n{\n    parent::__construct($id, $module, $config = []);\n    ##########（要初始化的其他内容）#######################\n}</code></pre><pre><code class=\"lang-php\">// 方法二\npublic function init()\n{\n    ##########（要初始化的其他内容）#######################\n}</code></pre>', '```php\r\n// 方法一\r\npublic function __construct($id, $module, $config = )\r\n{\r\n    parent::__construct($id, $module, $config = );\r\n    （要初始化的其他内容）\r\n}\r\n```\r\n```php\r\n// 方法二\r\npublic function init()\r\n{\r\n    （要...', 'Yii,__contruct', '1', 'uploads/article/default.jpg', '1', '1', '58', '2017-10-30 11:08:49', '2018-01-10 16:26:44', null);
INSERT INTO `syf_articles` VALUES ('19', '1', 'PhpStorm选中相同文字高亮', '宋耀锋', 'setting-》plugins-》Browse Repositories 输入BrowseWordAtCaret 搜索，安装，然后重启；\r\n\r\nSettings -》 Editor -》 General -》 Appearance -》 Browse Word At Caret 勾选。然后在代码编辑窗口，双击一个单词，其他相同的单词背景都高亮显示；\r\n\r\n如果想修改默认的颜色，在Settings -》 Editor -》Colors & Font -》 BrowseWordAtCaret 中进行修改，可以改成亮点的颜色。\r\n\r\n原文链接:http://blog.csdn.net/lily_song_8989/article/details/53199906\r\n![](/uploads/article/20180102/5a4affe14ea29.png)', '<p>setting-》plugins-》Browse Repositories 输入BrowseWordAtCaret 搜索，安装，然后重启；</p><p>Settings -》 Editor -》 General -》 Appearance -》 Browse Word At Caret 勾选。然后在代码编辑窗口，双击一个单词，其他相同的单词背景都高亮显示；</p><p>如果想修改默认的颜色，在Settings -》 Editor -》Colors & Font -》 BrowseWordAtCaret 中进行修改，可以改成亮点的颜色。</p><p>原文链接:<a href=\"http://blog.csdn.net/lily_song_8989/article/details/53199906\">http://blog.csdn.net/lily_song_8989/article/details/53199906</a><br><img src=\"/uploads/article/20180102/5a4affe14ea29.png\" alt=\"\" title=\"\"></p>', 'setting》plugins》Browse Repositories 输入BrowseWordAtCaret 搜索，安装，然后重启；\r\n\r\nSettings 》 Editor 》 General 》 Appearance 》 Browse Word At Caret 勾选。然后在代码编辑窗口，双击一个单词，其他相同的单词背景都高亮显示；\r\n\r\n如果想修改默认的颜色，在Settings 》 Edi...', 'PhpStorm,文字高亮', '2', '/uploads/article/20180102/5a4affe14ea29.png', '0', '1', '94', '2017-11-13 10:05:12', '2018-01-11 17:49:55', null);
INSERT INTO `syf_articles` VALUES ('20', '1', '学习Yii2框架时，想使用自带的gii脚手架模块，但是访问时说没有权限？？？？', '宋耀锋', '一.访问时居然没有权限访问 \r\n![](/uploads/article/20180102/5a4b00a0afd17.png)\r\n\r\n二.查看配置文件，配置了允许的本地IP，但貌似还是不让访问\r\n\r\n![](/uploads/article/20180102/5a4b00bbb27dc.png)\r\n\r\n三.经过一番搜索，发现最后把allowIPs这个数组的IP索性删掉，直接设置成任何IP都可以访问，即写个“*”就好了\r\n\r\n![](/uploads/article/20180102/5a4b00d2ea7ba.png)\r\n\r\n四.访问gii模块成功\r\n\r\n![](/uploads/article/20180102/5a4b00f85eb99.png)', '<p>一.访问时居然没有权限访问 <br><img src=\"/uploads/article/20180102/5a4b00a0afd17.png\" alt=\"\" title=\"\"></p><p>二.查看配置文件，配置了允许的本地IP，但貌似还是不让访问</p><p><img src=\"/uploads/article/20180102/5a4b00bbb27dc.png\" alt=\"\" title=\"\"></p><p>三.经过一番搜索，发现最后把allowIPs这个数组的IP索性删掉，直接设置成任何IP都可以访问，即写个“*”就好了</p><p><img src=\"/uploads/article/20180102/5a4b00d2ea7ba.png\" alt=\"\" title=\"\"></p><p>四.访问gii模块成功</p><p><img src=\"/uploads/article/20180102/5a4b00f85eb99.png\" alt=\"\" title=\"\"></p>', '一.访问时居然没有权限访问 \r\n\r\n\r\n二.查看配置文件，配置了允许的本地IP，但貌似还是不让访问\r\n\r\n\r\n\r\n三.经过一番搜索，发现最后把allowIPs这个数组的IP索性删掉，直接设置成任何IP都可以访问，即写个“”就好了\r\n\r\n\r\n\r\n四.访问gii模块成功\r\n\r\n', 'Yii,Gii,permission', '1', '/uploads/article/20180102/5a4b00a0afd17.png', '0', '0', '45', '2017-10-26 19:47:32', '2017-10-26 19:47:32', null);
INSERT INTO `syf_articles` VALUES ('21', '1', 'git 合并分之内的指定文件', '宋耀锋', '分支A_bracn和B_branch，只想将A_branch分支的某个文件f.txt合并到B_branch分支上。\r\n\r\ngit checkout A_branch\r\n\r\ngit checkout –patch B_branch f.txt \r\n第一个命令： 切换到A分支； \r\n第二个命令：合并B分支上f文件到A分支上，将B分支上 f 文件追加补丁到A分支上 f文件。你可以接受或者拒绝补丁内容。\r\n\r\n如果只是简单的将A_branch分支的文件f.txt copy到B_branch分支上；\r\n\r\ngit checkout B_branch \r\ncd path/to/f.txt \r\ngit checkout A_bracn f.txt\r\n转载自：\r\n http://blog.csdn.net/caolaosanahnu/article/details/32141103', '<p>分支A_bracn和B_branch，只想将A_branch分支的某个文件f.txt合并到B_branch分支上。</p><p>git checkout A_branch</p><p>git checkout –patch B_branch f.txt <br>第一个命令： 切换到A分支； <br>第二个命令：合并B分支上f文件到A分支上，将B分支上 f 文件追加补丁到A分支上 f文件。你可以接受或者拒绝补丁内容。</p><p>如果只是简单的将A_branch分支的文件f.txt copy到B_branch分支上；</p><p>git checkout B_branch <br>cd path/to/f.txt <br>git checkout A_bracn f.txt<br>转载自：<br> <a href=\"http://blog.csdn.net/caolaosanahnu/article/details/32141103\">http://blog.csdn.net/caolaosanahnu/article/details/32141103</a></p>', '分支A_bracn和B_branch，只想将A_branch分支的某个文件f.txt合并到B_branch分支上。\r\n\r\ngit checkout A_branch\r\n\r\ngit checkout –patch B_branch f.txt \r\n第一个命令： 切换到A分支； \r\n第二个命令：合并B分支上f文件到A分支上，将B分支上 f 文件追加补丁到A分支上 f文件。你可以接受或者拒绝补丁内容。\r...', 'git,branch', '2', 'uploads/article/default.jpg', '57', '0', '61', '2017-10-26 15:00:31', '2018-01-10 14:58:17', null);
INSERT INTO `syf_articles` VALUES ('22', '1', 'Docker:Error response from daemon: Cannot restart container lnmp: oci runtime error: container_linux', '宋耀锋', '到公司打开电脑，启动docker，想进入docker镜像内部，发现docker居然又报错了 \r\nError response from daemon: Cannot restart container lnmp: oci runtime error: container_linux.go:262: starting container process caused “process_linux.go:339: container init caused \\”rootfs_linux.go:57: mounting \\\\”/D/www\\\\” to rootfs \\\\”/var/lib/docker/overlay2/28d2d42a976cccc02ae790eae067fb723f431cef0b65902c87e42ca11e751f90/merged\\\\” at \\\\”/var/www/html\\\\” caused \\\\”stat /D/www: input/output error\\\\”\\”“\r\n\r\n解决： \r\n也没用什么方法，就是启动，重启试了几下，docker居然又正常启动了，也是搞笑。。。\r\n![](/uploads/article/20180102/5a4b10330ec1f.png)', '<p>到公司打开电脑，启动docker，想进入docker镜像内部，发现docker居然又报错了 <br>Error response from daemon: Cannot restart container lnmp: oci runtime error: container_linux.go:262: starting container process caused “process_linux.go:339: container init caused ”rootfs_linux.go:57: mounting \\”/D/www\\” to rootfs \\”/var/lib/docker/overlay2/28d2d42a976cccc02ae790eae067fb723f431cef0b65902c87e42ca11e751f90/merged\\” at \\”/var/www/html\\” caused \\”stat /D/www: input/output error\\””“</p><p>解决： <br>也没用什么方法，就是启动，重启试了几下，docker居然又正常启动了，也是搞笑。。。<br><img src=\"/uploads/article/20180102/5a4b10330ec1f.png\" alt=\"\" title=\"\"></p>', '到公司打开电脑，启动docker，想进入docker镜像内部，发现docker居然又报错了 \r\nError response from daemon: Cannot restart container lnmp: oci runtime error: container_linux.go:262: starting container process caused “process_linux.g...', 'docker', '1', '/uploads/article/20180102/5a4b10330ec1f.png', '0', '0', '303', '2017-10-26 10:21:51', '2018-01-02 14:37:33', null);
INSERT INTO `syf_articles` VALUES ('23', '3', 'docker An Error Occurred', '宋耀锋', '早晨启动docker莫名报错： \r\nDocker command did not completed whithin the allowed timeout.Output:\r\n![](/uploads/article/20180102/5a4b10b4b46ab.png)\r\n解决办法：\r\n![](/uploads/article/20180102/5a4b10d2006e2.png)', '<p>早晨启动docker莫名报错： <br>Docker command did not completed whithin the allowed timeout.Output:<br><img src=\"/uploads/article/20180102/5a4b10b4b46ab.png\" alt=\"\" title=\"\"><br>解决办法：<br><img src=\"/uploads/article/20180102/5a4b10d2006e2.png\" alt=\"\" title=\"\"></p>', '早晨启动docker莫名报错： \r\nDocker command did not completed whithin the allowed timeout.Output:\r\n\r\n解决办法：\r\n', 'docker,linux', '1', '/uploads/article/20180102/5a4b10b4b46ab.png', '0', '0', '44', '2017-10-26 10:11:52', '2017-10-26 10:11:52', null);
INSERT INTO `syf_articles` VALUES ('24', '1', 'laravel稀罕的Eloquent模型的用法', '宋耀锋', '1.whereDate() 方法 \r\n```php\r\n1 $q->where(‘created_at’, ‘>=’, date(‘Y-m-d’).’ 00:00:00’)); \r\n```\r\n以前查数据时，直接用where条件来比值判断，但是格式就会有严格的要求，如果上面的代码 第三个参数 是 date(‘Y-m-d’) 而不加 后面的00:00:00 这样在数据库里面就会找不到\r\n\r\n而判断是否相等 也都是对格式严格的要求\r\n```php\r\n$q->whereDate(‘created_at’, ‘=’, date(‘Y-m-d’)); \r\n```\r\n现在用whereDate，laravel自带的方法，就会自动帮你进行日期格式处理，保证date与搜索的格式是匹配的。\r\n\r\n```php\r\nq−>whereDay(‘createdat′,‘=′,date(‘d′));q->whereMonth(‘created_at’, ‘=’, date(‘m’)); \r\n$q->whereYear(‘created_at’, ‘=’, date(‘Y’));\r\n``` \r\n例如上面的代码，只搜索天数为某值的时候，用whereDay,会去数据库里搜索某一天与其匹配的值。\r\n\r\n2.wherePivot() 方法 \r\n一般这个方法的活动场景，模型中\r\n```php\r\nclass Company extends \\Eloquent{…\r\n\r\npublic function memberApplies() \r\n{ \r\nreturn $this->belongsToMany(‘App\\User’, ‘user_company_applies’) \r\n->wherePivot(‘apply_status’, UserCompanyApply::applyVerify) \r\n->wherePivot(‘type’, UserCompanyApply::TYPE_USER); \r\n}\r\n\r\n```\r\nCarbon 类 \r\nCarbon是laravel处理时间类型的一个类。\r\n\r\ndiffForHumans()方法\r\n```php\r\n$article->created_at->diffForHumans(); \r\n```\r\n\r\ndiffForHumans方法，可以把日期转换成 “1 hours age”、“4 years age” 这样的格式，同时，它还支持本地化，可以把其转换成中文形式的“1小时前”、“4年前”等。\r\n\r\n可以在 app/Providers/AppServiceProvider.php 的 boot() 方法中添加下面的代码来设置全局本地化：\r\n\r\n```php\r\npublic function boot() \r\n{ \r\n\\Carbon\\Carbon::setLocale(‘zh’); \r\n} \r\n```\r\n设置好之后，在输出时间的地方调用：\r\n\r\n`$article->created_at->diffForHumans(); `\r\n输出的结果会是 查article表里created_at字段的值是多少，在统计现在时间和它相差多少，如果现在时间比值大18分钟，会显示 “18 minutes ago” 。\r\n\r\ndiffInDays(), diffInHours(), diffInMinutes()\r\n这几个方法都是差不多和Carbon一起使用的，例如\r\n```php\r\npublic function getCloseSignDayAttribute() \r\n{ \r\n	day=Carbon::now()−>diffInDays(this->close_time, false); \r\n	return day>0?day : 0; \r\n} \r\n```\r\n这个方法是在Lession模型中的，diffInDays就是统计，现在的时间和lession表里close_time字段的值之间相差多少时间。相差的时间以天的格式返回，例如数据库里是2016-10-10 现在时间是 2016-9-10 返回的就是30天\r\n\r\ncarbon::now就是取当前时间的意思，加个diffInday统计相差时间，第一个参数$this->close_time，是模型中close_time这个字段，模型就是去哪张表找，而这里close_time就从哪个字段找\r\n\r\n下面看一下这个模型的$dates属性，官方文档有介绍\r\n```php\r\nprotected $dates = [ \r\n	‘start_time’, \r\n	‘close_time’, \r\n	‘created_at’, \r\n	‘updated_at’ \r\n];\r\n```\r\n\r\n大体意思dates里面填写的字段，会自动调整时间。 diffInHours(), diffInMinutes() 方法就跟diffInDays()一个道理了，一个统计和 close_time相差多少小时，相差多少分钟,使用形式都是一样，返回值不同\r\n\r\nminute=Carbon::now()−>diffInMinutes(this->close_time, false); \r\n$minute返回相差多少分钟 \r\n3. addDay()方法\r\n```php\r\n $less = Lesson::find(22);\r\n $r = $less->start_time->addDay(2);\r\n```\r\n\r\n将start_time时间，增加2天，输出出来。\r\n\r\n4.模型类 \r\n```php\r\n//获取一条数据的指定字段\r\narr=DB::table(‘archives′)−>where(‘id′,2)−>pluck(‘title′);\r\n//获取一张表的一列字段 \r\narr = DB::table(‘archives’)->where(‘id’,’>’,1)->lists(‘title’);\r\n//获取查询的SQL语句，公用于条件，不能用于get()之类的有结果之中\r\n$arr = DB::table(‘archives’)->where(‘id’,’>’,1)->toSql();\r\n```\r\n\r\n原文链接： http://www.cnblogs.com/huangshoushi/p/5875022.html', '<p>1.whereDate() 方法</p><pre><code class=\"lang-php\">1 $q-&gt;where(‘created_at’, ‘&gt;=’, date(‘Y-m-d’).’ 00:00:00’)); </code></pre><p>以前查数据时，直接用where条件来比值判断，但是格式就会有严格的要求，如果上面的代码 第三个参数 是 date(‘Y-m-d’) 而不加 后面的00:00:00 这样在数据库里面就会找不到</p><p>而判断是否相等 也都是对格式严格的要求</p><pre><code class=\"lang-php\">$q-&gt;whereDate(‘created_at’, ‘=’, date(‘Y-m-d’)); </code></pre><p>现在用whereDate，laravel自带的方法，就会自动帮你进行日期格式处理，保证date与搜索的格式是匹配的。</p><pre><code class=\"lang-php\">q−&gt;whereDay(‘createdat′,‘=′,date(‘d′));q-&gt;whereMonth(‘created_at’, ‘=’, date(‘m’)); \n$q-&gt;whereYear(‘created_at’, ‘=’, date(‘Y’));</code></pre><p>例如上面的代码，只搜索天数为某值的时候，用whereDay,会去数据库里搜索某一天与其匹配的值。</p><p>2.wherePivot() 方法 <br>一般这个方法的活动场景，模型中</p><pre><code class=\"lang-php\">class Company extends \\Eloquent{…\n\npublic function memberApplies() \n{ \nreturn $this-&gt;belongsToMany(‘App\\User’, ‘user_company_applies’) \n-&gt;wherePivot(‘apply_status’, UserCompanyApply::applyVerify) \n-&gt;wherePivot(‘type’, UserCompanyApply::TYPE_USER); \n}\n</code></pre><p>Carbon 类 <br>Carbon是laravel处理时间类型的一个类。</p><p>diffForHumans()方法</p><pre><code class=\"lang-php\">$article-&gt;created_at-&gt;diffForHumans(); </code></pre><p>diffForHumans方法，可以把日期转换成 “1 hours age”、“4 years age” 这样的格式，同时，它还支持本地化，可以把其转换成中文形式的“1小时前”、“4年前”等。</p><p>可以在 app/Providers/AppServiceProvider.php 的 boot() 方法中添加下面的代码来设置全局本地化：</p><pre><code class=\"lang-php\">public function boot() \n{ \n\\Carbon\\Carbon::setLocale(‘zh’); \n} </code></pre><p>设置好之后，在输出时间的地方调用：</p><p><code>$article-&gt;created_at-&gt;diffForHumans(); </code><br>输出的结果会是 查article表里created_at字段的值是多少，在统计现在时间和它相差多少，如果现在时间比值大18分钟，会显示 “18 minutes ago” 。</p><p>diffInDays(), diffInHours(), diffInMinutes()<br>这几个方法都是差不多和Carbon一起使用的，例如</p><pre><code class=\"lang-php\">public function getCloseSignDayAttribute() \n{ \n    day=Carbon::now()−&gt;diffInDays(this-&gt;close_time, false); \n    return day&gt;0?day : 0; \n} </code></pre><p>这个方法是在Lession模型中的，diffInDays就是统计，现在的时间和lession表里close_time字段的值之间相差多少时间。相差的时间以天的格式返回，例如数据库里是2016-10-10 现在时间是 2016-9-10 返回的就是30天</p><p>carbon::now就是取当前时间的意思，加个diffInday统计相差时间，第一个参数$this-&gt;close_time，是模型中close_time这个字段，模型就是去哪张表找，而这里close_time就从哪个字段找</p><p>下面看一下这个模型的$dates属性，官方文档有介绍</p><pre><code class=\"lang-php\">protected $dates = [ \n    ‘start_time’, \n    ‘close_time’, \n    ‘created_at’, \n    ‘updated_at’ \n];</code></pre><p>大体意思dates里面填写的字段，会自动调整时间。 diffInHours(), diffInMinutes() 方法就跟diffInDays()一个道理了，一个统计和 close_time相差多少小时，相差多少分钟,使用形式都是一样，返回值不同</p><p>minute=Carbon::now()−&gt;diffInMinutes(this-&gt;close_time, false); <br>$minute返回相差多少分钟</p><ol><li>addDay()方法</li></ol><pre><code class=\"lang-php\"> $less = Lesson::find(22);\n $r = $less-&gt;start_time-&gt;addDay(2);</code></pre><p>将start_time时间，增加2天，输出出来。</p><p>4.模型类</p><pre><code class=\"lang-php\">//获取一条数据的指定字段\narr=DB::table(‘archives′)−&gt;where(‘id′,2)−&gt;pluck(‘title′);\n//获取一张表的一列字段 \narr = DB::table(‘archives’)-&gt;where(‘id’,’&gt;’,1)-&gt;lists(‘title’);\n//获取查询的SQL语句，公用于条件，不能用于get()之类的有结果之中\n$arr = DB::table(‘archives’)-&gt;where(‘id’,’&gt;’,1)-&gt;toSql();</code></pre><p>原文链接： <a href=\"http://www.cnblogs.com/huangshoushi/p/5875022.html\">http://www.cnblogs.com/huangshoushi/p/5875022.html</a></p>', '1.whereDate() 方法 \r\n```php\r\n1 $qwhere(‘created_at’, ‘=’, date(‘Ymd’).’ 00:00:00’)); \r\n```\r\n以前查数据时，直接用where条件来比值判断，但是格式就会有严格的要求，如果上面的代码 第三个参数 是 date(‘Ymd’) 而不加 后面的00:00:00 这样在数据库里面就会找不到\r\n\r\n而判断是否相等 也都是对格...', 'laravel,Eloquent', '1', 'uploads/article/default.jpg', '1', '0', '38', '2017-10-23 17:16:17', '2018-01-10 17:10:32', null);
INSERT INTO `syf_articles` VALUES ('25', '1', 'Angular项目环境搭建', '宋耀锋', '（1）下载node.js（地址：https://nodejs.org/en/）安装包，直接下一步傻瓜式安装，安装好后系统内部就多了一个npm的变量，打开命令行工具可进行测试\r\nnode.js安装包 \r\n![](/uploads/article/20180102/5a4b1484eeb59.png)\r\n测试： \r\n![](/uploads/article/20180102/5a4b149a2626b.png)\r\n\r\n（2）使用npm下载angular/cli,命令：npm install -g @angular/cli\r\n![](/uploads/article/20180102/5a4b14aec4979.png)\r\n\r\n（3）此时系统中又会多一个ng的变量，可使用ng -v命令进行测试\r\n![](/uploads/article/20180102/5a4b15067bda0.png)\r\n（4）使用ng新建angular项目，命令：ng new action\r\n![](/uploads/article/20180102/5a4b153a84744.png)\r\n\r\n（5）自动项目，命令：ng serve,并在浏览器进行测试\r\n\r\n![](/uploads/article/20180102/5a4b15612a732.png)\r\n\r\n![](/uploads/article/20180102/5a4b15757f4a3.png)\r\n\r\n（6）下载angular依赖的jquery和bootstrap包到 node_modules文件夹中 \r\nnpm install jquery –save \r\nnpm install bootstrap –save \r\n（7）在.angular-cli.json中引入\r\n\r\n\"styles\": [\r\n        \"styles.css\",\r\n        \"../node_modules/bootstrap/dist/css/bootstrap.css\"\r\n      ],\r\n      \"scripts\": [\r\n        \"../node_modules/jquery/dist/jquery.min.js\",\r\n        \"../node_modules/bootstrap/dist/js/bootstrap.js\"\r\n      ],\r\n\r\n（8）下载类型描述文件 \r\n`npm install @types/jquery –save-dev \r\nnpm install @types/bootstrap –save-dev\r\n`\r\n\r\n（9）生成相关组件 \r\n`\r\n	ng g component start \r\n	ng g component product \r\n`\r\n………………………………………………', '<p>（1）下载node.js（地址：<a href=\"https://nodejs.org/en/\">https://nodejs.org/en/</a>）安装包，直接下一步傻瓜式安装，安装好后系统内部就多了一个npm的变量，打开命令行工具可进行测试<br>node.js安装包 <br><img src=\"/uploads/article/20180102/5a4b1484eeb59.png\" alt=\"\" title=\"\"><br>测试： <br><img src=\"/uploads/article/20180102/5a4b149a2626b.png\" alt=\"\" title=\"\"></p><p>（2）使用npm下载angular/cli,命令：npm install -g @angular/cli<br><img src=\"/uploads/article/20180102/5a4b14aec4979.png\" alt=\"\" title=\"\"></p><p>（3）此时系统中又会多一个ng的变量，可使用ng -v命令进行测试<br><img src=\"/uploads/article/20180102/5a4b15067bda0.png\" alt=\"\" title=\"\"><br>（4）使用ng新建angular项目，命令：ng new action<br><img src=\"/uploads/article/20180102/5a4b153a84744.png\" alt=\"\" title=\"\"></p><p>（5）自动项目，命令：ng serve,并在浏览器进行测试</p><p><img src=\"/uploads/article/20180102/5a4b15612a732.png\" alt=\"\" title=\"\"></p><p><img src=\"/uploads/article/20180102/5a4b15757f4a3.png\" alt=\"\" title=\"\"></p><p>（6）下载angular依赖的jquery和bootstrap包到 node_modules文件夹中 <br>npm install jquery –save <br>npm install bootstrap –save <br>（7）在.angular-cli.json中引入</p><p>\"styles\": [</p><pre><code>    &quot;styles.css&quot;,\n    &quot;../node_modules/bootstrap/dist/css/bootstrap.css&quot;\n  ],\n  &quot;scripts&quot;: [\n    &quot;../node_modules/jquery/dist/jquery.min.js&quot;,\n    &quot;../node_modules/bootstrap/dist/js/bootstrap.js&quot;\n  ],\n</code></pre><p>（8）下载类型描述文件 <br>`npm install @types/jquery –save-dev <br>npm install @types/bootstrap –save-dev<br>`</p><p>（9）生成相关组件 <br>`</p><pre><code>ng g component start \nng g component product </code></pre><p>`<br>………………………………………………</p>', '（1）下载node.js（地址：https://nodejs.org/en/）安装包，直接下一步傻瓜式安装，安装好后系统内部就多了一个npm的变量，打开命令行工具可进行测试\r\nnode.js安装包 \r\n\r\n测试： \r\n\r\n\r\n（2）使用npm下载angular/cli,命令：npm install g @angular/cli\r\n\r\n\r\n（3）此时系统中又会多一个ng的变量，可使用ng v命令进行...', 'Angular, Npm', '1', '/uploads/article/20180102/5a4b1484eeb59.png', '1', '0', '71', '2017-10-18 11:00:29', '2018-01-10 16:06:37', null);
INSERT INTO `syf_articles` VALUES ('26', '1', 'windows常用命令行操作', '宋耀锋', '切换当前目录（change directory）：cd\r\n创建目录（make directory） ：mkdir\r\n查看当前目录列表（directory）：dir 别名：ls（list）\r\n\r\n清空当前控制台（cls）别名：clear\r\n\r\n删除文件：del 别名：rm（remove）\r\n输出文件内容到控制台：cat 文件名\r\n进入目录或回退目：cd ..', '<p>切换当前目录（change directory）：cd<br>创建目录（make directory） ：mkdir<br>查看当前目录列表（directory）：dir 别名：ls（list）</p><p>清空当前控制台（cls）别名：clear</p><p>删除文件：del 别名：rm（remove）<br>输出文件内容到控制台：cat 文件名<br>进入目录或回退目：cd ..</p>', '切换当前目录（change directory）：cd\r\n创建目录（make directory） ：mkdir\r\n查看当前目录列表（directory）：dir 别名：ls（list）\r\n\r\n清空当前控制台（cls）别名：clear\r\n\r\n删除文件：del 别名：rm（remove）\r\n输出文件内容到控制台：cat 文件名\r\n进入目录或回退目：cd ..', 'Windows', '1', 'uploads/article/default.jpg', '1', '0', '119', '2017-10-16 20:28:05', '2018-01-10 16:28:08', null);
INSERT INTO `syf_articles` VALUES ('27', '1', 'Laravel自定义分页样式', '宋耀锋', '<?php\r\n\r\nnamespace App\\Http\\Controllers;\r\n\r\n```php\r\nuse DB;\r\nuse App\\Http\\Controllers\\Controller;\r\n\r\nclass UserController extends Controller{\r\n    /**\r\n     * 显示应用中的所有用户\r\n     *\r\n     * @return Response\r\n     */\r\n    public function index()\r\n    {\r\n        $users = DB::table(\'users\')->paginate(15);\r\n        return view(\'user.index\', [\'users\' => $users]);\r\n    }\r\n}\r\n\r\n```\r\n// blade模板展示\r\n```html\r\n <div id=\"pull_right\">\r\n       <div class=\"pull-right\">\r\n          {!! $users->render() !!}\r\n       </div>\r\n </div>\r\n\r\n//CSS样式\r\n<style type=\"text/css\">\r\n        #pull_right{\r\n            text-align:center;\r\n        }\r\n        .pull-right {\r\n            /*float: left!important;*/\r\n        }\r\n        .pagination {\r\n            display: inline-block;\r\n            padding-left: 0;\r\n            margin: 20px 0;\r\n            border-radius: 4px;\r\n        }\r\n        .pagination > li {\r\n            display: inline;\r\n        }\r\n        .pagination > li > a,\r\n        .pagination > li > span {\r\n            position: relative;\r\n            float: left;\r\n            padding: 6px 12px;\r\n            margin-left: -1px;\r\n            line-height: 1.42857143;\r\n            color: #428bca;\r\n            text-decoration: none;\r\n            background-color: #fff;\r\n            border: 1px solid #ddd;\r\n        }\r\n        .pagination > li:first-child > a,\r\n        .pagination > li:first-child > span {\r\n            margin-left: 0;\r\n            border-top-left-radius: 4px;\r\n            border-bottom-left-radius: 4px;\r\n        }\r\n        .pagination > li:last-child > a,\r\n        .pagination > li:last-child > span {\r\n            border-top-right-radius: 4px;\r\n            border-bottom-right-radius: 4px;\r\n        }\r\n        .pagination > li > a:hover,\r\n        .pagination > li > span:hover,\r\n        .pagination > li > a:focus,\r\n        .pagination > li > span:focus {\r\n            color: #2a6496;\r\n            background-color: #eee;\r\n            border-color: #ddd;\r\n        }\r\n        .pagination > .active > a,\r\n        .pagination > .active > span,\r\n        .pagination > .active > a:hover,\r\n        .pagination > .active > span:hover,\r\n        .pagination > .active > a:focus,\r\n        .pagination > .active > span:focus {\r\n            z-index: 2;\r\n            color: #fff;\r\n            cursor: default;\r\n            background-color: #428bca;\r\n            border-color: #428bca;\r\n        }\r\n        .pagination > .disabled > span,\r\n        .pagination > .disabled > span:hover,\r\n        .pagination > .disabled > span:focus,\r\n        .pagination > .disabled > a,\r\n        .pagination > .disabled > a:hover,\r\n        .pagination > .disabled > a:focus {\r\n            color: #777;\r\n            cursor: not-allowed;\r\n            background-color: #fff;\r\n            border-color: #ddd;\r\n        }\r\n        .clear{\r\n            clear: both;\r\n        }\r\n </style>\r\n```', '<p>&lt;?php</p><p>namespace AppHttpControllers;</p><pre><code class=\"lang-php\">use DB;\nuse App\\Http\\Controllers\\Controller;\n\nclass UserController extends Controller{\n    /**\n     * 显示应用中的所有用户\n     *\n     * @return Response\n     */\n    public function index()\n    {\n        $users = DB::table(\'users\')-&gt;paginate(15);\n        return view(\'user.index\', [\'users\' =&gt; $users]);\n    }\n}\n</code></pre><p>// blade模板展示</p><pre><code class=\"lang-html\"> &lt;div id=&quot;pull_right&quot;&gt;\n       &lt;div class=&quot;pull-right&quot;&gt;\n          {!! $users-&gt;render() !!}\n       &lt;/div&gt;\n &lt;/div&gt;\n\n//CSS样式\n&lt;style type=&quot;text/css&quot;&gt;\n        #pull_right{\n            text-align:center;\n        }\n        .pull-right {\n            /*float: left!important;*/\n        }\n        .pagination {\n            display: inline-block;\n            padding-left: 0;\n            margin: 20px 0;\n            border-radius: 4px;\n        }\n        .pagination &gt; li {\n            display: inline;\n        }\n        .pagination &gt; li &gt; a,\n        .pagination &gt; li &gt; span {\n            position: relative;\n            float: left;\n            padding: 6px 12px;\n            margin-left: -1px;\n            line-height: 1.42857143;\n            color: #428bca;\n            text-decoration: none;\n            background-color: #fff;\n            border: 1px solid #ddd;\n        }\n        .pagination &gt; li:first-child &gt; a,\n        .pagination &gt; li:first-child &gt; span {\n            margin-left: 0;\n            border-top-left-radius: 4px;\n            border-bottom-left-radius: 4px;\n        }\n        .pagination &gt; li:last-child &gt; a,\n        .pagination &gt; li:last-child &gt; span {\n            border-top-right-radius: 4px;\n            border-bottom-right-radius: 4px;\n        }\n        .pagination &gt; li &gt; a:hover,\n        .pagination &gt; li &gt; span:hover,\n        .pagination &gt; li &gt; a:focus,\n        .pagination &gt; li &gt; span:focus {\n            color: #2a6496;\n            background-color: #eee;\n            border-color: #ddd;\n        }\n        .pagination &gt; .active &gt; a,\n        .pagination &gt; .active &gt; span,\n        .pagination &gt; .active &gt; a:hover,\n        .pagination &gt; .active &gt; span:hover,\n        .pagination &gt; .active &gt; a:focus,\n        .pagination &gt; .active &gt; span:focus {\n            z-index: 2;\n            color: #fff;\n            cursor: default;\n            background-color: #428bca;\n            border-color: #428bca;\n        }\n        .pagination &gt; .disabled &gt; span,\n        .pagination &gt; .disabled &gt; span:hover,\n        .pagination &gt; .disabled &gt; span:focus,\n        .pagination &gt; .disabled &gt; a,\n        .pagination &gt; .disabled &gt; a:hover,\n        .pagination &gt; .disabled &gt; a:focus {\n            color: #777;\n            cursor: not-allowed;\n            background-color: #fff;\n            border-color: #ddd;\n        }\n        .clear{\n            clear: both;\n        }\n &lt;/style&gt;</code></pre>', '<?php\r\n\r\nnamespace App\\Http\\Controllers;\r\n\r\n```php\r\nuse DB;\r\nuse App\\Http\\Controllers\\Controller;\r\n\r\nclass UserController extends Controller{\r\n    /\r\n      显示应用中的所有用户\r\n     \r\n      @return Response\r\n ...', 'Laravel', '2', 'uploads/article/default.jpg', '0', '0', '42', '2017-10-10 16:43:42', '2017-10-10 16:43:42', null);
INSERT INTO `syf_articles` VALUES ('28', '1', 'laravel 使用Intervention/image生成缩略图', '宋耀锋', '说明#\r\n\r\nIntervention/image 是为 Laravel 定制的图片处理工具, 它提供了一套易于表达的方式来创建、编辑图片。\r\n\r\nDemo 代码请见：https://github.com/zhengjinghua/est-image-demo\r\n\r\n请参照文档 如何利用 Homestead 快速运行一个 Laravel 项目.\r\n\r\n文章概览#\r\n\r\n	安装； \r\n	修改配置信息； \r\n	基础用法； \r\n	特色功能. \r\n	接下来是详细解说.\r\n\r\n安装#\r\n1). 使用 composer 安装:\r\n\r\ncomposer require intervention/image \r\n上面的命令会\r\n\r\n2). 修改 app/config/app.php 添加 ServiceProvider:\r\n\r\n// 将下面代码添加到 providers 数组中\r\n\r\n```php\r\n\'providers\' => [\r\n    // ...\r\n    Intervention\\Image\\ImageServiceProvider::class,\r\n    // ...\r\n  ],\r\n```\r\n// 将下面代码添加到 aliases 数组中\r\n\r\n```php\r\n\'aliases\' => [\r\n    // ...\r\n    \'Image\' => Intervention\\Image\\Facades\\Image::class,\r\n    // ...\r\n  ],\r\n```\r\n图片处理库的配置#\r\n此扩展包默认使用 PHP 的 GD 库来进行图像处理, 但由于 GD 库对图像的处理效率要稍逊色于 imagemagick 库, 因此这里推荐替换为 imagemagick 库来进行图像处理.\r\n\r\n开始之前, 你得先确定本地已经安装好 GD 或 Imagick.\r\n\r\n在使用 Intervention Image 的时候, 你只需要给 ImageManager 传一个数组参数就可以完成 GD 和 Imagick 库之间的互相切换.\r\n\r\n如下所示:\r\n\r\n```php\r\n// 引入 composer autoload\r\n\r\nrequire \'vendor/autoload.php\';\r\n\r\n// 导入 Intervention Image Manager Class\r\nuse Intervention\\Image\\ImageManager;\r\n// 通过指定 driver 来创建一个 image manager 实例\r\n\r\n$manager = new ImageManager(array(\'driver\' => \'imagick\'));\r\n// 最后创建 image 实例\r\n\r\n$image = $manager->make(\'public/foo.jpg\')->resize(300, 200);\r\n另外你也可以使用 ImageManager 的静态版本, 如下所示:\r\n\r\n// 引入 composer autoload\r\nrequire \'vendor/autoload.php\';\r\n// 导入 Intervention Image Manager Class\r\nuse Intervention\\Image\\ImageManagerStatic as Image;\r\n// 通过指定 driver 来创建一个 image manager 实例 (默认使用 gd)\r\n\r\nImage::configure(array(\'driver\' => \'imagick\'));\r\n// 最后创建 image 实例\r\n\r\n$image = Image::make(\'public/foo.jpg\')->resize(300, 200);\r\n生成 config/image.php 配置文件:\r\n\r\nphp artisan vendor:publish --provider=\"Intervention\\Image\\ImageServiceProviderLaravel5\"\r\n// 运行上面的命令后, 会在项目中生成 config/image.php 配置文件, 打开此文件并将 driver 修改成 imagick:\r\n\r\nreturn array(\r\n    \'driver\' => \'imagick\'\r\n);\r\n```\r\n到此, 此拓展包即安装成功 :beers: :beers: :beers: \r\n3. 基础用法#\r\n\r\n// 修改指定图片的大小\r\n\r\n```php\r\n$img = Image::make(\'images/avatar.jpg\')->resize(200, 200);\r\n```\r\n// 插入水印, 水印位置在原图片的右下角, 距离下边距 10 像素, 距离右边距 15 像素\r\n```php\r\n$img->insert(\'images/watermark.png\', \'bottom-right\', 15, 10);\r\n\r\n// 将处理后的图片重新保存到其他路径\r\n\r\n$img->save(\'images/new_avatar.jpg\');\r\n/* 上面的逻辑可以通过链式表达式搞定 */\r\n\r\n$img = Image::make(\'images/avatar.jpg\')->resize(200, 200)->insert(\'images/new_avatar.jpg\', \'bottom-right\', 15, 10);\r\n```\r\n特色功能#\r\n除上文介绍的基本用法之外, 此扩展包还支持:\r\n\r\n图片上传功能; \r\n图片缓存功能; \r\n图片过滤功能: 将图片按照统一规则进行转换; \r\n图片动态处理: 根据访问图片的 URL 参数自动调整图片大小\r\n\r\n更多的例子请移步[[官方文档]][1] 参考.\r\n[1]: http://image.intervention.io/getting_started/introduction \" 官方文档\"', '<p>说明#</p><p>Intervention/image 是为 Laravel 定制的图片处理工具, 它提供了一套易于表达的方式来创建、编辑图片。</p><p>Demo 代码请见：<a href=\"https://github.com/zhengjinghua/est-image-demo\">https://github.com/zhengjinghua/est-image-demo</a></p><p>请参照文档 如何利用 Homestead 快速运行一个 Laravel 项目.</p><p>文章概览#</p><pre><code>安装； \n修改配置信息； \n基础用法； \n特色功能. \n接下来是详细解说.\n</code></pre><p>安装#<br>1). 使用 composer 安装:</p><p>composer require intervention/image <br>上面的命令会</p><p>2). 修改 app/config/app.php 添加 ServiceProvider:</p><p>// 将下面代码添加到 providers 数组中</p><pre><code class=\"lang-php\">\'providers\' =&gt; [\n    // ...\n    Intervention\\Image\\ImageServiceProvider::class,\n    // ...\n  ],</code></pre><p>// 将下面代码添加到 aliases 数组中</p><pre><code class=\"lang-php\">\'aliases\' =&gt; [\n    // ...\n    \'Image\' =&gt; Intervention\\Image\\Facades\\Image::class,\n    // ...\n  ],</code></pre><p>图片处理库的配置#<br>此扩展包默认使用 PHP 的 GD 库来进行图像处理, 但由于 GD 库对图像的处理效率要稍逊色于 imagemagick 库, 因此这里推荐替换为 imagemagick 库来进行图像处理.</p><p>开始之前, 你得先确定本地已经安装好 GD 或 Imagick.</p><p>在使用 Intervention Image 的时候, 你只需要给 ImageManager 传一个数组参数就可以完成 GD 和 Imagick 库之间的互相切换.</p><p>如下所示:</p><pre><code class=\"lang-php\">// 引入 composer autoload\n\nrequire \'vendor/autoload.php\';\n\n// 导入 Intervention Image Manager Class\nuse Intervention\\Image\\ImageManager;\n// 通过指定 driver 来创建一个 image manager 实例\n\n$manager = new ImageManager(array(\'driver\' =&gt; \'imagick\'));\n// 最后创建 image 实例\n\n$image = $manager-&gt;make(\'public/foo.jpg\')-&gt;resize(300, 200);\n另外你也可以使用 ImageManager 的静态版本, 如下所示:\n\n// 引入 composer autoload\nrequire \'vendor/autoload.php\';\n// 导入 Intervention Image Manager Class\nuse Intervention\\Image\\ImageManagerStatic as Image;\n// 通过指定 driver 来创建一个 image manager 实例 (默认使用 gd)\n\nImage::configure(array(\'driver\' =&gt; \'imagick\'));\n// 最后创建 image 实例\n\n$image = Image::make(\'public/foo.jpg\')-&gt;resize(300, 200);\n生成 config/image.php 配置文件:\n\nphp artisan vendor:publish --provider=&quot;Intervention\\Image\\ImageServiceProviderLaravel5&quot;\n// 运行上面的命令后, 会在项目中生成 config/image.php 配置文件, 打开此文件并将 driver 修改成 imagick:\n\nreturn array(\n    \'driver\' =&gt; \'imagick\'\n);</code></pre><p>到此, 此拓展包即安装成功 :beers: :beers: :beers:</p><ol><li>基础用法#</li></ol><p>// 修改指定图片的大小</p><pre><code class=\"lang-php\">$img = Image::make(\'images/avatar.jpg\')-&gt;resize(200, 200);</code></pre><p>// 插入水印, 水印位置在原图片的右下角, 距离下边距 10 像素, 距离右边距 15 像素</p><pre><code class=\"lang-php\">$img-&gt;insert(\'images/watermark.png\', \'bottom-right\', 15, 10);\n\n// 将处理后的图片重新保存到其他路径\n\n$img-&gt;save(\'images/new_avatar.jpg\');\n/* 上面的逻辑可以通过链式表达式搞定 */\n\n$img = Image::make(\'images/avatar.jpg\')-&gt;resize(200, 200)-&gt;insert(\'images/new_avatar.jpg\', \'bottom-right\', 15, 10);</code></pre><p>特色功能#<br>除上文介绍的基本用法之外, 此扩展包还支持:</p><p>图片上传功能; <br>图片缓存功能; <br>图片过滤功能: 将图片按照统一规则进行转换; <br>图片动态处理: 根据访问图片的 URL 参数自动调整图片大小</p><p>更多的例子请移步[[官方文档]][1] 参考.</p>', '说明\r\n\r\nIntervention/image 是为 Laravel 定制的图片处理工具, 它提供了一套易于表达的方式来创建、编辑图片。\r\n\r\nDemo 代码请见：https://github.com/zhengjinghua/estimagedemo\r\n\r\n请参照文档 如何利用 Homestead 快速运行一个 Laravel 项目.\r\n\r\n文章概览\r\n\r\n	安装； \r\n	修改配置信息； \r\n...', 'Laravel,Intervention/image', '1', 'uploads/article/default.jpg', '0', '0', '142', '2017-10-10 15:30:55', '2017-10-10 15:30:55', null);
INSERT INTO `syf_articles` VALUES ('29', '1', 'PhpStorm 2016.1 激活注册码', '宋耀锋', '分享一个PhpStorm 2016.1 激活注册码\r\n\r\n\r\n\r\n\r\n\r\nCNEKJPQZEX-eyJsaWNlbnNlSWQiOiJDTkVLSlBRWkVYIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9XSwiaGFzaCI6IjUxOTU1OTMvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-QOxwjWvRwJz6vo6J6adC3CJ4ukQHosbPYZ94URUVFna/Rbew8xK/M5gP3kAaPh6ZDveFdtMR1UBoumq3eCwXtXM3U3ls5noB4LIr+QplVlCj2pK5uNq7g/feyNyQcHpSXtvhIOnXDBLOecB05DOsxzm0p7ulGGJoAInmHeb9mc0eYjqc4RPpUQfh6HSYBnvEnKMlLF5bz4KEtzmsvvgA55CwzwQ3gRitm5Q/wUT7AQCBdjmBfNUjKVQL6TSjSDPp56FUdEs4Aab8LqstA2DIMbxocO64rvytmcUeIwu8Mi5uq87KQP5AQMSMYb59Inbd+dmVfx5cJo3fRS4/5s3/Hg==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==', '<p>分享一个PhpStorm 2016.1 激活注册码</p><p>CNEKJPQZEX-eyJsaWNlbnNlSWQiOiJDTkVLSlBRWkVYIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE4LTAxLTMwIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTgtMDEtMzAifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0wMS0zMCJ9XSwiaGFzaCI6IjUxOTU1OTMvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-QOxwjWvRwJz6vo6J6adC3CJ4ukQHosbPYZ94URUVFna/Rbew8xK/M5gP3kAaPh6ZDveFdtMR1UBoumq3eCwXtXM3U3ls5noB4LIr+QplVlCj2pK5uNq7g/feyNyQcHpSXtvhIOnXDBLOecB05DOsxzm0p7ulGGJoAInmHeb9mc0eYjqc4RPpUQfh6HSYBnvEnKMlLF5bz4KEtzmsvvgA55CwzwQ3gRitm5Q/wUT7AQCBdjmBfNUjKVQL6TSjSDPp56FUdEs4Aab8LqstA2DIMbxocO64rvytmcUeIwu8Mi5uq87KQP5AQMSMYb59Inbd+dmVfx5cJo3fRS4/5s3/Hg==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</p>', '分享一个PhpStorm 2016.1 激活注册码\r\n\r\n\r\n\r\n\r\n\r\nCNEKJPQZEXeyJsaWNlbnNlSWQiOiJDTkVLSlBRWkVYIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZ...', 'PhpStorm,激活码', '1', 'uploads/article/default.jpg', '0', '0', '241', '2017-10-10 09:46:37', '2017-10-10 09:46:37', null);
INSERT INTO `syf_articles` VALUES ('30', '1', 'Linux下vim常用配置', '宋耀锋', 'vim的配置文件默认安装在/etc/vimrc目录下，vi类似 \r\n这些是vim的常用配置\r\n```\r\nif v:lang =~ \"utf8$\" || v:lang =~ \"UTF-8$\"\r\n   set fileencodings=ucs-bom,utf-8,latin1\r\nendif\r\n\r\nset nocompatible    \" Use Vim defaults (much better!)\r\nset bs=indent,eol,start     \" allow backspacing over everything in insert mode\r\n\"set ai         \" always set autoindenting on\r\n\"set backup     \" keep a backup file\r\nset viminfo=\'20,\\\"50    \" read/write a .viminfo file, don\'t store more\r\n            \" than 50 lines of registers\r\nset history=50      \" keep 50 lines of command line history\r\nset ruler       \" show the cursor position all the time\r\n\r\n\" Only do this part when compiled with support for autocommands\r\nif has(\"autocmd\")\r\n  augroup redhat\r\n  autocmd!\r\n  \" In text files, always limit the width of text to 78 characters\r\n  \" autocmd BufRead *.txt set tw=78\r\n  \" When editing a file, always jump to the last cursor position\r\n  autocmd BufReadPost *\r\n  \\ if line(\"\'\\\"\") > 0 && line (\"\'\\\"\") <= line(\"$\") |\r\n  \\   exe \"normal! g\'\\\"\" |\r\n  \\ endif\r\n  \" don\'t write swapfile on most commonly used directories for NFS mounts or USB sticks\r\n  autocmd BufNewFile,BufReadPre /media/*,/run/media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp\r\n  \" start with spec file template\r\n  autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec\r\n  augroup END\r\nendif\r\n\r\nif has(\"cscope\") && filereadable(\"/usr/bin/cscope\")\r\n   set csprg=/usr/bin/cscope\r\n   set csto=0\r\n   set cst\r\n   set nocsverb\r\n   \" add any database in current directory\r\n   if filereadable(\"cscope.out\")\r\n      cs add $PWD/cscope.out\r\n   \" else add database pointed to by environment\r\n   elseif $CSCOPE_DB != \"\"\r\n      cs add $CSCOPE_DB\r\n   endif\r\n   set csverb\r\nendif\r\n\r\n\" Switch syntax highlighting on, when the terminal has colors\r\n\" Also switch on highlighting the last used search pattern.\r\nif &t_Co > 2 || has(\"gui_running\")\r\n  syntax on\r\n  set hlsearch\r\nendif\r\n\r\nfiletype plugin on\r\n\r\nif &term==\"xterm\"\r\n     set t_Co=8\r\n     set t_Sb=[4%dm\r\n     set t_Sf=[3%dm\r\nendif\r\n\r\n\" Don\'t wake up system with blinking cursor:\r\n\" http://www.linuxpowertop.org/known.php\r\nlet &guicursor = &guicursor . \",a:blinkon0\"\r\n\r\n\r\n\"与windows共享剪贴板\r\nset clipboard+=unnamed\r\n\r\n\"显示行号, 或set number\r\nset nu\r\n\r\n\"历史命令保存行数 \r\nset history=100 \r\n\r\n\"高亮光标所在行\r\nset cursorline\r\n\r\n\"允许使用鼠标点击定位\r\nset mouse=a\r\n\r\n\r\n\"状态栏显示当前执行的命令\r\nset showcmd\r\n\r\n\"标尺功能，显示当前光标所在行列号\r\nset ruler\r\n\r\n\"设置命令行高度为3\r\nset cmdheight=3\r\n\r\n\"粘贴时保持格式\r\nset paste\r\n\r\n\"高亮显示匹配的括号\r\nset showmatch\r\n\r\n\"在搜索的时候忽略大小写\r\nset ignorecase\r\n\r\n\"高亮被搜索的句子\r\nset hlsearch\r\n\r\n\"在搜索时，输入的词句的逐字符高亮（类似firefox的搜索）\r\nset incsearch\r\n\r\n\"继承前一行的缩进方式，特别适用于多行注释\r\nset autoindent\r\n\r\n\"为C程序提供自动缩进\r\nset smartindent\r\n\r\n\"使用C样式的缩进\r\nset cindent\r\n\r\n\"制表符为4\r\nset tabstop=4\r\n\r\n\"统一缩进为4\r\nset softtabstop=4\r\nset shiftwidth=4\r\n\r\n\"允许使用退格键，或set backspace=2\r\nset backspace=eol,start,indent\r\nset whichwrap+=<,>,h,l\r\n\r\n\"取消换行\r\nset nowrap\r\n\r\n\"启动的时候不显示那个援助索马里儿童的提示\r\nset shortmess=atI\r\n\r\n\"在被分割的窗口间显示空白，便于阅读\r\nset fillchars=vert:\\ ,stl:\\ ,stlnc:\\\r\n\r\n\"光标移动到buffer的顶部和底部时保持3行距离, 或set so=3\r\nset scrolloff=3\r\n\r\n\"设定默认解码\r\nset fenc=utf-8\r\nset fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936\r\n\r\n\"设定字体\r\nset guifont=Courier_New:h11:cANSI\r\nset guifontwide=新宋体:h11:cGB2312\r\n\r\n\"设定编码\r\nset enc=utf-8\r\nset fileencodings=ucs-bom,utf-8,chinese\r\nset langmenu=zh_CN.UTF-8\r\nlanguage message zh_CN.UTF-8\r\nsource $VIMRUNTIME/delmenu.vim\r\nsource $VIMRUNTIME/menu.vim\r\n\r\n\"自动补全\r\nfiletype plugin indent on\r\nset completeopt=longest,menu\r\n\r\n\"自动补全命令时候使用菜单式匹配列表\r\nset wildmenu\r\nautocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete\r\nautocmd FileType python set omnifunc=pythoncomplete#Complete\r\nautocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS\r\nautocmd FileType html set omnifunc=htmlcomplete#CompleteTags\r\nautocmd FileType css set omnifunc=csscomplete#CompleteCSS\r\nautocmd FileType xml set omnifunc=xmlcomplete#CompleteTags\r\nautocmd FileType java set omnifunc=javacomplete#Complet\r\n\r\n```', '<p>vim的配置文件默认安装在/etc/vimrc目录下，vi类似 <br>这些是vim的常用配置</p><pre><code>if v:lang =~ &quot;utf8$&quot; || v:lang =~ &quot;UTF-8$&quot;\n   set fileencodings=ucs-bom,utf-8,latin1\nendif\n\nset nocompatible    &quot; Use Vim defaults (much better!)\nset bs=indent,eol,start     &quot; allow backspacing over everything in insert mode\n&quot;set ai         &quot; always set autoindenting on\n&quot;set backup     &quot; keep a backup file\nset viminfo=\'20,\\&quot;50    &quot; read/write a .viminfo file, don\'t store more\n            &quot; than 50 lines of registers\nset history=50      &quot; keep 50 lines of command line history\nset ruler       &quot; show the cursor position all the time\n\n&quot; Only do this part when compiled with support for autocommands\nif has(&quot;autocmd&quot;)\n  augroup redhat\n  autocmd!\n  &quot; In text files, always limit the width of text to 78 characters\n  &quot; autocmd BufRead *.txt set tw=78\n  &quot; When editing a file, always jump to the last cursor position\n  autocmd BufReadPost *\n  \\ if line(&quot;\'\\&quot;&quot;) &gt; 0 &amp;&amp; line (&quot;\'\\&quot;&quot;) &lt;= line(&quot;$&quot;) |\n  \\   exe &quot;normal! g\'\\&quot;&quot; |\n  \\ endif\n  &quot; don\'t write swapfile on most commonly used directories for NFS mounts or USB sticks\n  autocmd BufNewFile,BufReadPre /media/*,/run/media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp\n  &quot; start with spec file template\n  autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec\n  augroup END\nendif\n\nif has(&quot;cscope&quot;) &amp;&amp; filereadable(&quot;/usr/bin/cscope&quot;)\n   set csprg=/usr/bin/cscope\n   set csto=0\n   set cst\n   set nocsverb\n   &quot; add any database in current directory\n   if filereadable(&quot;cscope.out&quot;)\n      cs add $PWD/cscope.out\n   &quot; else add database pointed to by environment\n   elseif $CSCOPE_DB != &quot;&quot;\n      cs add $CSCOPE_DB\n   endif\n   set csverb\nendif\n\n&quot; Switch syntax highlighting on, when the terminal has colors\n&quot; Also switch on highlighting the last used search pattern.\nif &amp;t_Co &gt; 2 || has(&quot;gui_running&quot;)\n  syntax on\n  set hlsearch\nendif\n\nfiletype plugin on\n\nif &amp;term==&quot;xterm&quot;\n     set t_Co=8\n     set t_Sb=[4%dm\n     set t_Sf=[3%dm\nendif\n\n&quot; Don\'t wake up system with blinking cursor:\n&quot; http://www.linuxpowertop.org/known.php\nlet &amp;guicursor = &amp;guicursor . &quot;,a:blinkon0&quot;\n\n\n&quot;与windows共享剪贴板\nset clipboard+=unnamed\n\n&quot;显示行号, 或set number\nset nu\n\n&quot;历史命令保存行数 \nset history=100 \n\n&quot;高亮光标所在行\nset cursorline\n\n&quot;允许使用鼠标点击定位\nset mouse=a\n\n\n&quot;状态栏显示当前执行的命令\nset showcmd\n\n&quot;标尺功能，显示当前光标所在行列号\nset ruler\n\n&quot;设置命令行高度为3\nset cmdheight=3\n\n&quot;粘贴时保持格式\nset paste\n\n&quot;高亮显示匹配的括号\nset showmatch\n\n&quot;在搜索的时候忽略大小写\nset ignorecase\n\n&quot;高亮被搜索的句子\nset hlsearch\n\n&quot;在搜索时，输入的词句的逐字符高亮（类似firefox的搜索）\nset incsearch\n\n&quot;继承前一行的缩进方式，特别适用于多行注释\nset autoindent\n\n&quot;为C程序提供自动缩进\nset smartindent\n\n&quot;使用C样式的缩进\nset cindent\n\n&quot;制表符为4\nset tabstop=4\n\n&quot;统一缩进为4\nset softtabstop=4\nset shiftwidth=4\n\n&quot;允许使用退格键，或set backspace=2\nset backspace=eol,start,indent\nset whichwrap+=&lt;,&gt;,h,l\n\n&quot;取消换行\nset nowrap\n\n&quot;启动的时候不显示那个援助索马里儿童的提示\nset shortmess=atI\n\n&quot;在被分割的窗口间显示空白，便于阅读\nset fillchars=vert:\\ ,stl:\\ ,stlnc:\\\n\n&quot;光标移动到buffer的顶部和底部时保持3行距离, 或set so=3\nset scrolloff=3\n\n&quot;设定默认解码\nset fenc=utf-8\nset fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936\n\n&quot;设定字体\nset guifont=Courier_New:h11:cANSI\nset guifontwide=新宋体:h11:cGB2312\n\n&quot;设定编码\nset enc=utf-8\nset fileencodings=ucs-bom,utf-8,chinese\nset langmenu=zh_CN.UTF-8\nlanguage message zh_CN.UTF-8\nsource $VIMRUNTIME/delmenu.vim\nsource $VIMRUNTIME/menu.vim\n\n&quot;自动补全\nfiletype plugin indent on\nset completeopt=longest,menu\n\n&quot;自动补全命令时候使用菜单式匹配列表\nset wildmenu\nautocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete\nautocmd FileType python set omnifunc=pythoncomplete#Complete\nautocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS\nautocmd FileType html set omnifunc=htmlcomplete#CompleteTags\nautocmd FileType css set omnifunc=csscomplete#CompleteCSS\nautocmd FileType xml set omnifunc=xmlcomplete#CompleteTags\nautocmd FileType java set omnifunc=javacomplete#Complet\n</code></pre>', 'vim的配置文件默认安装在/etc/vimrc目录下，vi类似 \r\n这些是vim的常用配置\r\n```\r\nif v:lang = \"utf8$\" || v:lang = \"UTF8$\"\r\n   set fileencodings=ucsbom,utf8,latin1\r\nendif\r\n\r\nset nocompatible    \" Use Vim defaults (much better!)\r\nse...', 'Linux,Vim', '1', 'uploads/article/default.jpg', '0', '1', '144', '2017-09-25 17:46:29', '2018-01-10 15:57:40', null);
INSERT INTO `syf_articles` VALUES ('31', '1', 'laravel分页参数设置', '宋耀锋', '```php\r\n<?php  \r\n$list = $model->where($filter)  \r\n            ->orderBy(\'created_at\', \'desc\')  \r\n            ->paginate(  \r\n                $pagesize,  //每页显示条的条数  \r\n                //分页后面的相关参数设置  \r\n                [  \r\n                    param1,  \r\n                    param2,  \r\n                    param3,  \r\n                    ...  \r\n                ],  \r\n[php] view plain copy\r\n<span style=\"white-space:pre;\">     </span>//当前页码  \r\n                \'page\',  \r\n                $page  \r\n            );  \r\n```', '<pre><code class=\"lang-php\">&lt;?php  \n$list = $model-&gt;where($filter)  \n            -&gt;orderBy(\'created_at\', \'desc\')  \n            -&gt;paginate(  \n                $pagesize,  //每页显示条的条数  \n                //分页后面的相关参数设置  \n                [  \n                    param1,  \n                    param2,  \n                    param3,  \n                    ...  \n                ],  \n[php] view plain copy\n&lt;span style=&quot;white-space:pre;&quot;&gt;     &lt;/span&gt;//当前页码  \n                \'page\',  \n                $page  \n            );  </code></pre>', '```php\r\n<?php  \r\n$list = $modelwhere($filter)  \r\n            orderBy(\'created_at\', \'desc\')  \r\n            paginate(  \r\n                $pagesize,  //每页显示条的条数  \r\n                //分页后面的相关参数设置  \r\n      ...', 'Laravel', '1', 'uploads/article/default.jpg', '0', '0', '53', '2017-09-22 10:58:45', '2017-09-22 10:58:45', null);
INSERT INTO `syf_articles` VALUES ('32', '3', 'Linux下编译php与nginx进行通信', '宋耀锋', '由于在linux下，php和nginx是两个独立的进程，所以需要需要进行配置才能让PHP和NGINX进行通信\r\n\r\n（1）下载PHP源码包并解压 \r\nphp-5.5.22.tar.gz 解压：tar zxvf php-5.5.22 \r\n（2）检查PHP安装环境 \r\n[root@localhost ~]# ./configure –prefix=/usr/local/php5 –with-mysql=mysqlnd –enable-mysqlnd –enable-gd-native-ttf –enable-gd-jis-conv –enable-fpm –enable-shmop –enable-sysvsem –enable-mbregex –enable-mbstring –enable-ftp –enable-gd-native-ttf –enable-pcntl –enable-sockets –with-xmlrpc –enable-soap –without-pear –with-gettext –enable-session –with-curl –with-jpeg-dir –with-zlib –enable-zip\r\n\r\n检查环境完成 \r\n![](/uploads/article/20180102/5a4b1cc398c6a.png)\r\n（3）编译安装 \r\nmake && make install \r\n安装好后生成的安装文件 \r\n![](/uploads/article/20180102/5a4b1cf008bcf.png)\r\n（4）编译安装nginx,过程可以参考我的上一篇文章NGINX的编译安装 \r\n（5）从解压后的源码包里复制PHP的配置文件 \r\ncp /usr/local/src/php-5.5.22/php.ini-production /usr/local/php5/lib/php.ini \r\n（6）复制php 与nginx进行通信的进程配置文件 \r\ncp /usr/local/php5/etc/php-fpm.conf.default /usr/local/php5/etc//php-fpm.conf \r\n（7）启动该进程\r\n```\r\n/usr/local/php5/sbin/php-fpm \r\n```\r\n![](/uploads/article/20180102/5a4b1dcb415a2.png)\r\n```\r\nserver { \r\nlisten 80; \r\nserver_name localhost;\r\n\r\n    #charset koi8-r;\r\n\r\n     #access_log  logs/host.access.log  main;\r\n\r\n      location / {\r\n          root   html;\r\n         index  index.php;\r\n       }\r\n\r\n\r\n      location ~ \\.php$ {\r\n          root           html;\r\n          fastcgi_pass   127.0.0.1:9000;\r\n          fastcgi_index  index.php;\r\n         fastcgi_param  SCRIPT_FILENAME  /usr/local/nginx/html/$fastcgi_script_name;\r\n          include        fastcgi_params;\r\n\r\n       }\r\n  }\r\n```\r\n（9）修改完nginx的配置文件后，重新启动nginx的进程 \r\n/usr/local/nginx/sbin/nginx -s load \r\n（10）在网站根目录/usr/local/php5/html/下见一个php的文件index.php \r\n在index.php文件内写一个php函数：phpinfo();进行测试 \r\n（11）在浏览器进行测试,输入127.0.0.1即可 \r\n![](/uploads/article/20180102/5a4b1e3fe7ea2.png)', '<p>由于在linux下，php和nginx是两个独立的进程，所以需要需要进行配置才能让PHP和NGINX进行通信</p><p>（1）下载PHP源码包并解压 <br>php-5.5.22.tar.gz 解压：tar zxvf php-5.5.22 <br>（2）检查PHP安装环境 <br>[root@localhost ~]# ./configure –prefix=/usr/local/php5 –with-mysql=mysqlnd –enable-mysqlnd –enable-gd-native-ttf –enable-gd-jis-conv –enable-fpm –enable-shmop –enable-sysvsem –enable-mbregex –enable-mbstring –enable-ftp –enable-gd-native-ttf –enable-pcntl –enable-sockets –with-xmlrpc –enable-soap –without-pear –with-gettext –enable-session –with-curl –with-jpeg-dir –with-zlib –enable-zip</p><p>检查环境完成 <br><img src=\"/uploads/article/20180102/5a4b1cc398c6a.png\" alt=\"\" title=\"\"><br>（3）编译安装 <br>make && make install <br>安装好后生成的安装文件 <br><img src=\"/uploads/article/20180102/5a4b1cf008bcf.png\" alt=\"\" title=\"\"><br>（4）编译安装nginx,过程可以参考我的上一篇文章NGINX的编译安装 <br>（5）从解压后的源码包里复制PHP的配置文件 <br>cp /usr/local/src/php-5.5.22/php.ini-production /usr/local/php5/lib/php.ini <br>（6）复制php 与nginx进行通信的进程配置文件 <br>cp /usr/local/php5/etc/php-fpm.conf.default /usr/local/php5/etc//php-fpm.conf <br>（7）启动该进程</p><pre><code>/usr/local/php5/sbin/php-fpm </code></pre><p><img src=\"/uploads/article/20180102/5a4b1dcb415a2.png\" alt=\"\" title=\"\"></p><pre><code>server { \nlisten 80; \nserver_name localhost;\n\n    #charset koi8-r;\n\n     #access_log  logs/host.access.log  main;\n\n      location / {\n          root   html;\n         index  index.php;\n       }\n\n\n      location ~ \\.php$ {\n          root           html;\n          fastcgi_pass   127.0.0.1:9000;\n          fastcgi_index  index.php;\n         fastcgi_param  SCRIPT_FILENAME  /usr/local/nginx/html/$fastcgi_script_name;\n          include        fastcgi_params;\n\n       }\n  }</code></pre><p>（9）修改完nginx的配置文件后，重新启动nginx的进程 <br>/usr/local/nginx/sbin/nginx -s load <br>（10）在网站根目录/usr/local/php5/html/下见一个php的文件index.php <br>在index.php文件内写一个php函数：phpinfo();进行测试 <br>（11）在浏览器进行测试,输入127.0.0.1即可 <br><img src=\"/uploads/article/20180102/5a4b1e3fe7ea2.png\" alt=\"\" title=\"\"></p>', '由于在linux下，php和nginx是两个独立的进程，所以需要需要进行配置才能让PHP和NGINX进行通信\r\n\r\n（1）下载PHP源码包并解压 \r\nphp5.5.22.tar.gz 解压：tar zxvf php5.5.22 \r\n（2）检查PHP安装环境 \r\n ./configure –prefix=/usr/local/php5 –withmysql=mysqlnd –enablemysqln...', 'Linux,Nginx,PHP', '1', '/uploads/article/20180102/5a4b1cc398c6a.png', '1', '1', '290', '2017-09-21 13:44:46', '2018-01-10 16:09:13', null);
INSERT INTO `syf_articles` VALUES ('33', '1', 'Linux下编译安装Nginx', '宋耀锋', '（1）安装依赖包 \r\n```\r\nyum install gcc gcc-c++ gcc-g77 flex bison autoconf automake bzip2-devel zlib-devel ncurses-devel libjpeg-devel libpng-devel libtiff-devel freetype-devel pam-devel openssl-devel libxml2-devel gettext-devel pcre-devel mysql-devel net-snmp-devel curl-devel perl-DBI -y \r\n```\r\n其实主要是pcre这个包 \r\n（2）下载Nginx源码包并解压 \r\n下载：get http://nginx.org/download/nginx-1.12.1.tar.gz \r\n解压：tar zxvf nginx-1.12.1.tar.gz \r\nPS:若为安装wget 可进行yum安装：yum -y install wget 安装的前提是Linux是连接网络的 \r\n（3）检查系统安装环境 \r\n./configure –prefix=/usr/local/nginx（Nginx的安装位置，可自定义） \r\n（4）编译运行 \r\nmake & make install \r\n![](/uploads/article/20180102/5a4b1eff5072f.png)', '<p>（1）安装依赖包</p><pre><code>yum install gcc gcc-c++ gcc-g77 flex bison autoconf automake bzip2-devel zlib-devel ncurses-devel libjpeg-devel libpng-devel libtiff-devel freetype-devel pam-devel openssl-devel libxml2-devel gettext-devel pcre-devel mysql-devel net-snmp-devel curl-devel perl-DBI -y </code></pre><p>其实主要是pcre这个包 <br>（2）下载Nginx源码包并解压 <br>下载：get <a href=\"http://nginx.org/download/nginx-1.12.1.tar.gz\">http://nginx.org/download/nginx-1.12.1.tar.gz</a> <br>解压：tar zxvf nginx-1.12.1.tar.gz <br>PS:若为安装wget 可进行yum安装：yum -y install wget 安装的前提是Linux是连接网络的 <br>（3）检查系统安装环境 <br>./configure –prefix=/usr/local/nginx（Nginx的安装位置，可自定义） <br>（4）编译运行 <br>make & make install <br><img src=\"/uploads/article/20180102/5a4b1eff5072f.png\" alt=\"\" title=\"\"></p>', '（1）安装依赖包 \r\n```\r\nyum install gcc gccc++ gccg77 flex bison autoconf automake bzip2devel zlibdevel ncursesdevel libjpegdevel libpngdevel libtiffdevel freetypedevel pamdevel openssldevel libxml2devel gett...', 'Linux,Nginx', '1', '/uploads/article/20180102/5a4b1eff5072f.png', '1', '1', '233', '2017-09-20 17:43:26', '2018-01-10 17:43:42', null);
INSERT INTO `syf_articles` VALUES ('34', '1', 'Redis设置让sentinel进程在后台运行', '宋耀锋', '![](/uploads/article/20180102/5a4b1f7a916fa.png)\r\n要想让Redis的sentinel（士兵守护）进程在后台自动运行，只要在sentinel配置文件里加上 \r\n*daemonize yes*\r\n\r\n就OK了\r\n\r\n在配置文件里加上这句之后再次启动sentinel进程，画面就是这样的\r\n![](/uploads/article/20180102/5a4b1fa38fc5e.png)\r\n这样Redis的sentinel的进程就可以在后台运行了', '<p><img src=\"/uploads/article/20180102/5a4b1f7a916fa.png\" alt=\"\" title=\"\"><br>要想让Redis的sentinel（士兵守护）进程在后台自动运行，只要在sentinel配置文件里加上 <br><em>daemonize yes</em></p><p>就OK了</p><p>在配置文件里加上这句之后再次启动sentinel进程，画面就是这样的<br><img src=\"/uploads/article/20180102/5a4b1fa38fc5e.png\" alt=\"\" title=\"\"><br>这样Redis的sentinel的进程就可以在后台运行了</p>', '\r\n要想让Redis的sentinel（士兵守护）进程在后台自动运行，只要在sentinel配置文件里加上 \r\ndaemonize yes\r\n\r\n就OK了\r\n\r\n在配置文件里加上这句之后再次启动sentinel进程，画面就是这样的\r\n\r\n这样Redis的sentinel的进程就可以在后台运行了', 'Redis,sentinel', '1', '/uploads/article/20180102/5a4b1f7a916fa.png', '1', '0', '216', '2017-09-18 19:42:51', '2018-01-10 17:30:17', null);
INSERT INTO `syf_articles` VALUES ('35', '1', 'Git的stash命令', '宋耀锋', '......................................\r\n![](/uploads/article/20180102/5a4b20e1ed923.png)\r\n![](/uploads/article/20180102/5a4b2102366e5.png)\r\n![](/uploads/article/20180102/5a4b212bba65c.png)\r\n......................................', '<p>......................................<br><img src=\"/uploads/article/20180102/5a4b20e1ed923.png\" alt=\"\" title=\"\"><br><img src=\"/uploads/article/20180102/5a4b2102366e5.png\" alt=\"\" title=\"\"><br><img src=\"/uploads/article/20180102/5a4b212bba65c.png\" alt=\"\" title=\"\"><br>......................................</p>', '......................................\r\n\r\n\r\n\r\n......................................', 'Git,Stash', '2', '/uploads/article/20180102/5a4b20e1ed923.png', '0', '1', '93', '2017-09-18 11:55:53', '2018-01-10 09:07:32', null);
INSERT INTO `syf_articles` VALUES ('36', '1', 'Redis配置文件详解', '宋耀锋', '==配置文件全解===\r\n\r\n\r\n\r\n\r\n==基本配置\r\ndaemonize no 是否以后台进程启动\r\ndatabases 16 创建database的数量(默认选中的是database 0)\r\n\r\n\r\n\r\n\r\nsave 900 1    #刷新快照到硬盘中，必须满足两者要求才会触发，即900秒之后至少1个关键字发生变化。\r\nsave 300 10  #必须是300秒之后至少10个关键字发生变化。\r\nsave 60 10000 #必须是60秒之后至少10000个关键字发生变化。\r\nstop-writes-on-bgsave-error yes    #后台存储错误停止写。\r\nrdbcompression yes    #使用LZF压缩rdb文件。\r\nrdbchecksum yes    #存储和加载rdb文件时校验。\r\ndbfilename dump.rdb    #设置rdb文件名。\r\ndir ./    #设置工作目录，rdb文件会写入该目录。\r\n\r\n\r\n\r\n\r\n==主从配置\r\nslaveof <masterip> <masterport> 设为某台机器的从服务器\r\nmasterauth <master-password>   连接主服务器的密码\r\nslave-serve-stale-data yes  # 当主从断开或正在复制中,从服务器是否应答\r\nslave-read-only yes #从服务器只读\r\nrepl-ping-slave-period 10 #从ping主的时间间隔,秒为单位\r\nrepl-timeout 60 #主从超时时间(超时认为断线了),要比period大\r\nslave-priority 100    #如果master不能再正常工作，那么会在多个slave中，选择优先值最小的一个slave提升为master，优先值为0表示不能提升为master。\r\n\r\n\r\nrepl-disable-tcp-nodelay no #主端是否合并数据,大块发送给slave\r\nslave-priority 100 从服务器的优先级,当主服挂了,会自动挑slave priority最小的为主服\r\n\r\n\r\n\r\n\r\n===安全\r\nrequirepass foobared # 需要密码\r\nrename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52 #如果公共环境,可以重命名部分敏感命令 如config\r\n\r\n\r\n\r\n\r\n\r\n\r\n===限制\r\nmaxclients 10000 #最大连接数\r\nmaxmemory <bytes> #最大使用内存\r\n\r\n\r\nmaxmemory-policy volatile-lru #内存到极限后的处理\r\nvolatile-lru -> LRU算法删除过期key\r\nallkeys-lru -> LRU算法删除key(不区分过不过期)\r\nvolatile-random -> 随机删除过期key\r\nallkeys-random -> 随机删除key(不区分过不过期)\r\nvolatile-ttl -> 删除快过期的key\r\nnoeviction -> 不删除,返回错误信息\r\n\r\n\r\n#解释 LRU ttl都是近似算法,可以选N个,再比较最适宜T踢出的数据\r\nmaxmemory-samples 3\r\n\r\n\r\n====日志模式\r\nappendonly no #是否仅要日志\r\nappendfsync no # 系统缓冲,统一写,速度快\r\nappendfsync always # 系统不缓冲,直接写,慢,丢失数据少\r\nappendfsync everysec #折衷,每秒写1次\r\n\r\n\r\nno-appendfsync-on-rewrite no #为yes,则其他线程的数据放内存里,合并写入(速度快,容易丢失的多)\r\nauto-AOF-rewrite-percentage 100 当前aof文件是上次重写是大N%时重写\r\nauto-AOF-rewrite-min-size 64mb aof重写至少要达到的大小\r\n\r\n\r\n====慢查询\r\nslowlog-log-slower-than 10000 #记录响应时间大于10000微秒的慢查询\r\nslowlog-max-len 128   # 最多记录128条\r\n\r\n\r\n\r\n\r\n====服务端命令\r\ntime  返回时间戳+微秒\r\ndbsize 返回key的数量\r\nbgrewriteaof 重写aof\r\nbgsave 后台开启子进程dump数据\r\nsave 阻塞进程dump数据\r\nlastsave \r\n\r\n\r\nslaveof host port 做host port的从服务器(数据清空,复制新主内容)\r\nslaveof no one 变成主服务器(原数据不丢失,一般用于主服失败后)\r\n\r\n\r\nflushdb  清空当前数据库的所有数据\r\nflushall 清空所有数据库的所有数据(误用了怎么办?)\r\n\r\n\r\nshutdown [save/nosave] 关闭服务器,保存数据,修改AOF(如果设置)\r\n\r\n\r\nslowlog get 获取慢查询日志\r\nslowlog len 获取慢查询日志条数\r\nslowlog reset 清空慢查询\r\n\r\n\r\n\r\n\r\ninfo []\r\n\r\n\r\nconfig get 选项(支持*通配)\r\nconfig set 选项 值\r\nconfig rewrite 把值写到配置文件\r\nconfig restart 更新info命令的信息\r\n\r\n\r\ndebug object key #调试选项,看一个key的情况\r\ndebug segfault #模拟段错误,让服务器崩溃\r\nobject key (refcount|encoding|idletime)\r\nmonitor #打开控制台,观察命令(调试用)\r\nclient list #列出所有连接\r\nclient kill #杀死某个连接  CLIENT KILL 127.0.0.1:43501\r\nclient getname #获取连接的名称 默认nil\r\nclient setname \"名称\" #设置连接名称,便于调试\r\n\r\n\r\n\r\n\r\n\r\n\r\n====连接命令===\r\nauth 密码 #密码登陆(如果有密码)\r\nping #测试服务器是否可用\r\necho \"some content\" #测试服务器是否正常交互\r\nselect 0/1/2... #选择数据库\r\nquit #退出连接\r\n\r\n\r\n\r\nPS:转载自燕老师的笔记', '<p>==配置文件全解===</p><p>==基本配置<br>daemonize no 是否以后台进程启动<br>databases 16 创建database的数量(默认选中的是database 0)</p><p>save 900 1    #刷新快照到硬盘中，必须满足两者要求才会触发，即900秒之后至少1个关键字发生变化。<br>save 300 10  #必须是300秒之后至少10个关键字发生变化。<br>save 60 10000 #必须是60秒之后至少10000个关键字发生变化。<br>stop-writes-on-bgsave-error yes    #后台存储错误停止写。<br>rdbcompression yes    #使用LZF压缩rdb文件。<br>rdbchecksum yes    #存储和加载rdb文件时校验。<br>dbfilename dump.rdb    #设置rdb文件名。<br>dir ./    #设置工作目录，rdb文件会写入该目录。</p><p>==主从配置<br>slaveof &lt;masterip&gt; &lt;masterport&gt; 设为某台机器的从服务器<br>masterauth &lt;master-password&gt;   连接主服务器的密码<br>slave-serve-stale-data yes  # 当主从断开或正在复制中,从服务器是否应答<br>slave-read-only yes #从服务器只读<br>repl-ping-slave-period 10 #从ping主的时间间隔,秒为单位<br>repl-timeout 60 #主从超时时间(超时认为断线了),要比period大<br>slave-priority 100    #如果master不能再正常工作，那么会在多个slave中，选择优先值最小的一个slave提升为master，优先值为0表示不能提升为master。</p><p>repl-disable-tcp-nodelay no #主端是否合并数据,大块发送给slave<br>slave-priority 100 从服务器的优先级,当主服挂了,会自动挑slave priority最小的为主服</p><p>===安全<br>requirepass foobared # 需要密码<br>rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52 #如果公共环境,可以重命名部分敏感命令 如config</p><p>===限制<br>maxclients 10000 #最大连接数<br>maxmemory &lt;bytes&gt; #最大使用内存</p><p>maxmemory-policy volatile-lru #内存到极限后的处理<br>volatile-lru -&gt; LRU算法删除过期key<br>allkeys-lru -&gt; LRU算法删除key(不区分过不过期)<br>volatile-random -&gt; 随机删除过期key<br>allkeys-random -&gt; 随机删除key(不区分过不过期)<br>volatile-ttl -&gt; 删除快过期的key<br>noeviction -&gt; 不删除,返回错误信息</p><h1>解释 LRU ttl都是近似算法,可以选N个,再比较最适宜T踢出的数据</h1><p>maxmemory-samples 3</p><p>====日志模式<br>appendonly no #是否仅要日志<br>appendfsync no # 系统缓冲,统一写,速度快<br>appendfsync always # 系统不缓冲,直接写,慢,丢失数据少<br>appendfsync everysec #折衷,每秒写1次</p><p>no-appendfsync-on-rewrite no #为yes,则其他线程的数据放内存里,合并写入(速度快,容易丢失的多)<br>auto-AOF-rewrite-percentage 100 当前aof文件是上次重写是大N%时重写<br>auto-AOF-rewrite-min-size 64mb aof重写至少要达到的大小</p><p>====慢查询<br>slowlog-log-slower-than 10000 #记录响应时间大于10000微秒的慢查询<br>slowlog-max-len 128   # 最多记录128条</p><p>====服务端命令<br>time  返回时间戳+微秒<br>dbsize 返回key的数量<br>bgrewriteaof 重写aof<br>bgsave 后台开启子进程dump数据<br>save 阻塞进程dump数据<br>lastsave </p><p>slaveof host port 做host port的从服务器(数据清空,复制新主内容)<br>slaveof no one 变成主服务器(原数据不丢失,一般用于主服失败后)</p><p>flushdb  清空当前数据库的所有数据<br>flushall 清空所有数据库的所有数据(误用了怎么办?)</p><p>shutdown [save/nosave] 关闭服务器,保存数据,修改AOF(如果设置)</p><p>slowlog get 获取慢查询日志<br>slowlog len 获取慢查询日志条数<br>slowlog reset 清空慢查询</p><p>info []</p><p>config get 选项(支持*通配)<br>config set 选项 值<br>config rewrite 把值写到配置文件<br>config restart 更新info命令的信息</p><p>debug object key #调试选项,看一个key的情况<br>debug segfault #模拟段错误,让服务器崩溃<br>object key (refcount|encoding|idletime)<br>monitor #打开控制台,观察命令(调试用)<br>client list #列出所有连接<br>client kill #杀死某个连接  CLIENT KILL 127.0.0.1:43501<br>client getname #获取连接的名称 默认nil<br>client setname \"名称\" #设置连接名称,便于调试</p><p>====连接命令===<br>auth 密码 #密码登陆(如果有密码)<br>ping #测试服务器是否可用<br>echo \"some content\" #测试服务器是否正常交互<br>select 0/1/2... #选择数据库<br>quit #退出连接</p><p>PS:转载自燕老师的笔记</p>', '==配置文件全解===\r\n\r\n\r\n\r\n\r\n==基本配置\r\ndaemonize no 是否以后台进程启动\r\ndatabases 16 创建database的数量(默认选中的是database 0)\r\n\r\n\r\n\r\n\r\nsave 900 1    刷新快照到硬盘中，必须满足两者要求才会触发，即900秒之后至少1个关键字发生变化。\r\nsave 300 10  必须是300秒之后至少10个关键字发生变化。\r...', 'Redis', '2', 'uploads/article/default.jpg', '1', '1', '96', '2017-09-15 13:55:37', '2018-01-10 15:15:39', null);
INSERT INTO `syf_articles` VALUES ('37', '5', 'Redis持久化操作', '宋耀锋', 'Redis持久化配置\r\n\r\nRedis的持久化有2种方式 1快照 2是日志\r\n\r\nRdb快照的配置选项\r\n\r\nsave 900 1 // 900内,有1条写入,则产生快照 \r\nsave 300 1000 // 如果300秒内有1000次写入,则产生快照 \r\nsave 60 10000 // 如果60秒内有10000次写入,则产生快照 \r\n(这3个选项都屏蔽,则rdb禁用)\r\n\r\nstop-writes-on-bgsave-error yes // 后台备份进程出错时,主进程停不停止写入? \r\nrdbcompression yes // 导出的rdb文件是否压缩 \r\nRdbchecksum yes // 导入rbd恢复时数据时,要不要检验rdb的完整性 \r\ndbfilename dump.rdb //导出来的rdb文件名 \r\ndir ./ //rdb的放置路径\r\n\r\nAof 的配置 \r\nappendonly no # 是否打开 aof日志功能\r\n\r\nappendfsync always # 每1个命令,都立即同步到aof. 安全,速度慢 \r\nappendfsync everysec # 折衷方案,每秒写1次 \r\nappendfsync no # 写入工作交给操作系统,由操作系统判断缓冲区大小,统一写入到aof. 同步频率低,速度快,\r\n\r\nno-appendfsync-on-rewrite yes: # 正在导出rdb快照的过程中,要不要停止同步aof \r\nauto-aof-rewrite-percentage 100 #aof文件大小比起上次重写时的大小,增长率100%时,重写 \r\nauto-aof-rewrite-min-size 64mb #aof文件,至少超过64M时,重写\r\n\r\n注: 在dump rdb过程中,aof如果停止同步,会不会丢失? \r\n答: 不会,所有的操作缓存在内存的队列里, dump完成后,统一操作.\r\n\r\n注: aof重写是指什么? \r\n答: aof重写是指把内存中的数据,逆化成命令,写入到.aof日志里. \r\n以解决 aof日志过大的问题.\r\n\r\n问: 如果rdb文件,和aof文件都存在,优先用谁来恢复数据? \r\n答: aof\r\n\r\n问: 2种是否可以同时用? \r\n答: 可以,而且推荐这么做\r\n\r\n问: 恢复时rdb和aof哪个恢复的快 \r\n答: rdb快,因为其是数据的内存映射,直接载入到内存,而aof是命令,需要逐条执行\r\n\r\nPS：转载自燕老师的笔记', '<p>Redis持久化配置</p><p>Redis的持久化有2种方式 1快照 2是日志</p><p>Rdb快照的配置选项</p><p>save 900 1 // 900内,有1条写入,则产生快照 <br>save 300 1000 // 如果300秒内有1000次写入,则产生快照 <br>save 60 10000 // 如果60秒内有10000次写入,则产生快照 <br>(这3个选项都屏蔽,则rdb禁用)</p><p>stop-writes-on-bgsave-error yes // 后台备份进程出错时,主进程停不停止写入? <br>rdbcompression yes // 导出的rdb文件是否压缩 <br>Rdbchecksum yes // 导入rbd恢复时数据时,要不要检验rdb的完整性 <br>dbfilename dump.rdb //导出来的rdb文件名 <br>dir ./ //rdb的放置路径</p><p>Aof 的配置 <br>appendonly no # 是否打开 aof日志功能</p><p>appendfsync always # 每1个命令,都立即同步到aof. 安全,速度慢 <br>appendfsync everysec # 折衷方案,每秒写1次 <br>appendfsync no # 写入工作交给操作系统,由操作系统判断缓冲区大小,统一写入到aof. 同步频率低,速度快,</p><p>no-appendfsync-on-rewrite yes: # 正在导出rdb快照的过程中,要不要停止同步aof <br>auto-aof-rewrite-percentage 100 #aof文件大小比起上次重写时的大小,增长率100%时,重写 <br>auto-aof-rewrite-min-size 64mb #aof文件,至少超过64M时,重写</p><p>注: 在dump rdb过程中,aof如果停止同步,会不会丢失? <br>答: 不会,所有的操作缓存在内存的队列里, dump完成后,统一操作.</p><p>注: aof重写是指什么? <br>答: aof重写是指把内存中的数据,逆化成命令,写入到.aof日志里. <br>以解决 aof日志过大的问题.</p><p>问: 如果rdb文件,和aof文件都存在,优先用谁来恢复数据? <br>答: aof</p><p>问: 2种是否可以同时用? <br>答: 可以,而且推荐这么做</p><p>问: 恢复时rdb和aof哪个恢复的快 <br>答: rdb快,因为其是数据的内存映射,直接载入到内存,而aof是命令,需要逐条执行</p><p>PS：转载自燕老师的笔记</p>', 'Redis持久化配置\r\n\r\nRedis的持久化有2种方式 1快照 2是日志\r\n\r\nRdb快照的配置选项\r\n\r\nsave 900 1 // 900内,有1条写入,则产生快照 \r\nsave 300 1000 // 如果300秒内有1000次写入,则产生快照 \r\nsave 60 10000 // 如果60秒内有10000次写入,则产生快照 \r\n(这3个选项都屏蔽,则rdb禁用)\r\n\r\nstopwrite...', 'Redis', '2', 'uploads/article/default.jpg', '0', '0', '129', '2017-09-15 13:49:42', '2018-01-02 17:06:37', null);
INSERT INTO `syf_articles` VALUES ('38', '4', '一些git操作的常用命令', '宋耀锋', '1.clone远程仓库文件：git clone \r\n2.获取远程最新文件：git fetch \r\n3.获取本地变化的文件：git stash \r\n4.切换分支：git checkout 分支名 \r\n5.提交文件到远程仓库：git commit -m “备注信息” \r\n6.添加文件到缓冲区,准备提交到远成仓库：git add 文件名 \r\n7.把本地的文件推送到服务器上：git push \r\n8.拉取远程文件更新到本地：git pull(拉取)：git match and git merge \r\n9.创建标签，用于分享：git tag -a v0 -m “备注信息” \r\n10.推送tags到远程仓库中：git push –tags \r\n11.新建一个分支,但依然停留在当前分支：git branch mybranch \r\n12.切换到一个新的分支，并更新到工作区：git checkout mybranch \r\n13.将新分支推送到GitHub上：git push origin mybranch \r\n14.删除本地分支：git branch -d [branch] \r\n15.删除远程分支：git push –delete origin [branch] \r\n16.推送一个空的分支到服务器上,如果服务器上已经有同名的分支，则会替代：git push origin :mybranch \r\n17.查看文件在缓冲区的状态：git status -s \r\n18.列出所有分支：git branch \r\n19.列出所有远程分支：git branch -r \r\n20.列出所有远程分支和本地分支：git branch -a \r\n21.切换到上一个分支：git checkout - \r\n22.合并指定分支到当前分支：git merge [branch] \r\n21.显示当前分支的版本历史：git log \r\n22.显示commit提交的历史，以及每次变更的文件：git log –stat \r\n23.显示所有提交过的用户, 按提交次数排序：git shortlog -sn \r\n24.显示一个文件被何人修改过，以及修改的shijain \r\n25.显示所有远程仓库：git remote -v \r\n26.回复暂存区的所有文件到工作区：git checkout . \r\n27.撤销add: \r\n（1）git reset -q \r\n（2）git reset –mixed \r\n两种方法都可以\r\n\r\nPS：分享一个sublime 3143 最新版的注册码 \r\n—– BEGIN LICENSE —– \r\nTwitterInc \r\n200 User License \r\nEA7E-890007 \r\n1D77F72E 390CDD93 4DCBA022 FAF60790 \r\n61AA12C0 A37081C5 D0316412 4584D136 \r\n94D7F7D4 95BC8C1C 527DA828 560BB037 \r\nD1EDDD8C AE7B379F 50C9D69D B35179EF \r\n2FE898C4 8E4277A8 555CE714 E1FB0E43 \r\nD5D52613 C3D12E98 BC49967F 7652EED2 \r\n9D2D2E61 67610860 6D338B72 5CF95C69 \r\nE36B85CC 84991F19 7575D828 470A92AB \r\n—— END LICENSE ——', '<p>1.clone远程仓库文件：git clone <br>2.获取远程最新文件：git fetch <br>3.获取本地变化的文件：git stash <br>4.切换分支：git checkout 分支名 <br>5.提交文件到远程仓库：git commit -m “备注信息” <br>6.添加文件到缓冲区,准备提交到远成仓库：git add 文件名 <br>7.把本地的文件推送到服务器上：git push <br>8.拉取远程文件更新到本地：git pull(拉取)：git match and git merge <br>9.创建标签，用于分享：git tag -a v0 -m “备注信息” <br>10.推送tags到远程仓库中：git push –tags <br>11.新建一个分支,但依然停留在当前分支：git branch mybranch <br>12.切换到一个新的分支，并更新到工作区：git checkout mybranch <br>13.将新分支推送到GitHub上：git push origin mybranch <br>14.删除本地分支：git branch -d [branch] <br>15.删除远程分支：git push –delete origin [branch] <br>16.推送一个空的分支到服务器上,如果服务器上已经有同名的分支，则会替代：git push origin :mybranch <br>17.查看文件在缓冲区的状态：git status -s <br>18.列出所有分支：git branch <br>19.列出所有远程分支：git branch -r <br>20.列出所有远程分支和本地分支：git branch -a <br>21.切换到上一个分支：git checkout - <br>22.合并指定分支到当前分支：git merge [branch] <br>21.显示当前分支的版本历史：git log <br>22.显示commit提交的历史，以及每次变更的文件：git log –stat <br>23.显示所有提交过的用户, 按提交次数排序：git shortlog -sn <br>24.显示一个文件被何人修改过，以及修改的shijain <br>25.显示所有远程仓库：git remote -v <br>26.回复暂存区的所有文件到工作区：git checkout . <br>27.撤销add: <br>（1）git reset -q <br>（2）git reset –mixed <br>两种方法都可以</p><p>PS：分享一个sublime 3143 最新版的注册码 <br>—– BEGIN LICENSE —– <br>TwitterInc <br>200 User License <br>EA7E-890007 <br>1D77F72E 390CDD93 4DCBA022 FAF60790 <br>61AA12C0 A37081C5 D0316412 4584D136 <br>94D7F7D4 95BC8C1C 527DA828 560BB037 <br>D1EDDD8C AE7B379F 50C9D69D B35179EF <br>2FE898C4 8E4277A8 555CE714 E1FB0E43 <br>D5D52613 C3D12E98 BC49967F 7652EED2 <br>9D2D2E61 67610860 6D338B72 5CF95C69 <br>E36B85CC 84991F19 7575D828 470A92AB <br>—— END LICENSE ——</p>', '1.clone远程仓库文件：git clone \r\n2.获取远程最新文件：git fetch \r\n3.获取本地变化的文件：git stash \r\n4.切换分支：git checkout 分支名 \r\n5.提交文件到远程仓库：git commit m “备注信息” \r\n6.添加文件到缓冲区,准备提交到远成仓库：git add 文件名 \r\n7.把本地的文件推送到服务器上：git push \r\n8.拉取远...', 'Git', '1', 'uploads/article/default.jpg', '1', '1', '209', '2017-09-14 20:46:41', '2018-01-11 19:35:22', null);
INSERT INTO `syf_articles` VALUES ('39', '1', 'xunsearch(迅搜中文全文搜索引擎)的简单使用', '宋耀锋', 'Xunsearch （中文名：迅搜）是一套免费开源的专业中文全文检索解决方案，简单易用而且 功能强大、性能卓越能轻松处理海量数据的全文检索。它包含后端索引、搜索服务程序和前端 脚本语言编写的开发工具包(称之为 SDK) ，目前迅搜只支持PHP，而且还是国产（支持国产），类似的搜索引擎还有sphinx,elasticsearch等，下面是迅搜的简单使用\r\n1.服务器端\r\n（1）下载.源码包 \r\n在Linux下直接：wget http://www.xunsearch.com/download/xunsearch-full-latest.tar.bz2 \r\n（2）解压源码包 \r\ntar -jxvf xunsearch-full-latest.tar.bz2 \r\n![](/uploads/article/20180102/5a4b2e1aa8792.png)\r\nPS:我把源码包下载到了/usr/local/xunsearch/目录下了 \r\n（3）安装迅搜服务 \r\ncd /usr/local/xunsearch/xunsearch-full-1.4.10 \r\nsh setup.sh \r\n![](/uploads/article/20180102/5a4b3183613a2.png)\r\n安装过程中会有安装目录设置，可自定义，我的安装位置：/usr/local/xunsou/ \r\n安装完成后的目录文件： \r\n![](/uploads/article/20180102/5a4b3342687f1.png)\r\n（4）编辑配置文件（位置：/usr/local/xunsou/sdk/php/app） \r\n![](/uploads/article/20180102/5a4b33628ed9e.png)\r\n```\r\nroject.name = banksearch\r\nproject.default_charset = utf-8\r\nserver.index = 8383\r\nserver.search = 8384\r\n\r\n[pid]\r\ntype = id\r\n\r\n[bankname]\r\ntype = title\r\ntokenizer = xstep(1)\r\nindex = both\r\n```\r\n详细配置可参考：http://www.xunsearch.com/doc/php/guide/ini.guide \r\n（5）启动迅搜服务 \r\n/usr/local/xunsou/bin/xs-ctl.sh -s both start[PS:第一次启动用start，再次启动用restart] \r\n![](/uploads/article/20180102/5a4b339f9c917.png)\r\n（6）为迅搜搜索引擎建立索引，即将mysql数据表中的数据导入到迅搜的索引中 \r\n```\r\n/usr/local/xunsou/sdk/php/util/Indexer.php –rebuild –source=mysql://root:@localhost/cfkqc/b2b_pingan_bank_info –sql=”SELECT id as pid,bankname FROM b2b_pingan_bank_info” –project=banksearch \r\n```\r\n![](/uploads/article/20180102/5a4b33de390b3.png)\r\n我这里导入的数据有13万条多，所以如果数据量特别多建立索引还是需要一定时间的 \r\n相关参数可以使用命令/usr/local/xunsou/sdk/php/util/Indexer.php -h查看 \r\n（7）查看服务信息 \r\nutil/Indexer.php –info -p banksearch \r\n（8）搜索测试（激动人心的时刻）./util/Quest.php banksearch 支行\r\n![](/uploads/article/20180102/5a4b3405637a8.png)\r\n（9）到此，搜索结束，迅搜其实还是很好用的，支持国产', '<p>Xunsearch （中文名：迅搜）是一套免费开源的专业中文全文检索解决方案，简单易用而且 功能强大、性能卓越能轻松处理海量数据的全文检索。它包含后端索引、搜索服务程序和前端 脚本语言编写的开发工具包(称之为 SDK) ，目前迅搜只支持PHP，而且还是国产（支持国产），类似的搜索引擎还有sphinx,elasticsearch等，下面是迅搜的简单使用<br>1.服务器端<br>（1）下载.源码包 <br>在Linux下直接：wget <a href=\"http://www.xunsearch.com/download/xunsearch-full-latest.tar.bz2\">http://www.xunsearch.com/download/xunsearch-full-latest.tar.bz2</a> <br>（2）解压源码包 <br>tar -jxvf xunsearch-full-latest.tar.bz2 <br><img src=\"/uploads/article/20180102/5a4b2e1aa8792.png\" alt=\"\" title=\"\"><br>PS:我把源码包下载到了/usr/local/xunsearch/目录下了 <br>（3）安装迅搜服务 <br>cd /usr/local/xunsearch/xunsearch-full-1.4.10 <br>sh setup.sh <br><img src=\"/uploads/article/20180102/5a4b3183613a2.png\" alt=\"\" title=\"\"><br>安装过程中会有安装目录设置，可自定义，我的安装位置：/usr/local/xunsou/ <br>安装完成后的目录文件： <br><img src=\"/uploads/article/20180102/5a4b3342687f1.png\" alt=\"\" title=\"\"><br>（4）编辑配置文件（位置：/usr/local/xunsou/sdk/php/app） <br><img src=\"/uploads/article/20180102/5a4b33628ed9e.png\" alt=\"\" title=\"\"></p><pre><code>roject.name = banksearch\nproject.default_charset = utf-8\nserver.index = 8383\nserver.search = 8384\n\n[pid]\ntype = id\n\n[bankname]\ntype = title\ntokenizer = xstep(1)\nindex = both</code></pre><p>详细配置可参考：<a href=\"http://www.xunsearch.com/doc/php/guide/ini.guide\">http://www.xunsearch.com/doc/php/guide/ini.guide</a> <br>（5）启动迅搜服务 <br>/usr/local/xunsou/bin/xs-ctl.sh -s both start[PS:第一次启动用start，再次启动用restart] <br><img src=\"/uploads/article/20180102/5a4b339f9c917.png\" alt=\"\" title=\"\"><br>（6）为迅搜搜索引擎建立索引，即将mysql数据表中的数据导入到迅搜的索引中</p><pre><code>/usr/local/xunsou/sdk/php/util/Indexer.php –rebuild –source=mysql://root:@localhost/cfkqc/b2b_pingan_bank_info –sql=”SELECT id as pid,bankname FROM b2b_pingan_bank_info” –project=banksearch </code></pre><p><img src=\"/uploads/article/20180102/5a4b33de390b3.png\" alt=\"\" title=\"\"><br>我这里导入的数据有13万条多，所以如果数据量特别多建立索引还是需要一定时间的 <br>相关参数可以使用命令/usr/local/xunsou/sdk/php/util/Indexer.php -h查看 <br>（7）查看服务信息 <br>util/Indexer.php –info -p banksearch <br>（8）搜索测试（激动人心的时刻）./util/Quest.php banksearch 支行<br><img src=\"/uploads/article/20180102/5a4b3405637a8.png\" alt=\"\" title=\"\"><br>（9）到此，搜索结束，迅搜其实还是很好用的，支持国产</p>', 'Xunsearch （中文名：迅搜）是一套免费开源的专业中文全文检索解决方案，简单易用而且 功能强大、性能卓越能轻松处理海量数据的全文检索。它包含后端索引、搜索服务程序和前端 脚本语言编写的开发工具包(称之为 SDK) ，目前迅搜只支持PHP，而且还是国产（支持国产），类似的搜索引擎还有sphinx,elasticsearch等，下面是迅搜的简单使用\r\n1.服务器端\r\n（1）下载.源码包 \r\n在L...', 'Xunsou', '1', '/uploads/article/20180102/5a4b2e1aa8792.png', '1', '1', '200', '2017-09-14 17:08:57', '2018-01-10 16:31:15', null);
INSERT INTO `syf_articles` VALUES ('40', '3', 'Redis之集合命令', '宋耀锋', '```\r\nhttp://download.redis.io/releases/redis-4.0.1.tar.gz\r\n127.0.0.1:6379> flushdb(清空数据库)\r\nOK\r\n127.0.0.1:6379> sadd set1 a b c d f(添加一个集合)\r\n(integer) 5\r\n127.0.0.1:6379> scard set1（计算一个集合中的元素个数）\r\n(integer) 5\r\n127.0.0.1:6379> srem set1\r\n(error) ERR wrong number of arguments for \'srem\' command\r\n127.0.0.1:6379> srem set1 a（移除集合中的一个元素）\r\n(integer) 1\r\n127.0.0.1:6379> scard set1（统计集合中的元素个数）\r\n(integer) 4\r\n127.0.0.1:6379> spop set1 b\r\n(error) ERR value is not an integer or out of range\r\n127.0.0.1:6379> spop set1 （弹出集合中的一个元素，并返回弹出的该元素）\r\n\"b\"\r\n127.0.0.1:6379> scard set1\r\n(integer) 3\r\n127.0.0.1:6379> srandmember set1 2 （列出集合中的元素）\r\n1) \"d\"\r\n2) \"c\"\r\n127.0.0.1:6379> \r\n127.0.0.1:6379> srandmember set1 2（随机列出集合中的元素，元素个数可以控制）\r\n1) \"f\"\r\n2) \"d\"\r\n127.0.0.1:6379> srandmember set1 2\r\n1) \"f\"\r\n2) \"d\"\r\n127.0.0.1:6379> srandmember set1 2\r\n1) \"f\"\r\n2) \"c\"\r\n127.0.0.1:6379> srandmember set1 2\r\n1) \"f\"\r\n2) \"d\"\r\n127.0.0.1:6379> srandmember set1 2\r\n1) \"d\"\r\n2) \"c\"\r\n127.0.0.1:6379> sismember set1 c（判断某个元素是否在该集合中）\r\n(integer) 1\r\n127.0.0.1:6379> sismember set1 u\r\n(integer) 0\r\n127.0.0.1:6379> smembers set1（列出集合中所有元素）\r\n1) \"f\"\r\n2) \"c\"\r\n3) \"d\"\r\n127.0.0.1:6379> scard set1（统计集合众多元素个数）\r\n(integer) 3\r\n127.0.0.1:6379> sadd set2 1 2\r\n(integer) 2\r\n127.0.0.1:6379> smove set1 set2 c（移除集合中的一个元素，并把该元素添加到另一个元素中）\r\n(integer) 1\r\n127.0.0.1:6379> smembers set2\r\n1) \"c\"\r\n2) \"2\"\r\n3) \"1\"\r\n127.0.0.1:6379> add set1 c\r\n(error) ERR unknown command \'add\'\r\n127.0.0.1:6379> sadd set1 c\r\n(integer) 1\r\n127.0.0.1:6379> sinter set1 set2（集合的交集）\r\n1) \"c\"\r\n127.0.0.1:6379> sinterstore set3 set1 set2（集合的交集并存到另一个集合中）\r\n(integer) 1\r\n127.0.0.1:6379> smembers set3\r\n1) \"c\"\r\n127.0.0.1:6379> sunion set1 set2 （两个集合中的并集）\r\n1) \"f\"\r\n2) \"2\"\r\n3) \"d\"\r\n4) \"c\"\r\n5) \"1\"\r\n127.0.0.1:6379> sdiff set1 set2 （两个集合的差集）\r\n1) \"f\"\r\n2) \"d\"\r\n127.0.0.1:6379> \r\n127.0.0.1:6379> \r\n```', '<pre><code>http://download.redis.io/releases/redis-4.0.1.tar.gz\n127.0.0.1:6379&gt; flushdb(清空数据库)\nOK\n127.0.0.1:6379&gt; sadd set1 a b c d f(添加一个集合)\n(integer) 5\n127.0.0.1:6379&gt; scard set1（计算一个集合中的元素个数）\n(integer) 5\n127.0.0.1:6379&gt; srem set1\n(error) ERR wrong number of arguments for \'srem\' command\n127.0.0.1:6379&gt; srem set1 a（移除集合中的一个元素）\n(integer) 1\n127.0.0.1:6379&gt; scard set1（统计集合中的元素个数）\n(integer) 4\n127.0.0.1:6379&gt; spop set1 b\n(error) ERR value is not an integer or out of range\n127.0.0.1:6379&gt; spop set1 （弹出集合中的一个元素，并返回弹出的该元素）\n&quot;b&quot;\n127.0.0.1:6379&gt; scard set1\n(integer) 3\n127.0.0.1:6379&gt; srandmember set1 2 （列出集合中的元素）\n1) &quot;d&quot;\n2) &quot;c&quot;\n127.0.0.1:6379&gt; \n127.0.0.1:6379&gt; srandmember set1 2（随机列出集合中的元素，元素个数可以控制）\n1) &quot;f&quot;\n2) &quot;d&quot;\n127.0.0.1:6379&gt; srandmember set1 2\n1) &quot;f&quot;\n2) &quot;d&quot;\n127.0.0.1:6379&gt; srandmember set1 2\n1) &quot;f&quot;\n2) &quot;c&quot;\n127.0.0.1:6379&gt; srandmember set1 2\n1) &quot;f&quot;\n2) &quot;d&quot;\n127.0.0.1:6379&gt; srandmember set1 2\n1) &quot;d&quot;\n2) &quot;c&quot;\n127.0.0.1:6379&gt; sismember set1 c（判断某个元素是否在该集合中）\n(integer) 1\n127.0.0.1:6379&gt; sismember set1 u\n(integer) 0\n127.0.0.1:6379&gt; smembers set1（列出集合中所有元素）\n1) &quot;f&quot;\n2) &quot;c&quot;\n3) &quot;d&quot;\n127.0.0.1:6379&gt; scard set1（统计集合众多元素个数）\n(integer) 3\n127.0.0.1:6379&gt; sadd set2 1 2\n(integer) 2\n127.0.0.1:6379&gt; smove set1 set2 c（移除集合中的一个元素，并把该元素添加到另一个元素中）\n(integer) 1\n127.0.0.1:6379&gt; smembers set2\n1) &quot;c&quot;\n2) &quot;2&quot;\n3) &quot;1&quot;\n127.0.0.1:6379&gt; add set1 c\n(error) ERR unknown command \'add\'\n127.0.0.1:6379&gt; sadd set1 c\n(integer) 1\n127.0.0.1:6379&gt; sinter set1 set2（集合的交集）\n1) &quot;c&quot;\n127.0.0.1:6379&gt; sinterstore set3 set1 set2（集合的交集并存到另一个集合中）\n(integer) 1\n127.0.0.1:6379&gt; smembers set3\n1) &quot;c&quot;\n127.0.0.1:6379&gt; sunion set1 set2 （两个集合中的并集）\n1) &quot;f&quot;\n2) &quot;2&quot;\n3) &quot;d&quot;\n4) &quot;c&quot;\n5) &quot;1&quot;\n127.0.0.1:6379&gt; sdiff set1 set2 （两个集合的差集）\n1) &quot;f&quot;\n2) &quot;d&quot;\n127.0.0.1:6379&gt; \n127.0.0.1:6379&gt; </code></pre>', '```\r\nhttp://download.redis.io/releases/redis4.0.1.tar.gz\r\n127.0.0.1:6379 flushdb(清空数据库)\r\nOK\r\n127.0.0.1:6379 sadd set1 a b c d f(添加一个集合)\r\n(integer) 5\r\n127.0.0.1:6379 scard set1（计算一个集合中的元素个数）\r\n(integer)...', 'Redis', '1', 'uploads/article/default.jpg', '1', '0', '73', '2017-09-13 13:35:59', '2018-01-11 09:49:32', null);
INSERT INTO `syf_articles` VALUES ('41', '1', 'tp5上传图片并生成缩略图', '宋耀锋', '```php\r\n<?php\r\nnamespace app\\common\\controller;\r\nuse app\\common\\model\\Goods;\r\nclass Tools\r\n{\r\n\r\n    public static function upload_goods_img($whereName=\"\", $width=\"\", $height=\"\")\r\n    {\r\n        // 打开图片的相对路径\r\n        $imgpath = config(\'img_path\');\r\n        // 绝对路径\r\n        $imgRootPath = config(\'imgRootPath\');\r\n        $storeId = \'自定义\';\r\n        $merchantId = \'自定义\';\r\n        $old_filename = $storeId . $merchantId . time();\r\n        $filename = $storeId . $merchantId . time() . mt_rand(1000, 9999);\r\n        $type = Goods::upload($whereName, $old_filename);\r\n        if($type) \r\n        {\r\n            $savepath = $imgRootPath . \'/\' . $whereName . \'/\' . $filename . \'.\' . $type;\r\n            $thumbfile = $filename . \'.\' . $type;\r\n            $thumbName = $imgpath  . \'/\' . $whereName . \'/\' . $thumbfile;\r\n            $image = \\think\\Image::open($imgpath . \'/\'. $whereName .\'/\' . $old_filename . \'.\' . $type);\r\n            $image->thumb($width, $height, \\think\\Image::THUMB_FIXED)->save($thumbName);\r\n\r\n            $data = [\r\n                \'access_url\' => $imgRootPath . \'/\' . $whereName . \'/\' . $filename . \'.\' . $type,\r\n                \'filename\' => $thumbfile,\r\n            ];\r\n\r\n            return $data;\r\n        }\r\n    }    \r\n}\r\n```', '<pre><code class=\"lang-php\">&lt;?php\nnamespace app\\common\\controller;\nuse app\\common\\model\\Goods;\nclass Tools\n{\n\n    public static function upload_goods_img($whereName=&quot;&quot;, $width=&quot;&quot;, $height=&quot;&quot;)\n    {\n        // 打开图片的相对路径\n        $imgpath = config(\'img_path\');\n        // 绝对路径\n        $imgRootPath = config(\'imgRootPath\');\n        $storeId = \'自定义\';\n        $merchantId = \'自定义\';\n        $old_filename = $storeId . $merchantId . time();\n        $filename = $storeId . $merchantId . time() . mt_rand(1000, 9999);\n        $type = Goods::upload($whereName, $old_filename);\n        if($type) \n        {\n            $savepath = $imgRootPath . \'/\' . $whereName . \'/\' . $filename . \'.\' . $type;\n            $thumbfile = $filename . \'.\' . $type;\n            $thumbName = $imgpath  . \'/\' . $whereName . \'/\' . $thumbfile;\n            $image = \\think\\Image::open($imgpath . \'/\'. $whereName .\'/\' . $old_filename . \'.\' . $type);\n            $image-&gt;thumb($width, $height, \\think\\Image::THUMB_FIXED)-&gt;save($thumbName);\n\n            $data = [\n                \'access_url\' =&gt; $imgRootPath . \'/\' . $whereName . \'/\' . $filename . \'.\' . $type,\n                \'filename\' =&gt; $thumbfile,\n            ];\n\n            return $data;\n        }\n    }    \n}</code></pre>', '```php\r\n<?php\r\nnamespace app\\common\\controller;\r\nuse app\\common\\model\\Goods;\r\nclass Tools\r\n{\r\n\r\n    public static function upload_goods_img($whereName=\"\", $width=\"\", $height=\"\")\r\n    {\r\n        // 打开图...', 'ThinkPHP5', '1', 'uploads/article/default.jpg', '1', '1', '384', '2017-09-11 19:12:16', '2018-01-10 17:30:44', null);
INSERT INTO `syf_articles` VALUES ('42', '1', 'PHP面向对象之简单工厂模式', '宋耀锋', '简单工厂模式把创建对象的过程进行了封装，体现了PHP的面向对象，隔离封装的特点，这样就使客户端无论怎么调用，他都是只知道接口，但是并不清楚后端接口内部程序的具体实现，省去了客户端创建对象的过程，使分工更加明确，统一接口不同类型的产品，正因为这样，可能不利于以后的维护，举个栗子：\r\n```php\r\n<?php\r\n\r\ninterface DB\r\n{\r\n    function conn();\r\n}\r\n\r\n\r\nclass MySql implements DB\r\n{\r\n    public function conn()\r\n    {\r\n        echo \'mysql数据库连接了\';\r\n    }\r\n}\r\n\r\n\r\nclass SQLServer implements DB\r\n{\r\n    public function conn()\r\n    {\r\n        echo \'SqlServer已经连接了\';\r\n    }\r\n}\r\n\r\n\r\n// 简单工厂模式\r\nclass Factory \r\n{\r\n    public static function createDB($sqlType)\r\n    {\r\n        if($sqlType == \'mysql\')\r\n        {\r\n            return new MySql();\r\n        }elseif($sqlType == \'SQLServer\')\r\n        {\r\n            return new SQLServer();\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n}\r\n$sqlServer = Factory::createDB(\'SQLServer\');\r\n$sqlServer->conn();\r\n```', '<p>简单工厂模式把创建对象的过程进行了封装，体现了PHP的面向对象，隔离封装的特点，这样就使客户端无论怎么调用，他都是只知道接口，但是并不清楚后端接口内部程序的具体实现，省去了客户端创建对象的过程，使分工更加明确，统一接口不同类型的产品，正因为这样，可能不利于以后的维护，举个栗子：</p><pre><code class=\"lang-php\">&lt;?php\n\ninterface DB\n{\n    function conn();\n}\n\n\nclass MySql implements DB\n{\n    public function conn()\n    {\n        echo \'mysql数据库连接了\';\n    }\n}\n\n\nclass SQLServer implements DB\n{\n    public function conn()\n    {\n        echo \'SqlServer已经连接了\';\n    }\n}\n\n\n// 简单工厂模式\nclass Factory \n{\n    public static function createDB($sqlType)\n    {\n        if($sqlType == \'mysql\')\n        {\n            return new MySql();\n        }elseif($sqlType == \'SQLServer\')\n        {\n            return new SQLServer();\n        }else{\n            return null;\n        }\n    }\n}\n$sqlServer = Factory::createDB(\'SQLServer\');\n$sqlServer-&gt;conn();</code></pre>', '简单工厂模式把创建对象的过程进行了封装，体现了PHP的面向对象，隔离封装的特点，这样就使客户端无论怎么调用，他都是只知道接口，但是并不清楚后端接口内部程序的具体实现，省去了客户端创建对象的过程，使分工更加明确，统一接口不同类型的产品，正因为这样，可能不利于以后的维护，举个栗子：\r\n```php\r\n<?php\r\n\r\ninterface DB\r\n{\r\n    function conn();\r\n}\r\n...', '设计模式,Design Pattern', '1', 'uploads/article/default.jpg', '0', '0', '109', '2017-09-11 10:09:16', '2017-09-11 10:09:16', null);
INSERT INTO `syf_articles` VALUES ('43', '1', 'PHP面向对象多态', '宋耀锋', 'PHP在面型对象中，多态：在面向对象中,指某种对象实例的不同表现形态，一个类中的各个子类\r\n举个栗子：\r\n```php\r\n<?php\r\nabstract class Person\r\n{\r\n	public abstract function run();\r\n}\r\n\r\nclass FatMan extends Person\r\n{\r\n	public function run()\r\n	{\r\n		echo \'旁人跑步很慢，容易出汗\';\r\n	}\r\n}\r\nclass SlimMan extends Person\r\n{\r\n	public function run()\r\n	{\r\n		echo \'瘦人跑步比较快\';\r\n	}\r\n}\r\n\r\n\r\n\r\nclass Start\r\n{\r\n	public static function go(Person $man)\r\n	{\r\n		$man->run();\r\n	}\r\n}\r\n\r\n\r\nStart::go(new SlimMan());\r\n```', '<p>PHP在面型对象中，多态：在面向对象中,指某种对象实例的不同表现形态，一个类中的各个子类<br>举个栗子：</p><pre><code class=\"lang-php\">&lt;?php\nabstract class Person\n{\n    public abstract function run();\n}\n\nclass FatMan extends Person\n{\n    public function run()\n    {\n        echo \'旁人跑步很慢，容易出汗\';\n    }\n}\nclass SlimMan extends Person\n{\n    public function run()\n    {\n        echo \'瘦人跑步比较快\';\n    }\n}\n\n\n\nclass Start\n{\n    public static function go(Person $man)\n    {\n        $man-&gt;run();\n    }\n}\n\n\nStart::go(new SlimMan());</code></pre>', 'PHP在面型对象中，多态：在面向对象中,指某种对象实例的不同表现形态，一个类中的各个子类\r\n举个栗子：\r\n```php\r\n<?php\r\nabstract class Person\r\n{\r\n	public abstract function run();\r\n}\r\n\r\nclass FatMan extends Person\r\n{\r\n	public function run()\r\n	{\r\n		echo ...', '设计模式,Design Pattern', '1', 'uploads/article/default.jpg', '0', '0', '87', '2017-09-08 13:36:13', '2017-09-08 13:36:13', null);
INSERT INTO `syf_articles` VALUES ('44', '1', 'laravel使用ElasticSearch进行搜索', '宋耀锋', '1.安装elasticsearch和ik插件\r\n①elasticsearch集成包（包括ik中文插件）安装地址：https://github.com/medcl/elasticsearch-rtf\r\n②测试安装\r\n启动elasticSearch：bin/elasticSearch -d\r\n③测试是否安装成功\r\n127.0.0.1:9200\r\n\r\n\r\n2.ElasticSearch的laravel scout 包的安装\r\n（1）①安装laravel/scout\r\ncomposer require laravel/scout\r\n②将 ScoutServiceProvider 添加到你的配置文件 config/app.php 的 providers 数组中：\r\n\r\nLaravel\\Scout\\ScoutServiceProvider::class,\r\n\r\n③注册好 Scout 的服务提供器之后，你还需使用Artisan 命令 vendor:publish 生成 Scout 的配置文件。这个命令会在你的 config 目录下生成 scout.php 配置文件：\r\n\r\nphp artisan vendor:publish --provider=\"Laravel\\Scout\\ScoutServiceProvider\"\r\n\r\n（2）安装scout的es驱动（https://github.com/ErickTamayo/laravel-scout-elastic）\r\n①composer require tamayo/laravel-scout-elastic\r\n②You must add the Scout service provider and the package service provider in your app.php config:\r\n\r\n// config/app.php\r\n\'providers\' => [\r\n    ...\r\n    Laravel\\Scout\\ScoutServiceProvider::class,\r\n    ...\r\n    ScoutEngines\\Elasticsearch\\ElasticsearchProvider::class,\r\n]\r\n③Setting up Elasticsearch configuration\r\n\r\nYou must have a Elasticsearch server up and running with the index you want to use created\r\nIf you need help with this please refer to the Elasticsearch documentation\r\nAfter you\'ve published the Laravel Scout package configuration:\r\n\r\n// config/scout.php\r\n// Set your driver to elasticsearch\r\n    \'driver\' => env(\'SCOUT_DRIVER\', \'elasticsearch\'),\r\n\r\n...\r\n    \'elasticsearch\' => [\r\n        \'index\' => env(\'ELASTICSEARCH_INDEX\', \'laravel\'),\r\n        \'hosts\' => [\r\n            env(\'ELASTICSEARCH_HOST\', \'http://localhost\'),\r\n        ],\r\n    ],\r\n\r\n\r\n3.创建ylaravel的索引和模板\r\n①创建command(php artisan make:command ESInit)初始化ES\r\n②修改ESInit.php文件（app/console/ESInit.php），同时需要先引入GuzzleHttp包\r\ncomposer require Guzzlehttp/guzzle\r\n<?php\r\n\r\nnamespace App\\Console\\Commands;\r\nuse GuzzleHttp\\Client;\r\nuse Illuminate\\Console\\Command;\r\n\r\nclass ESInit extends Command\r\n{\r\n    /**\r\n     * The name and signature of the console command.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $signature = \'es:init\';\r\n\r\n    /**\r\n     * The console command description.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $description = \'init laravel es for post\';\r\n\r\n    /**\r\n     * Create a new command instance.\r\n     *\r\n     * @return void\r\n     */\r\n    public function __construct()\r\n    {\r\n        parent::__construct();\r\n    }\r\n\r\n    /**\r\n     * Execute the console command.\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function handle()\r\n    {\r\n        //创建template\r\n        $client = new Client();\r\n        $url = config(\'scout.elasticsearch.hosts\')[0] . \'/_template/tmp\';\r\n        $client->delete($url);\r\n        $params = [\r\n            \'json\' => [\r\n                    \'template\' => config(\'scout.elasticsearch.index\'),\r\n                ],\r\n                \'mappings\' => [\r\n                    \'_default_\' => [\r\n                        \'dynamic_templates\' => [\r\n                            [\r\n                                \'strings\' => [\r\n                                    \'match_mapping_type\' => \'string\',\r\n                                    \'mapping\' => [\r\n                                        \'type\' => \'text\',\r\n                                        \'analyzer\' => \'ik_smart\',\r\n                                        \'fields\' => [\r\n                                            \'keyword\' => [\r\n                                                \'type\' => \'keyword\'\r\n                                            ]\r\n                                        ]\r\n                                    ]\r\n                            ]\r\n                        ]\r\n                    ]\r\n                ]\r\n            ]\r\n        ];\r\n        $client->put($url, $params);\r\n\r\n      \r\n\r\n        // 创建index\r\n        $url = config(\'scout.elasticsearch.hosts\')[0] . \'/\' . config(\'scout.elasticsearch.index\');\r\n        $client->delete($url);\r\n        $params = [\r\n            \'json\' => [\r\n                \'settings\' => [\r\n                    \'refresh_interval\' => \'5s\',\r\n                    \'number_of_shards\' => 1,\r\n                    \'number_of_replicas\' => 0,\r\n                ],\r\n                \'mappings\' => [\r\n                    \'_default_\' => [\r\n                        \'_all\' => [\r\n                            \'enabled\' => false\r\n                        ]\r\n                    ]\r\n                ]\r\n            ]\r\n        ];\r\n        $client->put($url, $params);\r\n\r\n       \r\n    }\r\n}\r\n\r\n③挂载\r\n<?php\r\n\r\nnamespace App\\Console;\r\nuse Illuminate\\Console\\Scheduling\\Schedule;\r\nuse Illuminate\\Foundation\\Console\\Kernel as ConsoleKernel;\r\n\r\nclass Kernel extends ConsoleKernel\r\n{\r\n    /**\r\n     * The Artisan commands provided by your application.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $commands = [\r\n        \\App\\Console\\Commands\\ESInit::class\r\n    ];\r\n\r\n④调用es脚本\r\nphp artisan es:init\r\n\r\n4.导入数据库和已有的数据\r\n①修改数据模型\r\n<?php\r\n\r\nnamespace App;\r\n\r\nuse App\\Model;\r\nuse Illuminate\\Database\\Eloquent\\Builder;\r\n// use Laravel\\Scout\\Searchable;\r\n\r\n\r\nclass Posts extends Model\r\n{\r\n    protected $table = \'posts\';\r\n\r\n    protected $guarded = [];\r\n    // 可以注入是的数据字段\r\n    protected $fillable = [\'title\', \'content\'];\r\n\r\n\r\n    use Searchable;\r\n     // 定义索引里面的类型\r\n    public function searchableAs()\r\n    {\r\n        return \'post\';\r\n    }\r\n\r\n     // 定义有那些字段需要搜索\r\n     public function toSearchableArray()\r\n    {\r\n        return [\r\n             \'title\' => $this->title,\r\n             \'content\' => $this->content,\r\n         ];\r\n     }\r\n\r\n②导入模型数据\r\nphp artisan scout:import \"App\\Posts\"\r\n\r\n导入验证\r\n127.0.0.1:9200/laravel/54/35->记录的id\r\n\r\n5.搜索页面和逻辑的展示\r\n\r\npublic function search()\r\n{\r\n	$this->validate(request(), [\r\n		\'query\' => \'required\'\r\n	]);\r\n\r\n	$query = request([\'query\']);\r\n\r\n	$posts = App\\Posts::search($query)->paginate(2);\r\n\r\n	return view(\'post.search\', compact(\'posts\'));\r\n\r\n}', '<p>1.安装elasticsearch和ik插件<br>①elasticsearch集成包（包括ik中文插件）安装地址：<a href=\"https://github.com/medcl/elasticsearch-rtf\">https://github.com/medcl/elasticsearch-rtf</a><br>②测试安装<br>启动elasticSearch：bin/elasticSearch -d<br>③测试是否安装成功<br>127.0.0.1:9200</p><p>2.ElasticSearch的laravel scout 包的安装<br>（1）①安装laravel/scout<br>composer require laravel/scout<br>②将 ScoutServiceProvider 添加到你的配置文件 config/app.php 的 providers 数组中：</p><p>LaravelScoutScoutServiceProvider::class,</p><p>③注册好 Scout 的服务提供器之后，你还需使用Artisan 命令 vendor:publish 生成 Scout 的配置文件。这个命令会在你的 config 目录下生成 scout.php 配置文件：</p><p>php artisan vendor:publish --provider=\"LaravelScoutScoutServiceProvider\"</p><p>（2）安装scout的es驱动（<a href=\"https://github.com/ErickTamayo/laravel-scout-elastic\">https://github.com/ErickTamayo/laravel-scout-elastic</a>）<br>①composer require tamayo/laravel-scout-elastic<br>②You must add the Scout service provider and the package service provider in your app.php config:</p><p>// config/app.php<br>\'providers\' =&gt; [</p><pre><code>...\nLaravel\\Scout\\ScoutServiceProvider::class,\n...\nScoutEngines\\Elasticsearch\\ElasticsearchProvider::class,</code></pre><p>]<br>③Setting up Elasticsearch configuration</p><p>You must have a Elasticsearch server up and running with the index you want to use created<br>If you need help with this please refer to the Elasticsearch documentation<br>After you\'ve published the Laravel Scout package configuration:</p><p>// config/scout.php<br>// Set your driver to elasticsearch</p><pre><code>\'driver\' =&gt; env(\'SCOUT_DRIVER\', \'elasticsearch\'),\n</code></pre><p>...</p><pre><code>\'elasticsearch\' =&gt; [\n    \'index\' =&gt; env(\'ELASTICSEARCH_INDEX\', \'laravel\'),\n    \'hosts\' =&gt; [\n        env(\'ELASTICSEARCH_HOST\', \'http://localhost\'),\n    ],\n],\n\n</code></pre><p>3.创建ylaravel的索引和模板<br>①创建command(php artisan make:command ESInit)初始化ES<br>②修改ESInit.php文件（app/console/ESInit.php），同时需要先引入GuzzleHttp包<br>composer require Guzzlehttp/guzzle<br>&lt;?php</p><p>namespace AppConsoleCommands;<br>use GuzzleHttpClient;<br>use IlluminateConsoleCommand;</p><p>class ESInit extends Command<br>{</p><pre><code>/**\n * The name and signature of the console command.\n *\n * @var string\n */\nprotected $signature = \'es:init\';\n\n/**\n * The console command description.\n *\n * @var string\n */\nprotected $description = \'init laravel es for post\';\n\n/**\n * Create a new command instance.\n *\n * @return void\n */\npublic function __construct()\n{\n    parent::__construct();\n}\n\n/**\n * Execute the console command.\n *\n * @return mixed\n */\npublic function handle()\n{\n    //创建template\n    $client = new Client();\n    $url = config(\'scout.elasticsearch.hosts\')[0] . \'/_template/tmp\';\n    $client-&gt;delete($url);\n    $params = [\n        \'json\' =&gt; [\n                \'template\' =&gt; config(\'scout.elasticsearch.index\'),\n            ],\n            \'mappings\' =&gt; [\n                \'_default_\' =&gt; [\n                    \'dynamic_templates\' =&gt; [\n                        [\n                            \'strings\' =&gt; [\n                                \'match_mapping_type\' =&gt; \'string\',\n                                \'mapping\' =&gt; [\n                                    \'type\' =&gt; \'text\',\n                                    \'analyzer\' =&gt; \'ik_smart\',\n                                    \'fields\' =&gt; [\n                                        \'keyword\' =&gt; [\n                                            \'type\' =&gt; \'keyword\'\n                                        ]\n                                    ]\n                                ]\n                        ]\n                    ]\n                ]\n            ]\n        ]\n    ];\n    $client-&gt;put($url, $params);\n\n  \n\n    // 创建index\n    $url = config(\'scout.elasticsearch.hosts\')[0] . \'/\' . config(\'scout.elasticsearch.index\');\n    $client-&gt;delete($url);\n    $params = [\n        \'json\' =&gt; [\n            \'settings\' =&gt; [\n                \'refresh_interval\' =&gt; \'5s\',\n                \'number_of_shards\' =&gt; 1,\n                \'number_of_replicas\' =&gt; 0,\n            ],\n            \'mappings\' =&gt; [\n                \'_default_\' =&gt; [\n                    \'_all\' =&gt; [\n                        \'enabled\' =&gt; false\n                    ]\n                ]\n            ]\n        ]\n    ];\n    $client-&gt;put($url, $params);\n\n   \n}</code></pre><p>}</p><p>③挂载<br>&lt;?php</p><p>namespace AppConsole;<br>use IlluminateConsoleSchedulingSchedule;<br>use IlluminateFoundationConsoleKernel as ConsoleKernel;</p><p>class Kernel extends ConsoleKernel<br>{</p><pre><code>/**\n * The Artisan commands provided by your application.\n *\n * @var array\n */\nprotected $commands = [\n    \\App\\Console\\Commands\\ESInit::class\n];\n</code></pre><p>④调用es脚本<br>php artisan es:init</p><p>4.导入数据库和已有的数据<br>①修改数据模型<br>&lt;?php</p><p>namespace App;</p><p>use AppModel;<br>use IlluminateDatabaseEloquentBuilder;<br>// use LaravelScoutSearchable;</p><p>class Posts extends Model<br>{</p><pre><code>protected $table = \'posts\';\n\nprotected $guarded = [];\n// 可以注入是的数据字段\nprotected $fillable = [\'title\', \'content\'];\n\n\nuse Searchable;\n // 定义索引里面的类型\npublic function searchableAs()\n{\n    return \'post\';\n}\n\n // 定义有那些字段需要搜索\n public function toSearchableArray()\n{\n    return [\n         \'title\' =&gt; $this-&gt;title,\n         \'content\' =&gt; $this-&gt;content,\n     ];\n }\n</code></pre><p>②导入模型数据<br>php artisan scout:import \"AppPosts\"</p><p>导入验证<br>127.0.0.1:9200/laravel/54/35-&gt;记录的id</p><p>5.搜索页面和逻辑的展示</p><p>public function search()<br>{</p><pre><code>$this-&gt;validate(request(), [\n    \'query\' =&gt; \'required\'\n]);\n\n$query = request([\'query\']);\n\n$posts = App\\Posts::search($query)-&gt;paginate(2);\n\nreturn view(\'post.search\', compact(\'posts\'));\n</code></pre><p>}</p>', '1.安装elasticsearch和ik插件\r\n①elasticsearch集成包（包括ik中文插件）安装地址：https://github.com/medcl/elasticsearchrtf\r\n②测试安装\r\n启动elasticSearch：bin/elasticSearch d\r\n③测试是否安装成功\r\n127.0.0.1:9200\r\n\r\n\r\n2.ElasticSearch的laravel sc...', 'ElasticSearch', '1', 'uploads/article/default.jpg', '1', '1', '1575', '2017-09-07 17:49:09', '2018-01-10 15:34:45', null);
INSERT INTO `syf_articles` VALUES ('45', '1', 'Windows下进入到docker容器镜像内部', '宋耀锋', '（1）查看容器id（container ID） docker ps -a\r\n![](/uploads/article/20180102/5a4b37c6443cb.png)\r\n\r\n（2）进入到容器内部 docker exec -it 6b654059476e /bin/bash\r\nPS:-it参数后面是容器的id\r\n![](/uploads/article/20180102/5a4b37e1ebba2.png)\r\n\r\n（3）进入到mysql数据库成功 mysql -uroot -p,由于使用的阿里云wangdong/lnmp镜像，所以数据库是MariaDB,它是MySQL的一个分支，语法几乎没什么差别，甚至在某些方面比mysql更优\r\n![](/uploads/article/20180102/5a4b380b36f15.png)\r\n\r\n展示数据库：\r\n![](/uploads/article/20180102/5a4b384220f6d.png)\r\n\r\n\r\n这样就进入到容易内部了，当然了在容器内部我们还可以根据自己的的需要，进行其他的操作。。。。。。', '<p>（1）查看容器id（container ID） docker ps -a<br><img src=\"/uploads/article/20180102/5a4b37c6443cb.png\" alt=\"\" title=\"\"></p><p>（2）进入到容器内部 docker exec -it 6b654059476e /bin/bash<br>PS:-it参数后面是容器的id<br><img src=\"/uploads/article/20180102/5a4b37e1ebba2.png\" alt=\"\" title=\"\"></p><p>（3）进入到mysql数据库成功 mysql -uroot -p,由于使用的阿里云wangdong/lnmp镜像，所以数据库是MariaDB,它是MySQL的一个分支，语法几乎没什么差别，甚至在某些方面比mysql更优<br><img src=\"/uploads/article/20180102/5a4b380b36f15.png\" alt=\"\" title=\"\"></p><p>展示数据库：<br><img src=\"/uploads/article/20180102/5a4b384220f6d.png\" alt=\"\" title=\"\"></p><p>这样就进入到容易内部了，当然了在容器内部我们还可以根据自己的的需要，进行其他的操作。。。。。。</p>', '（1）查看容器id（container ID） docker ps a\r\n\r\n\r\n（2）进入到容器内部 docker exec it 6b654059476e /bin/bash\r\nPS:it参数后面是容器的id\r\n\r\n\r\n（3）进入到mysql数据库成功 mysql uroot p,由于使用的阿里云wangdong/lnmp镜像，所以数据库是MariaDB,它是MySQL的一个分支，语法几乎没什...', 'Docker', '1', '/uploads/article/20180102/5a4b37c6443cb.png', '0', '0', '239', '2017-09-06 10:34:28', '2017-09-06 10:34:28', null);
INSERT INTO `syf_articles` VALUES ('46', '3', 'docker 报错：driver failed programming external connectivity on endpoint lnmp (2f647b8aba729787bf34f6a8', '宋耀锋', '早上来到公司打开本地lnmp环境,发现docker不能正常启动，报错：driver failed programming external connectivity on endpoint lnmp，后面英文还显示是mysql端口映射到物理机的问题\r\n![](/uploads/article/20180102/5a4b38bc6df7e.png)\r\n\r\n最后发现就是本地mysql服务自动打开了，与docker的冲突了，使docker的mysql服务无法映射到本地了，所以解决自然是把本地的mysql服务关闭就行了\r\n![](/uploads/article/20180102/5a4b38dc4642a.png)', '<p>早上来到公司打开本地lnmp环境,发现docker不能正常启动，报错：driver failed programming external connectivity on endpoint lnmp，后面英文还显示是mysql端口映射到物理机的问题<br><img src=\"/uploads/article/20180102/5a4b38bc6df7e.png\" alt=\"\" title=\"\"></p><p>最后发现就是本地mysql服务自动打开了，与docker的冲突了，使docker的mysql服务无法映射到本地了，所以解决自然是把本地的mysql服务关闭就行了<br><img src=\"/uploads/article/20180102/5a4b38dc4642a.png\" alt=\"\" title=\"\"></p>', '早上来到公司打开本地lnmp环境,发现docker不能正常启动，报错：driver failed programming external connectivity on endpoint lnmp，后面英文还显示是mysql端口映射到物理机的问题\r\n\r\n\r\n最后发现就是本地mysql服务自动打开了，与docker的冲突了，使docker的mysql服务无法映射到本地了，所以解决自然是把本地的my...', 'Linux,Docker', '1', '/uploads/article/20180102/5a4b38bc6df7e.png', '0', '0', '421', '2017-09-06 10:07:10', '2017-09-06 10:07:10', null);
INSERT INTO `syf_articles` VALUES ('47', '1', 'trait的使用心得', '宋耀锋', 'PHP trait 特性在 Laravel 中的使用个人心得\r\ntrait 是在PHP5.4中为了方便代码复用的一种实现方式，但目前我在看的的PHP项目中较少看的有程序员去主动使用这个实现方式，在laravel中有很多 trait 的使用，关于trait 在 laravel 的使用请参看 Laravel 在哪些地方用了 trait?\r\n\r\n我曾在 Laravel 中大型项目面向对象架构 引用分享过一个他人的架构设计实践，在他的实践中大量使用了依赖注入。这是一种可行的方式，而同样的使用 trait 可以实现同样的功能，而且应用场景更多。\r\n\r\nmodel 中使用\r\nmodel是随着项目的推移会慢慢的变得肥大难以维护，因为传统的方式是将数据库访问逻辑都写在这里面，而 laravel 的模型里除了数据访问的逻辑还会有数据表之间的关联关系，访问器，修改器，监视的字段，白名单，黑名单等等。\r\n\r\n而当一个模型在有了这么多东西后模型就会出现维护困难问题，当然数据访问可以通过 资源库模式（Repository）进行分离，但当项目已经有很多数据访问写在模型里使用资源库模式就是一个费力费时的改造工程。\r\n\r\n而使用 trait 既可以实现代码分离又可以不用在逻辑层做任何处理。\r\n\r\n我们只需要创建一个trait，将数据访问的所有方法全部移动到这个trait中，然后在原来的模型中 use 这个trait就可以了，这样就方便的实现了代码的分离。\r\n\r\n同样的你可以将访问器，修改器分离，甚至是常常使用的模型定义，比如laravel的软删除就是用这种方式实现的，你可以自己定义一些常用的模型功能代码，比如内容的审核功能。\r\n\r\n我的建议是将model放在models文件夹中，其他trait放在models中建立的文件夹中，这样就近的方便查找修改，比如我就将访问器修改器放在app/Models/Attribuite文件夹中，然后使用模型名类型名的驼峰命名文件。 比如 User 模型的访问器修改器我的文件路径就是app/Models/Attribuite/UserAttribute.php。\r\n\r\n当然你可以分的更加细致，把访问器单独定义一个trait，修改器单独定义一个。\r\n\r\napp/Models/Attribuite/UserGetAttribute.php app/Models/Attribuite/UserSetAttribute.php\r\n\r\nController 中的使用\r\n在laravel中有一个基类控制器里面已经有几个trait的使用了，比如认证，验证器，我们在使用基类控制器时候如果有较少的基类方法可以直接写在这个基类控制器里，当有很多的时候维护和查找他们也是一个麻烦事，这时候就可以用trait将他们分类出来。\r\n\r\n而一些要复用的代码可能只在几个控制器里需要用到，这时候可以仅仅在这几个控制器里使用定义好的trait。\r\n\r\n还有一种使用方式是控制器分离，当控制器中有越来越多方法时候，分离控制器中的方法也是必要的，一般的做法是新建一个控制器，然后将一些原来控制器中的方法移动过去，然后再去修改路由配置。用trait可以实现分离而不需要修改路由配置，新建一个trait将需要分离的方法移动过去，然后在原控制器中使用这个 trait 。\r\n\r\n原文链接：http://www.cnblogs.com/m2ez/p/7063621.html', '<p>PHP trait 特性在 Laravel 中的使用个人心得<br>trait 是在PHP5.4中为了方便代码复用的一种实现方式，但目前我在看的的PHP项目中较少看的有程序员去主动使用这个实现方式，在laravel中有很多 trait 的使用，关于trait 在 laravel 的使用请参看 Laravel 在哪些地方用了 trait?</p><p>我曾在 Laravel 中大型项目面向对象架构 引用分享过一个他人的架构设计实践，在他的实践中大量使用了依赖注入。这是一种可行的方式，而同样的使用 trait 可以实现同样的功能，而且应用场景更多。</p><p>model 中使用<br>model是随着项目的推移会慢慢的变得肥大难以维护，因为传统的方式是将数据库访问逻辑都写在这里面，而 laravel 的模型里除了数据访问的逻辑还会有数据表之间的关联关系，访问器，修改器，监视的字段，白名单，黑名单等等。</p><p>而当一个模型在有了这么多东西后模型就会出现维护困难问题，当然数据访问可以通过 资源库模式（Repository）进行分离，但当项目已经有很多数据访问写在模型里使用资源库模式就是一个费力费时的改造工程。</p><p>而使用 trait 既可以实现代码分离又可以不用在逻辑层做任何处理。</p><p>我们只需要创建一个trait，将数据访问的所有方法全部移动到这个trait中，然后在原来的模型中 use 这个trait就可以了，这样就方便的实现了代码的分离。</p><p>同样的你可以将访问器，修改器分离，甚至是常常使用的模型定义，比如laravel的软删除就是用这种方式实现的，你可以自己定义一些常用的模型功能代码，比如内容的审核功能。</p><p>我的建议是将model放在models文件夹中，其他trait放在models中建立的文件夹中，这样就近的方便查找修改，比如我就将访问器修改器放在app/Models/Attribuite文件夹中，然后使用模型名类型名的驼峰命名文件。 比如 User 模型的访问器修改器我的文件路径就是app/Models/Attribuite/UserAttribute.php。</p><p>当然你可以分的更加细致，把访问器单独定义一个trait，修改器单独定义一个。</p><p>app/Models/Attribuite/UserGetAttribute.php app/Models/Attribuite/UserSetAttribute.php</p><p>Controller 中的使用<br>在laravel中有一个基类控制器里面已经有几个trait的使用了，比如认证，验证器，我们在使用基类控制器时候如果有较少的基类方法可以直接写在这个基类控制器里，当有很多的时候维护和查找他们也是一个麻烦事，这时候就可以用trait将他们分类出来。</p><p>而一些要复用的代码可能只在几个控制器里需要用到，这时候可以仅仅在这几个控制器里使用定义好的trait。</p><p>还有一种使用方式是控制器分离，当控制器中有越来越多方法时候，分离控制器中的方法也是必要的，一般的做法是新建一个控制器，然后将一些原来控制器中的方法移动过去，然后再去修改路由配置。用trait可以实现分离而不需要修改路由配置，新建一个trait将需要分离的方法移动过去，然后在原控制器中使用这个 trait 。</p><p>原文链接：<a href=\"http://www.cnblogs.com/m2ez/p/7063621.html\">http://www.cnblogs.com/m2ez/p/7063621.html</a></p>', 'PHP trait 特性在 Laravel 中的使用个人心得\r\ntrait 是在PHP5.4中为了方便代码复用的一种实现方式，但目前我在看的的PHP项目中较少看的有程序员去主动使用这个实现方式，在laravel中有很多 trait 的使用，关于trait 在 laravel 的使用请参看 Laravel 在哪些地方用了 trait?\r\n\r\n我曾在 Laravel 中大型项目面向对象架构 引用分享过...', 'Trait', '1', 'uploads/article/default.jpg', '0', '0', '93', '2017-09-05 10:20:46', '2017-09-05 10:20:46', null);
INSERT INTO `syf_articles` VALUES ('48', '1', '几个自定义的函数，不知道什么时候就可能用到了。。。。', '宋耀锋', '```\r\n\r\n/**\r\n * curl发送post请求\r\n * @access public\r\n * @param array $url        (必须)请求的地址\r\n * @param array $post_data  (可选)要发送的post数组\r\n * @return data             目标返回值\r\n */\r\nfunction request_post($url, $post_data = array()) {\r\n\r\n    if (empty($url) || empty($post_data))return false;\r\n\r\n    $o = \"\";\r\n    foreach ( $post_data as $k => $v ){\r\n        $o.= \"$k=\" . urlencode( $v ). \"&\" ;\r\n    }\r\n    $curlPost = substr($o,0,-1);\r\n\r\n    $ch = curl_init();//初始化curl\r\n    curl_setopt($ch, CURLOPT_URL,$url);//抓取指定网页\r\n    curl_setopt($ch, CURLOPT_HEADER, 0);//设置header\r\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);//要求结果为字符串且输出到屏幕上\r\n    curl_setopt($ch, CURLOPT_POST, 1);//post提交方式\r\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $curlPost);\r\n    $data = curl_exec($ch);//运行curl\r\n    curl_close($ch);\r\n\r\n    return $data;\r\n}\r\n\r\n/**\r\n * 产生随机字串，可用来自动生成密码 默认长度6位 字母和数字混合\r\n * @param string $len 长度\r\n * @param string $type 字串类型\r\n * 0 字母 1 数字 其它 混合\r\n * @param string $addChars 额外字符\r\n * @return string\r\n */\r\nfunction rand_string($len=6,$type=\'\',$addChars=\'\') {\r\n    $str =\'\';\r\n    switch($type) {\r\n        case 0:\r\n            $chars=\'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\'.$addChars;\r\n            break;\r\n        case 1:\r\n            $chars= str_repeat(\'0123456789\',3);\r\n            break;\r\n        case 2:\r\n            $chars=\'ABCDEFGHIJKLMNOPQRSTUVWXYZ\'.$addChars;\r\n            break;\r\n        case 3:\r\n            $chars=\'abcdefghijklmnopqrstuvwxyz\'.$addChars;\r\n            break;\r\n        case 4:\r\n            $chars = \"们以我到他会作时要动国产的一是工就年阶义发成部民可出能方进在了不和有大这主中人上为来分生对于学下级地个用同行面说种过命度革而多子后自社加小机也经力线本电高量长党得实家定深法表着水理化争现所二起政三好十战无农使性前等反体合斗路图把结第里正新开论之物从当两些还天资事队批点育重其思与间内去因件日利相由压员气业代全组数果期导平各基或月毛然如应形想制心样干都向变关问比展那它最及外没看治提五解系林者米群头意只明四道马认次文通但条较克又公孔领军流入接席位情运器并飞原油放立题质指建区验活众很教决特此常石强极土少已根共直团统式转别造切九你取西持总料连任志观调七么山程百报更见必真保热委手改管处己将修支识病象几先老光专什六型具示复安带每东增则完风回南广劳轮科北打积车计给节做务被整联步类集号列温装即毫知轴研单色坚据速防史拉世设达尔场织历花受求传口断况采精金界品判参层止边清至万确究书术状厂须离再目海交权且儿青才证低越际八试规斯近注办布门铁需走议县兵固除般引齿千胜细影济白格效置推空配刀叶率述今选养德话查差半敌始片施响收华觉备名红续均药标记难存测士身紧液派准斤角降维板许破述技消底床田势端感往神便贺村构照容非搞亚磨族火段算适讲按值美态黄易彪服早班麦削信排台声该击素张密害侯草何树肥继右属市严径螺检左页抗苏显苦英快称坏移约巴材省黑武培著河帝仅针怎植京助升王眼她抓含苗副杂普谈围食射源例致酸旧却充足短划剂宣环落首尺波承粉践府鱼随考刻靠够满夫失包住促枝局菌杆周护岩师举曲春元超负砂封换太模贫减阳扬江析亩木言球朝医校古呢稻宋听唯输滑站另卫字鼓刚写刘微略范供阿块某功套友限项余倒卷创律雨让骨远帮初皮播优占死毒圈伟季训控激找叫云互跟裂粮粒母练塞钢顶策双留误础吸阻故寸盾晚丝女散焊功株亲院冷彻弹错散商视艺灭版烈零室轻血倍缺厘泵察绝富城冲喷壤简否柱李望盘磁雄似困巩益洲脱投送奴侧润盖挥距触星松送获兴独官混纪依未突架宽冬章湿偏纹吃执阀矿寨责熟稳夺硬价努翻奇甲预职评读背协损棉侵灰虽矛厚罗泥辟告卵箱掌氧恩爱停曾溶营终纲孟钱待尽俄缩沙退陈讨奋械载胞幼哪剥迫旋征槽倒握担仍呀鲜吧卡粗介钻逐弱脚怕盐末阴丰雾冠丙街莱贝辐肠付吉渗瑞惊顿挤秒悬姆烂森糖圣凹陶词迟蚕亿矩康遵牧遭幅园腔订香肉弟屋敏恢忘编印蜂急拿扩伤飞露核缘游振操央伍域甚迅辉异序免纸夜乡久隶缸夹念兰映沟乙吗儒杀汽磷艰晶插埃燃欢铁补咱芽永瓦倾阵碳演威附牙芽永瓦斜灌欧献顺猪洋腐请透司危括脉宜笑若尾束壮暴企菜穗楚汉愈绿拖牛份染既秋遍锻玉夏疗尖殖井费州访吹荣铜沿替滚客召旱悟刺脑措贯藏敢令隙炉壳硫煤迎铸粘探临薄旬善福纵择礼愿伏残雷延烟句纯渐耕跑泽慢栽鲁赤繁境潮横掉锥希池败船假亮谓托伙哲怀割摆贡呈劲财仪沉炼麻罪祖息车穿货销齐鼠抽画饲龙库守筑房歌寒喜哥洗蚀废纳腹乎录镜妇恶脂庄擦险赞钟摇典柄辩竹谷卖乱虚桥奥伯赶垂途额壁网截野遗静谋弄挂课镇妄盛耐援扎虑键归符庆聚绕摩忙舞遇索顾胶羊湖钉仁音迹碎伸灯避泛亡答勇频皇柳哈揭甘诺概宪浓岛袭谁洪谢炮浇斑讯懂灵蛋闭孩释乳巨徒私银伊景坦累匀霉杜乐勒隔弯绩招绍胡呼痛峰零柴簧午跳居尚丁秦稍追梁折耗碱殊岗挖氏刃剧堆赫荷胸衡勤膜篇登驻案刊秧缓凸役剪川雪链渔啦脸户洛孢勃盟买杨宗焦赛旗滤硅炭股坐蒸凝竟陷枪黎救冒暗洞犯筒您宋弧爆谬涂味津臂障褐陆啊健尊豆拔莫抵桑坡缝警挑污冰柬嘴啥饭塑寄赵喊垫丹渡耳刨虎笔稀昆浪萨茶滴浅拥穴覆伦娘吨浸袖珠雌妈紫戏塔锤震岁貌洁剖牢锋疑霸闪埔猛诉刷狠忽灾闹乔唐漏闻沈熔氯荒茎男凡抢像浆旁玻亦忠唱蒙予纷捕锁尤乘乌智淡允叛畜俘摸锈扫毕璃宝芯爷鉴秘净蒋钙肩腾枯抛轨堂拌爸循诱祝励肯酒绳穷塘燥泡袋朗喂铝软渠颗惯贸粪综墙趋彼届墨碍启逆卸航衣孙龄岭骗休借\".$addChars;\r\n            break;\r\n        case 5:  //VIN\r\n            $chars=\'ABCDEFGHJKLMNPRSTUVWXYZ0123456789\'.$addChars;\r\n            break;\r\n        default :\r\n            // 默认去掉了容易混淆的字符oOLl和数字01，要添加请使用addChars参数\r\n            $chars=\'ABCDEFGHIJKMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789\'.$addChars;\r\n            break;\r\n    }\r\n    if($len>10 ) {//位数过长重复字符串一定次数\r\n        $chars= $type==1? str_repeat($chars,$len) : str_repeat($chars,5);\r\n    }\r\n    if($type!=4) {\r\n        $chars   =   str_shuffle($chars);\r\n        $str     =   substr($chars,0,$len);\r\n    }else{\r\n        // 中文随机字\r\n        for($i=0;$i<$len;$i++){\r\n            $str.= msubstr($chars, floor(mt_rand(0,mb_strlen($chars,\'utf-8\')-1)),1);\r\n        }\r\n    }\r\n    return $str;\r\n}\r\n\r\n\r\n /**\r\n     * 返回传入的字母附近第n个字母\r\n     * @author gjy\r\n     *\r\n     * @param  string $letter\r\n     * @param  integer $num\r\n     * @return string\r\n     */\r\n    function neighbor_letter($letter = \'\', $num = 1)\r\n    {\r\n        $num = (int) $num;\r\n        if ($num === 0) {\r\n            return $letter;\r\n        }\r\n\r\n        $ascllDec = ord($letter) + $num;\r\n        if ($ascllDec < 65\r\n            || ($ascllDec > 90 && $ascllDec < 97)\r\n            || $ascllDec > 122) {\r\n            return \'\';\r\n        }\r\n\r\n        return chr($ascllDec);\r\n    }\r\n\r\n    /**\r\n     * 全角字符转半角\r\n     * @author gjy\r\n     *\r\n     * @param  string $str\r\n     * @param  string $coding\r\n     * @return string\r\n     */\r\n    function str_full2half($str = \'\', $coding = \'UTF-8\')\r\n    {\r\n        if (empty($str)) {\r\n            return \'\';\r\n        }\r\n\r\n        if ($coding !== \'UTF-8\') {\r\n            $str = mb_convert_encoding($str, \'UTF-8\', $coding);\r\n        }\r\n        $ret = \'\';\r\n        for ($i = 0; $i < strlen($str); ++$i) {\r\n            $s1 = $str[$i];\r\n            if (($c = ord($s1)) & 0x80) {\r\n                $s2 = $str[++$i];\r\n                $s3 = $str[++$i];\r\n                $c = (($c & 0xF) << 12) | ((ord($s2) & 0x3F) << 6) | (ord($s3) & 0x3F);\r\n                if ($c == 12288) {\r\n                    $ret .= \' \';\r\n                } elseif ($c > 65280 && $c < 65375 && $c != 65374) {\r\n                    $c -= 65248;\r\n                    $ret .= chr($c);\r\n                } else {\r\n                    $ret .= $s1 . $s2 . $s3;\r\n                }\r\n            } else {\r\n                $ret .= $str[$i];\r\n            }\r\n        }\r\n\r\n        if ($coding === \'UTF-8\') {\r\n            return $ret;\r\n        }\r\n\r\n        return mb_convert_encoding($ret, $coding, \'UTF-8\');\r\n    }\r\n\r\n    /**\r\n     * 去除制定的html标签\r\n     * @author gjy\r\n     *\r\n     * @param  string $str\r\n     * @param  string $type\r\n     * @return string\r\n     */\r\n    function strip_html_tags($str = \'\', $type = \'script\')\r\n    {\r\n        if (empty($str)) {\r\n            return \'\';\r\n        }\r\n\r\n        $stripType = array(\r\n            \'all\' => \'@<[\\/\\!]*?[^<>]*?>@si\', // 所有标签, 等同于 strip_tags()\r\n            \'script\' => \'@<script[^>]*?>.*?</script>@si\', // 去除js\r\n            \'style\' => \'@<style[^>]*?>.*?</style>@siU\', // 去除css\r\n            \'comments\' => \'@<![\\s\\S]*?--[ \\t\\n\\r]*>@\', // 去除注释\r\n            \'html\' => \'@<html[^>]*?>.*?</html>@si\', // 去除html标签\r\n            \'body\' => \'@<body[^>]*?>.*?</body>@si\', // 去除body标签\r\n        );\r\n\r\n        if (empty($stripType[$type])) {\r\n            return $str;\r\n        }\r\n\r\n        return preg_replace($stripType[$type], \'\', $str);\r\n    }\r\n\r\n    /**\r\n     * 生成随机字符串\r\n     * @author CodeIgniter developer\r\n     * @revisor gjy\r\n     *\r\n     * @param  string $type\r\n     * @param  integer $len\r\n     * @return string\r\n     */\r\n    function random_string($type = \'distinct_num\', $len = 8)\r\n    {\r\n        switch (true) {\r\n            default:\r\n            case \'numeric\' === $type:\r\n                $pool = \'1234567890\';\r\n                break;\r\n            case \'nozero\' === $type:\r\n                $pool = \'123456789\';\r\n                break;\r\n            case \'alnum\' === $type:\r\n                $pool = \'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\';\r\n                break;\r\n            case \'alpha\' === $type:\r\n                $pool = \'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\';\r\n                break;\r\n            case \'distinct\' === $type:\r\n                $pool = \'abcdefghijkmnpqrstuvwxyzABCDEFGHIJKLMNPQRSTUVWXYZ\';\r\n                break;\r\n            case \'distinct_num\' === $type:\r\n                $pool = \'3456789abcdefghijkmnpqrstuvwxyABCDEFGHIJKLMNPQRSTUVWXY\';\r\n                break;\r\n            case \'abc123\' === $type:\r\n                $pool = \'3456789abcdefghijkmnpqrstuvwxy\';\r\n                break;\r\n            case \'md5\' === $type:\r\n                return md5(uniqid(mt_rand()));\r\n            case \'sha1\' === $type:\r\n                return sha1(uniqid(mt_rand(), true));\r\n        }\r\n\r\n        return substr(str_shuffle(str_repeat($pool, ceil($len / strlen($pool)))), 0, $len);\r\n    }\r\n\r\n    /**\r\n     * 生成可识别的序列号\r\n     * @author gjy\r\n     *\r\n     * @param  string $type\r\n     * @return string 至少32位\r\n     */\r\n    function gen_serial_no($type = \'numeric\', $len = 0)\r\n    {\r\n        if (\'numeric\' === $type) {\r\n            /** 长度为32+的基本数字流水号 */\r\n            $time = microtime(true);\r\n            $micro = sprintf(\'%06d\', ($time - floor($time)) * 1000000);\r\n            // 时间&毫秒(20) + 随机数位(12+n)\r\n            return date(\'YmdHis\' . $micro, $time) . self::random_string(\'numeric\', 12 + ($len < 1 ? 0 : intval($len)));\r\n        } else {\r\n            return md5(uniqid(mt_rand()));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 去除字符两边的标点符号 (中英文)\r\n     * @author gjy\r\n     *\r\n     * @param  string $string\r\n     * @return string\r\n     */\r\n    function trim_punctuation($string = \'\', $pos = \'\')\r\n    {\r\n        $pos = strtolower($pos);\r\n        switch (true) {\r\n            case \'l\' === $pos:\r\n                $pattern = \'/^\' . CommonRegex::PUNCTUATION_UNICODE . \'*/\';\r\n                break;\r\n            case \'r\' === $pos:\r\n                $pattern = \'/\' . CommonRegex::PUNCTUATION_UNICODE . \'*$/\';\r\n                break;\r\n\r\n            default:\r\n                $pattern = [\r\n                    // left\r\n                    \'/^\' . CommonRegex::PUNCTUATION_UNICODE . \'*/\',\r\n                    // right\r\n                    \'/\' . CommonRegex::PUNCTUATION_UNICODE . \'*$/\',\r\n                ];\r\n                break;\r\n        }\r\n\r\n        return urldecode(preg_replace($pattern, \'\', urlencode($string)));\r\n    }\r\n\r\n    /**\r\n     * 按行将字符处理为数组\r\n     * @author gjy\r\n     *\r\n     * @param  string $string\r\n     * @return array\r\n     */\r\n    function row_explode(string $string) : array\r\n    {\r\n        $delimiter = \'__EXPLODE__\' . uniqid(mt_rand());\r\n        return explode($delimiter, str_replace(array(\"\\n\\r\", \"\\r\\n\", \"\\r\", \"\\n\"), $delimiter, $string));\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 性能更高的数组去重\r\n     * 解决 array_unique 使用快排算法处理大数组时的性能损耗问题\r\n     * @author gjy\r\n     *\r\n     * @param  array $arrData\r\n     * @param  boolean $filtered\r\n     * @return array\r\n     */\r\n    function unique(array $arrData = array(), $filtered = FALSE) : array\r\n    {\r\n        if (!$filtered) {\r\n            $arrData = array_filter($arrData);\r\n        }\r\n\r\n        return array_keys(array_flip($arrData));\r\n    }\r\n\r\n\r\n    /**\r\n     * 随机取数组中一个值\r\n     * @author gjy\r\n     *\r\n     * @param  array $array\r\n     * @return array | mixed\r\n     */\r\n    function random_value(array $array)\r\n    {\r\n        return empty($array) ? [] : $array[array_rand($array)];\r\n    }\r\n\r\n\r\n    /**\r\n     * 在一维数组中筛选出数字\r\n     * @author gjy <goujinyang@kuaiqiangche.com>\r\n     *\r\n     * @param  array $array\r\n     * @return array\r\n     */\r\n    function filter_number(array $array)\r\n    {\r\n        return array_filter($array, function($item, $key) {\r\n            $tmpVar = trim($item);\r\n            return is_numeric($tmpVar);\r\n        }, ARRAY_FILTER_USE_BOTH);\r\n    }\r\n```', '<pre><code>\n/**\n * curl发送post请求\n * @access public\n * @param array $url        (必须)请求的地址\n * @param array $post_data  (可选)要发送的post数组\n * @return data             目标返回值\n */\nfunction request_post($url, $post_data = array()) {\n\n    if (empty($url) || empty($post_data))return false;\n\n    $o = &quot;&quot;;\n    foreach ( $post_data as $k =&gt; $v ){\n        $o.= &quot;$k=&quot; . urlencode( $v ). &quot;&amp;&quot; ;\n    }\n    $curlPost = substr($o,0,-1);\n\n    $ch = curl_init();//初始化curl\n    curl_setopt($ch, CURLOPT_URL,$url);//抓取指定网页\n    curl_setopt($ch, CURLOPT_HEADER, 0);//设置header\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);//要求结果为字符串且输出到屏幕上\n    curl_setopt($ch, CURLOPT_POST, 1);//post提交方式\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $curlPost);\n    $data = curl_exec($ch);//运行curl\n    curl_close($ch);\n\n    return $data;\n}\n\n/**\n * 产生随机字串，可用来自动生成密码 默认长度6位 字母和数字混合\n * @param string $len 长度\n * @param string $type 字串类型\n * 0 字母 1 数字 其它 混合\n * @param string $addChars 额外字符\n * @return string\n */\nfunction rand_string($len=6,$type=\'\',$addChars=\'\') {\n    $str =\'\';\n    switch($type) {\n        case 0:\n            $chars=\'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\'.$addChars;\n            break;\n        case 1:\n            $chars= str_repeat(\'0123456789\',3);\n            break;\n        case 2:\n            $chars=\'ABCDEFGHIJKLMNOPQRSTUVWXYZ\'.$addChars;\n            break;\n        case 3:\n            $chars=\'abcdefghijklmnopqrstuvwxyz\'.$addChars;\n            break;\n        case 4:\n            $chars = &quot;们以我到他会作时要动国产的一是工就年阶义发成部民可出能方进在了不和有大这主中人上为来分生对于学下级地个用同行面说种过命度革而多子后自社加小机也经力线本电高量长党得实家定深法表着水理化争现所二起政三好十战无农使性前等反体合斗路图把结第里正新开论之物从当两些还天资事队批点育重其思与间内去因件日利相由压员气业代全组数果期导平各基或月毛然如应形想制心样干都向变关问比展那它最及外没看治提五解系林者米群头意只明四道马认次文通但条较克又公孔领军流入接席位情运器并飞原油放立题质指建区验活众很教决特此常石强极土少已根共直团统式转别造切九你取西持总料连任志观调七么山程百报更见必真保热委手改管处己将修支识病象几先老光专什六型具示复安带每东增则完风回南广劳轮科北打积车计给节做务被整联步类集号列温装即毫知轴研单色坚据速防史拉世设达尔场织历花受求传口断况采精金界品判参层止边清至万确究书术状厂须离再目海交权且儿青才证低越际八试规斯近注办布门铁需走议县兵固除般引齿千胜细影济白格效置推空配刀叶率述今选养德话查差半敌始片施响收华觉备名红续均药标记难存测士身紧液派准斤角降维板许破述技消底床田势端感往神便贺村构照容非搞亚磨族火段算适讲按值美态黄易彪服早班麦削信排台声该击素张密害侯草何树肥继右属市严径螺检左页抗苏显苦英快称坏移约巴材省黑武培著河帝仅针怎植京助升王眼她抓含苗副杂普谈围食射源例致酸旧却充足短划剂宣环落首尺波承粉践府鱼随考刻靠够满夫失包住促枝局菌杆周护岩师举曲春元超负砂封换太模贫减阳扬江析亩木言球朝医校古呢稻宋听唯输滑站另卫字鼓刚写刘微略范供阿块某功套友限项余倒卷创律雨让骨远帮初皮播优占死毒圈伟季训控激找叫云互跟裂粮粒母练塞钢顶策双留误础吸阻故寸盾晚丝女散焊功株亲院冷彻弹错散商视艺灭版烈零室轻血倍缺厘泵察绝富城冲喷壤简否柱李望盘磁雄似困巩益洲脱投送奴侧润盖挥距触星松送获兴独官混纪依未突架宽冬章湿偏纹吃执阀矿寨责熟稳夺硬价努翻奇甲预职评读背协损棉侵灰虽矛厚罗泥辟告卵箱掌氧恩爱停曾溶营终纲孟钱待尽俄缩沙退陈讨奋械载胞幼哪剥迫旋征槽倒握担仍呀鲜吧卡粗介钻逐弱脚怕盐末阴丰雾冠丙街莱贝辐肠付吉渗瑞惊顿挤秒悬姆烂森糖圣凹陶词迟蚕亿矩康遵牧遭幅园腔订香肉弟屋敏恢忘编印蜂急拿扩伤飞露核缘游振操央伍域甚迅辉异序免纸夜乡久隶缸夹念兰映沟乙吗儒杀汽磷艰晶插埃燃欢铁补咱芽永瓦倾阵碳演威附牙芽永瓦斜灌欧献顺猪洋腐请透司危括脉宜笑若尾束壮暴企菜穗楚汉愈绿拖牛份染既秋遍锻玉夏疗尖殖井费州访吹荣铜沿替滚客召旱悟刺脑措贯藏敢令隙炉壳硫煤迎铸粘探临薄旬善福纵择礼愿伏残雷延烟句纯渐耕跑泽慢栽鲁赤繁境潮横掉锥希池败船假亮谓托伙哲怀割摆贡呈劲财仪沉炼麻罪祖息车穿货销齐鼠抽画饲龙库守筑房歌寒喜哥洗蚀废纳腹乎录镜妇恶脂庄擦险赞钟摇典柄辩竹谷卖乱虚桥奥伯赶垂途额壁网截野遗静谋弄挂课镇妄盛耐援扎虑键归符庆聚绕摩忙舞遇索顾胶羊湖钉仁音迹碎伸灯避泛亡答勇频皇柳哈揭甘诺概宪浓岛袭谁洪谢炮浇斑讯懂灵蛋闭孩释乳巨徒私银伊景坦累匀霉杜乐勒隔弯绩招绍胡呼痛峰零柴簧午跳居尚丁秦稍追梁折耗碱殊岗挖氏刃剧堆赫荷胸衡勤膜篇登驻案刊秧缓凸役剪川雪链渔啦脸户洛孢勃盟买杨宗焦赛旗滤硅炭股坐蒸凝竟陷枪黎救冒暗洞犯筒您宋弧爆谬涂味津臂障褐陆啊健尊豆拔莫抵桑坡缝警挑污冰柬嘴啥饭塑寄赵喊垫丹渡耳刨虎笔稀昆浪萨茶滴浅拥穴覆伦娘吨浸袖珠雌妈紫戏塔锤震岁貌洁剖牢锋疑霸闪埔猛诉刷狠忽灾闹乔唐漏闻沈熔氯荒茎男凡抢像浆旁玻亦忠唱蒙予纷捕锁尤乘乌智淡允叛畜俘摸锈扫毕璃宝芯爷鉴秘净蒋钙肩腾枯抛轨堂拌爸循诱祝励肯酒绳穷塘燥泡袋朗喂铝软渠颗惯贸粪综墙趋彼届墨碍启逆卸航衣孙龄岭骗休借&quot;.$addChars;\n            break;\n        case 5:  //VIN\n            $chars=\'ABCDEFGHJKLMNPRSTUVWXYZ0123456789\'.$addChars;\n            break;\n        default :\n            // 默认去掉了容易混淆的字符oOLl和数字01，要添加请使用addChars参数\n            $chars=\'ABCDEFGHIJKMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789\'.$addChars;\n            break;\n    }\n    if($len&gt;10 ) {//位数过长重复字符串一定次数\n        $chars= $type==1? str_repeat($chars,$len) : str_repeat($chars,5);\n    }\n    if($type!=4) {\n        $chars   =   str_shuffle($chars);\n        $str     =   substr($chars,0,$len);\n    }else{\n        // 中文随机字\n        for($i=0;$i&lt;$len;$i++){\n            $str.= msubstr($chars, floor(mt_rand(0,mb_strlen($chars,\'utf-8\')-1)),1);\n        }\n    }\n    return $str;\n}\n\n\n /**\n     * 返回传入的字母附近第n个字母\n     * @author gjy\n     *\n     * @param  string $letter\n     * @param  integer $num\n     * @return string\n     */\n    function neighbor_letter($letter = \'\', $num = 1)\n    {\n        $num = (int) $num;\n        if ($num === 0) {\n            return $letter;\n        }\n\n        $ascllDec = ord($letter) + $num;\n        if ($ascllDec &lt; 65\n            || ($ascllDec &gt; 90 &amp;&amp; $ascllDec &lt; 97)\n            || $ascllDec &gt; 122) {\n            return \'\';\n        }\n\n        return chr($ascllDec);\n    }\n\n    /**\n     * 全角字符转半角\n     * @author gjy\n     *\n     * @param  string $str\n     * @param  string $coding\n     * @return string\n     */\n    function str_full2half($str = \'\', $coding = \'UTF-8\')\n    {\n        if (empty($str)) {\n            return \'\';\n        }\n\n        if ($coding !== \'UTF-8\') {\n            $str = mb_convert_encoding($str, \'UTF-8\', $coding);\n        }\n        $ret = \'\';\n        for ($i = 0; $i &lt; strlen($str); ++$i) {\n            $s1 = $str[$i];\n            if (($c = ord($s1)) &amp; 0x80) {\n                $s2 = $str[++$i];\n                $s3 = $str[++$i];\n                $c = (($c &amp; 0xF) &lt;&lt; 12) | ((ord($s2) &amp; 0x3F) &lt;&lt; 6) | (ord($s3) &amp; 0x3F);\n                if ($c == 12288) {\n                    $ret .= \' \';\n                } elseif ($c &gt; 65280 &amp;&amp; $c &lt; 65375 &amp;&amp; $c != 65374) {\n                    $c -= 65248;\n                    $ret .= chr($c);\n                } else {\n                    $ret .= $s1 . $s2 . $s3;\n                }\n            } else {\n                $ret .= $str[$i];\n            }\n        }\n\n        if ($coding === \'UTF-8\') {\n            return $ret;\n        }\n\n        return mb_convert_encoding($ret, $coding, \'UTF-8\');\n    }\n\n    /**\n     * 去除制定的html标签\n     * @author gjy\n     *\n     * @param  string $str\n     * @param  string $type\n     * @return string\n     */\n    function strip_html_tags($str = \'\', $type = \'script\')\n    {\n        if (empty($str)) {\n            return \'\';\n        }\n\n        $stripType = array(\n            \'all\' =&gt; \'@&lt;[\\/\\!]*?[^&lt;&gt;]*?&gt;@si\', // 所有标签, 等同于 strip_tags()\n            \'script\' =&gt; \'@&lt;script[^&gt;]*?&gt;.*?&lt;/script&gt;@si\', // 去除js\n            \'style\' =&gt; \'@&lt;style[^&gt;]*?&gt;.*?&lt;/style&gt;@siU\', // 去除css\n            \'comments\' =&gt; \'@&lt;![\\s\\S]*?--[ \\t\\n\\r]*&gt;@\', // 去除注释\n            \'html\' =&gt; \'@&lt;html[^&gt;]*?&gt;.*?&lt;/html&gt;@si\', // 去除html标签\n            \'body\' =&gt; \'@&lt;body[^&gt;]*?&gt;.*?&lt;/body&gt;@si\', // 去除body标签\n        );\n\n        if (empty($stripType[$type])) {\n            return $str;\n        }\n\n        return preg_replace($stripType[$type], \'\', $str);\n    }\n\n    /**\n     * 生成随机字符串\n     * @author CodeIgniter developer\n     * @revisor gjy\n     *\n     * @param  string $type\n     * @param  integer $len\n     * @return string\n     */\n    function random_string($type = \'distinct_num\', $len = 8)\n    {\n        switch (true) {\n            default:\n            case \'numeric\' === $type:\n                $pool = \'1234567890\';\n                break;\n            case \'nozero\' === $type:\n                $pool = \'123456789\';\n                break;\n            case \'alnum\' === $type:\n                $pool = \'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\';\n                break;\n            case \'alpha\' === $type:\n                $pool = \'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\';\n                break;\n            case \'distinct\' === $type:\n                $pool = \'abcdefghijkmnpqrstuvwxyzABCDEFGHIJKLMNPQRSTUVWXYZ\';\n                break;\n            case \'distinct_num\' === $type:\n                $pool = \'3456789abcdefghijkmnpqrstuvwxyABCDEFGHIJKLMNPQRSTUVWXY\';\n                break;\n            case \'abc123\' === $type:\n                $pool = \'3456789abcdefghijkmnpqrstuvwxy\';\n                break;\n            case \'md5\' === $type:\n                return md5(uniqid(mt_rand()));\n            case \'sha1\' === $type:\n                return sha1(uniqid(mt_rand(), true));\n        }\n\n        return substr(str_shuffle(str_repeat($pool, ceil($len / strlen($pool)))), 0, $len);\n    }\n\n    /**\n     * 生成可识别的序列号\n     * @author gjy\n     *\n     * @param  string $type\n     * @return string 至少32位\n     */\n    function gen_serial_no($type = \'numeric\', $len = 0)\n    {\n        if (\'numeric\' === $type) {\n            /** 长度为32+的基本数字流水号 */\n            $time = microtime(true);\n            $micro = sprintf(\'%06d\', ($time - floor($time)) * 1000000);\n            // 时间&amp;毫秒(20) + 随机数位(12+n)\n            return date(\'YmdHis\' . $micro, $time) . self::random_string(\'numeric\', 12 + ($len &lt; 1 ? 0 : intval($len)));\n        } else {\n            return md5(uniqid(mt_rand()));\n        }\n    }\n\n    /**\n     * 去除字符两边的标点符号 (中英文)\n     * @author gjy\n     *\n     * @param  string $string\n     * @return string\n     */\n    function trim_punctuation($string = \'\', $pos = \'\')\n    {\n        $pos = strtolower($pos);\n        switch (true) {\n            case \'l\' === $pos:\n                $pattern = \'/^\' . CommonRegex::PUNCTUATION_UNICODE . \'*/\';\n                break;\n            case \'r\' === $pos:\n                $pattern = \'/\' . CommonRegex::PUNCTUATION_UNICODE . \'*$/\';\n                break;\n\n            default:\n                $pattern = [\n                    // left\n                    \'/^\' . CommonRegex::PUNCTUATION_UNICODE . \'*/\',\n                    // right\n                    \'/\' . CommonRegex::PUNCTUATION_UNICODE . \'*$/\',\n                ];\n                break;\n        }\n\n        return urldecode(preg_replace($pattern, \'\', urlencode($string)));\n    }\n\n    /**\n     * 按行将字符处理为数组\n     * @author gjy\n     *\n     * @param  string $string\n     * @return array\n     */\n    function row_explode(string $string) : array\n    {\n        $delimiter = \'__EXPLODE__\' . uniqid(mt_rand());\n        return explode($delimiter, str_replace(array(&quot;\\n\\r&quot;, &quot;\\r\\n&quot;, &quot;\\r&quot;, &quot;\\n&quot;), $delimiter, $string));\n    }\n\n\n\n    /**\n     * 性能更高的数组去重\n     * 解决 array_unique 使用快排算法处理大数组时的性能损耗问题\n     * @author gjy\n     *\n     * @param  array $arrData\n     * @param  boolean $filtered\n     * @return array\n     */\n    function unique(array $arrData = array(), $filtered = FALSE) : array\n    {\n        if (!$filtered) {\n            $arrData = array_filter($arrData);\n        }\n\n        return array_keys(array_flip($arrData));\n    }\n\n\n    /**\n     * 随机取数组中一个值\n     * @author gjy\n     *\n     * @param  array $array\n     * @return array | mixed\n     */\n    function random_value(array $array)\n    {\n        return empty($array) ? [] : $array[array_rand($array)];\n    }\n\n\n    /**\n     * 在一维数组中筛选出数字\n     * @author gjy &lt;goujinyang@kuaiqiangche.com&gt;\n     *\n     * @param  array $array\n     * @return array\n     */\n    function filter_number(array $array)\n    {\n        return array_filter($array, function($item, $key) {\n            $tmpVar = trim($item);\n            return is_numeric($tmpVar);\n        }, ARRAY_FILTER_USE_BOTH);\n    }</code></pre>', '```\r\n\r\n/\r\n  curl发送post请求\r\n  @access public\r\n  @param array $url        (必须)请求的地址\r\n  @param array $post_data  (可选)要发送的post数组\r\n  @return data             目标返回值\r\n /\r\nfunction request_post($url, $post_dat...', 'function', '1', 'uploads/article/default.jpg', '1', '0', '285', '2017-08-29 18:22:59', '2018-01-10 16:52:25', null);
INSERT INTO `syf_articles` VALUES ('49', '1', '分享一个验证码类', '宋耀锋', '```php\r\n<?php\r\nnamespace App\\Tool\\Validate;\r\n\r\n//验证码类\r\nclass ValidateCode\r\n{\r\n    private $charset = \'abcdefghkmnprstuvwxyzABCDEFGHKMNPRSTUVWXYZ23456789\';//随机因子\r\n    private $code;//验证码\r\n    private $codelen = 4;//验证码长度\r\n    private $width = 130;//宽度\r\n    private $height = 50;//高度\r\n    private $img;//图形资源句柄\r\n    private $font;//指定的字体\r\n    private $fontsize = 20;//指定字体大小\r\n    private $fontcolor;//指定字体颜色\r\n\r\n    //构造方法初始化\r\n    public function __construct()\r\n    {\r\n        $this->font = public_path() . \'/font/Elephant.ttf\';//注意字体路径要写对，否则显示不了图片\r\n        $this->createCode();\r\n    }\r\n    //生成随机码\r\n    private function createCode()\r\n    {\r\n        $_len = strlen($this->charset) - 1;\r\n        for ($i = 0;$i < $this->codelen;++$i) {\r\n            $this->code .= $this->charset[mt_rand(0, $_len)];\r\n        }\r\n    }\r\n    //生成背景\r\n    private function createBg()\r\n    {\r\n        $this->img = imagecreatetruecolor($this->width, $this->height);\r\n        $color = imagecolorallocate($this->img, mt_rand(157, 255), mt_rand(157, 255), mt_rand(157, 255));\r\n        imagefilledrectangle($this->img, 0, $this->height, $this->width, 0, $color);\r\n    }\r\n    //生成文字\r\n    private function createFont()\r\n    {\r\n        $_x = $this->width / $this->codelen;\r\n        for ($i = 0;$i < $this->codelen;++$i) {\r\n            $this->fontcolor = imagecolorallocate($this->img, mt_rand(0, 156), mt_rand(0, 156), mt_rand(0, 156));\r\n            imagettftext($this->img, $this->fontsize, mt_rand(-30, 30), $_x * $i + mt_rand(1, 5), $this->height / 1.4, $this->fontcolor, $this->font, $this->code[$i]);\r\n        }\r\n    }\r\n    //生成线条、雪花\r\n    private function createLine()\r\n    {\r\n      //线条\r\n      for ($i = 0;$i < 6;++$i) {\r\n          $color = imagecolorallocate($this->img, mt_rand(0, 156), mt_rand(0, 156), mt_rand(0, 156));\r\n          imageline($this->img, mt_rand(0, $this->width), mt_rand(0, $this->height), mt_rand(0, $this->width), mt_rand(0, $this->height), $color);\r\n      }\r\n      //雪花\r\n      for ($i = 0;$i < 100;++$i) {\r\n          $color = imagecolorallocate($this->img, mt_rand(200, 255), mt_rand(200, 255), mt_rand(200, 255));\r\n          imagestring($this->img, mt_rand(1, 5), mt_rand(0, $this->width), mt_rand(0, $this->height), \'*\', $color);\r\n      }\r\n    }\r\n    //输出\r\n    private function outPut()\r\n    {\r\n        header(\'Content-type:image/png\');\r\n        imagepng($this->img);\r\n        imagedestroy($this->img);\r\n    }\r\n    //对外生成\r\n    public function doimg()\r\n    {\r\n        $this->createBg();\r\n        $this->createLine();\r\n        $this->createFont();\r\n        $this->outPut();\r\n    }\r\n    //获取验证码\r\n    public function getCode()\r\n    {\r\n        return strtolower($this->code);\r\n    }\r\n}\r\n\r\n```', '<pre><code class=\"lang-php\">&lt;?php\nnamespace App\\Tool\\Validate;\n\n//验证码类\nclass ValidateCode\n{\n    private $charset = \'abcdefghkmnprstuvwxyzABCDEFGHKMNPRSTUVWXYZ23456789\';//随机因子\n    private $code;//验证码\n    private $codelen = 4;//验证码长度\n    private $width = 130;//宽度\n    private $height = 50;//高度\n    private $img;//图形资源句柄\n    private $font;//指定的字体\n    private $fontsize = 20;//指定字体大小\n    private $fontcolor;//指定字体颜色\n\n    //构造方法初始化\n    public function __construct()\n    {\n        $this-&gt;font = public_path() . \'/font/Elephant.ttf\';//注意字体路径要写对，否则显示不了图片\n        $this-&gt;createCode();\n    }\n    //生成随机码\n    private function createCode()\n    {\n        $_len = strlen($this-&gt;charset) - 1;\n        for ($i = 0;$i &lt; $this-&gt;codelen;++$i) {\n            $this-&gt;code .= $this-&gt;charset[mt_rand(0, $_len)];\n        }\n    }\n    //生成背景\n    private function createBg()\n    {\n        $this-&gt;img = imagecreatetruecolor($this-&gt;width, $this-&gt;height);\n        $color = imagecolorallocate($this-&gt;img, mt_rand(157, 255), mt_rand(157, 255), mt_rand(157, 255));\n        imagefilledrectangle($this-&gt;img, 0, $this-&gt;height, $this-&gt;width, 0, $color);\n    }\n    //生成文字\n    private function createFont()\n    {\n        $_x = $this-&gt;width / $this-&gt;codelen;\n        for ($i = 0;$i &lt; $this-&gt;codelen;++$i) {\n            $this-&gt;fontcolor = imagecolorallocate($this-&gt;img, mt_rand(0, 156), mt_rand(0, 156), mt_rand(0, 156));\n            imagettftext($this-&gt;img, $this-&gt;fontsize, mt_rand(-30, 30), $_x * $i + mt_rand(1, 5), $this-&gt;height / 1.4, $this-&gt;fontcolor, $this-&gt;font, $this-&gt;code[$i]);\n        }\n    }\n    //生成线条、雪花\n    private function createLine()\n    {\n      //线条\n      for ($i = 0;$i &lt; 6;++$i) {\n          $color = imagecolorallocate($this-&gt;img, mt_rand(0, 156), mt_rand(0, 156), mt_rand(0, 156));\n          imageline($this-&gt;img, mt_rand(0, $this-&gt;width), mt_rand(0, $this-&gt;height), mt_rand(0, $this-&gt;width), mt_rand(0, $this-&gt;height), $color);\n      }\n      //雪花\n      for ($i = 0;$i &lt; 100;++$i) {\n          $color = imagecolorallocate($this-&gt;img, mt_rand(200, 255), mt_rand(200, 255), mt_rand(200, 255));\n          imagestring($this-&gt;img, mt_rand(1, 5), mt_rand(0, $this-&gt;width), mt_rand(0, $this-&gt;height), \'*\', $color);\n      }\n    }\n    //输出\n    private function outPut()\n    {\n        header(\'Content-type:image/png\');\n        imagepng($this-&gt;img);\n        imagedestroy($this-&gt;img);\n    }\n    //对外生成\n    public function doimg()\n    {\n        $this-&gt;createBg();\n        $this-&gt;createLine();\n        $this-&gt;createFont();\n        $this-&gt;outPut();\n    }\n    //获取验证码\n    public function getCode()\n    {\n        return strtolower($this-&gt;code);\n    }\n}\n</code></pre>', '```php\r\n<?php\r\nnamespace App\\Tool\\Validate;\r\n\r\n//验证码类\r\nclass ValidateCode\r\n{\r\n    private $charset = \'abcdefghkmnprstuvwxyzABCDEFGHKMNPRSTUVWXYZ23456789\';//随机因子\r\n    private $code;//验证码\r\n    private $...', 'Captcha', '1', 'uploads/article/default.jpg', '0', '0', '84', '2017-08-28 18:46:55', '2017-08-28 18:46:55', null);
INSERT INTO `syf_articles` VALUES ('50', '1', '从一个数组中找出众数,及其出现的次数', '宋耀锋', '```\r\n$arr = [1, 4, 3, 3, 3, 4, 4, 4];\r\n$maxCount = [];\r\n$len = count($arr);\r\n$zhongshu = \'\';\r\nfor($i=0; $i<$len; $i++)\r\n{\r\n    $count = 0;\r\n    for($j=0; $j<$len; $j++)\r\n    {\r\n        if($arr[$i] == $arr[$j])\r\n        {\r\n            $count++;\r\n            $maxCount[$arr[$i]] = $count ; \r\n        }\r\n    }\r\n}\r\n\r\n$cishu = max($maxCount);\r\nif($cishu > 1 )\r\n{\r\n    foreach($maxCount as $k => $v)\r\n    {\r\n        if($v == $cishu)\r\n        {\r\n            $zhongshu = $k;\r\n        }\r\n\r\n    }\r\n}else\r\n{\r\n    $zhongshu = \'无众数\';\r\n    $cishu = \'值出现的个数都唯一！\';\r\n}\r\n\r\necho \'<pre>\';\r\nprint_r($maxCount);\r\necho \'</pre>\';\r\necho \'<br />\'.\'众数：\' . $zhongshu . \'<br />\';\r\necho \'<br />\'.\'出现次数：\' . $cishu ;\r\n```', '<pre><code>$arr = [1, 4, 3, 3, 3, 4, 4, 4];\n$maxCount = [];\n$len = count($arr);\n$zhongshu = \'\';\nfor($i=0; $i&lt;$len; $i++)\n{\n    $count = 0;\n    for($j=0; $j&lt;$len; $j++)\n    {\n        if($arr[$i] == $arr[$j])\n        {\n            $count++;\n            $maxCount[$arr[$i]] = $count ; \n        }\n    }\n}\n\n$cishu = max($maxCount);\nif($cishu &gt; 1 )\n{\n    foreach($maxCount as $k =&gt; $v)\n    {\n        if($v == $cishu)\n        {\n            $zhongshu = $k;\n        }\n\n    }\n}else\n{\n    $zhongshu = \'无众数\';\n    $cishu = \'值出现的个数都唯一！\';\n}\n\necho \'&lt;pre&gt;\';\nprint_r($maxCount);\necho \'&lt;/pre&gt;\';\necho \'&lt;br /&gt;\'.\'众数：\' . $zhongshu . \'&lt;br /&gt;\';\necho \'&lt;br /&gt;\'.\'出现次数：\' . $cishu ;</code></pre>', '```\r\n$arr = ;\r\n$maxCount = ;\r\n$len = count($arr);\r\n$zhongshu = \'\';\r\nfor($i=0; $i<$len; $i++)\r\n{\r\n    $count = 0;\r\n    for($j=0; $j<$len; $j++)\r\n    {\r\n        if($arr)\r\n        {\r\n            $count++...', '众数', '1', 'uploads/article/default.jpg', '0', '0', '239', '2017-08-08 18:28:44', '2017-08-08 18:28:44', null);
INSERT INTO `syf_articles` VALUES ('51', '1', '关于在laravel项目中验证码不显示的问题', '宋耀锋', '```\r\n最近遇到一个问题，就是验证码在别人的电脑上可以显示，但是我自己的电脑上去不能。原因找了好久，哈哈，终于找到了！现在给大家分享一下：\r\n\r\n程序：\r\n\r\n<?php \r\n\r\n$w = 80; //设置图片宽和高 \r\n$h = 26; \r\n$str = Array(); //用来存储随机码 \r\n$string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";//随机挑选其中4个字符，也可以选择更多，注意循环的时候加上，宽度适当调整 \r\nfor($i = 0;$i < 4;$i++){ \r\n$str[$i] = $string[rand(0,35)]; \r\n$vcode .= $str[$i]; \r\n} \r\nsession_start(); //启用超全局变量session \r\n$_SESSION[\"vcode\"] = $vcode; \r\n$im = imagecreatetruecolor($w,$h); \r\n$white = imagecolorallocate($im,255,255,255); //第一次调用设置背景色 \r\n$black = imagecolorallocate($im,0,0,0); //边框颜色 \r\nimagefilledrectangle($im,0,0,$w,$h,$white); //画一矩形填充 \r\nimagerectangle($im,0,0,$w-1,$h-1,$black); //画一矩形框 \r\n//生成雪花背景 \r\nfor($i = 1;$i < 200;$i++){ \r\n$x = mt_rand(1,$w-9); \r\n$y = mt_rand(1,$h-9); \r\n$color = imagecolorallocate($im,mt_rand(200,255),mt_rand(200,255),mt_rand(200,255)); \r\nimagechar($im,1,$x,$y,\"*\",$color); \r\n} \r\n//将验证码写入图案 \r\nfor($i = 0;$i < count($str);$i++){ \r\n$x = 13 + $i * ($w - 15)/4; \r\n$y = mt_rand(3,$h / 3); \r\n$color = imagecolorallocate($im,mt_rand(0,225),mt_rand(0,150),mt_rand(0,225)); \r\nimagechar($im,5,$x,$y,$str[$i],$color); \r\n} \r\nheader(\"Content-type:image/jpeg\"); //以jpeg格式输出，注意上面不能输出任何字符，否则出错 \r\nimagejpeg($im); \r\nimagedestroy($im); \r\n?> \r\n验证过，在别人的电脑上能运行，但是我自己的电脑却无法运行。原因如下：\r\n\r\n首先要声明一下的是，我以为是gd2库没有打开，但用 phpinfo查看了，发现打开了。清除了bom，代码也是顶行开始写的，因此问题可能出现在代码上。后来经过研究，发现还是要更改一下程序，要在header前面加上ob_clean()这个语句，这样就可以运行了。\r\n\r\n加在header输出之前：\r\nob_clean();  //关键代码，防止出现\'图像因其本身有错无法显示\'的问题。\r\n\r\nheader(\"Content-type:image/jpeg\");\r\n```\r\n原文链接： https://www.tuicool.com/articles/jaYBBfJ', '<pre><code>最近遇到一个问题，就是验证码在别人的电脑上可以显示，但是我自己的电脑上去不能。原因找了好久，哈哈，终于找到了！现在给大家分享一下：\n\n程序：\n\n&lt;?php \n\n$w = 80; //设置图片宽和高 \n$h = 26; \n$str = Array(); //用来存储随机码 \n$string = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;;//随机挑选其中4个字符，也可以选择更多，注意循环的时候加上，宽度适当调整 \nfor($i = 0;$i &lt; 4;$i++){ \n$str[$i] = $string[rand(0,35)]; \n$vcode .= $str[$i]; \n} \nsession_start(); //启用超全局变量session \n$_SESSION[&quot;vcode&quot;] = $vcode; \n$im = imagecreatetruecolor($w,$h); \n$white = imagecolorallocate($im,255,255,255); //第一次调用设置背景色 \n$black = imagecolorallocate($im,0,0,0); //边框颜色 \nimagefilledrectangle($im,0,0,$w,$h,$white); //画一矩形填充 \nimagerectangle($im,0,0,$w-1,$h-1,$black); //画一矩形框 \n//生成雪花背景 \nfor($i = 1;$i &lt; 200;$i++){ \n$x = mt_rand(1,$w-9); \n$y = mt_rand(1,$h-9); \n$color = imagecolorallocate($im,mt_rand(200,255),mt_rand(200,255),mt_rand(200,255)); \nimagechar($im,1,$x,$y,&quot;*&quot;,$color); \n} \n//将验证码写入图案 \nfor($i = 0;$i &lt; count($str);$i++){ \n$x = 13 + $i * ($w - 15)/4; \n$y = mt_rand(3,$h / 3); \n$color = imagecolorallocate($im,mt_rand(0,225),mt_rand(0,150),mt_rand(0,225)); \nimagechar($im,5,$x,$y,$str[$i],$color); \n} \nheader(&quot;Content-type:image/jpeg&quot;); //以jpeg格式输出，注意上面不能输出任何字符，否则出错 \nimagejpeg($im); \nimagedestroy($im); \n?&gt; \n验证过，在别人的电脑上能运行，但是我自己的电脑却无法运行。原因如下：\n\n首先要声明一下的是，我以为是gd2库没有打开，但用 phpinfo查看了，发现打开了。清除了bom，代码也是顶行开始写的，因此问题可能出现在代码上。后来经过研究，发现还是要更改一下程序，要在header前面加上ob_clean()这个语句，这样就可以运行了。\n\n加在header输出之前：\nob_clean();  //关键代码，防止出现\'图像因其本身有错无法显示\'的问题。\n\nheader(&quot;Content-type:image/jpeg&quot;);</code></pre><p>原文链接： <a href=\"https://www.tuicool.com/articles/jaYBBfJ\">https://www.tuicool.com/articles/jaYBBfJ</a></p>', '```\r\n最近遇到一个问题，就是验证码在别人的电脑上可以显示，但是我自己的电脑上去不能。原因找了好久，哈哈，终于找到了！现在给大家分享一下：\r\n\r\n程序：\r\n\r\n<?php \r\n\r\n$w = 80; //设置图片宽和高 \r\n$h = 26; \r\n$str = Array(); //用来存储随机码 \r\n$string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";...', 'laravely-验证码', '2', 'uploads/article/default.jpg', '1', '0', '239', '2017-05-28 13:08:46', '2018-01-10 16:07:58', null);
INSERT INTO `syf_articles` VALUES ('52', '1', 'RESTful 设计指南', '宋耀锋', '网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）。\r\n\r\n因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现“API First”的设计思想。RESTful API是目前比较成熟的一套互联网应用程序的API设计理论。我以前写过一篇《理解RESTful架构》，探讨如何理解这个概念。\r\n\r\n今天，我将介绍RESTful API的设计细节，探讨如何设计一套合理、好用的API。我的主要参考了两篇文章（1，2）。\r\n![](/uploads/article/20180102/5a4b3e557e1ff.png)\r\n一、协议\r\nAPI与用户的通信协议，总是使用HTTPs协议。\r\n\r\n二、域名\r\n应该尽量将API部署在专用域名之下。\r\nhttps://api.example.com\r\n如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。\r\nhttps://example.org/api/\r\n三、版本（Versioning）\r\n应该将API的版本号放入URL。\r\nhttps://api.example.com/v1/\r\n另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。\r\n四、路径（Endpoint）\r\n路径又称”终点”（endpoint），表示API的具体网址。\r\n\r\n在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。\r\n\r\n举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。\r\n- https://api.example.com/v1/zoos\r\n- https://api.example.com/v1/animals\r\n- https://api.example.com/v1/employees\r\n五、HTTP动词\r\n对于资源的具体操作类型，由HTTP动词表示。\r\n常用的HTTP动词有下面五个（括号里是对应的SQL命令）。\r\n	- GET（SELECT）：从服务器取出资源（一项或多项）。\r\n	- POST（CREATE）：在服务器新建一个资源。\r\n	- PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。\r\n	- PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。\r\n	- DELETE（DELETE）：从服务器删除资源。\r\n还有两个不常用的HTTP动词。\r\nHEAD：获取资源的元数据。\r\nOPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。\r\n下面是一些例子。\r\n\r\n	- GET /zoos：列出所有动物园\r\n	- POST /zoos：新建一个动物园\r\n	- GET /zoos/ID：获取某个指定动物园的信息\r\n	- PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）\r\n	- PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）\r\n	- DELETE /zoos/ID：删除某个动物园\r\n	- GET /zoos/ID/animals：列出某个指定动物园的所有动物\r\n	- DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物\r\n六、过滤信息（Filtering）\r\n如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。\r\n\r\n下面是一些常见的参数。\r\n\r\n	- ?limit=10：指定返回记录的数量\r\n	- ?offset=10：指定返回记录的开始位置。\r\n	- ?page=2&per_page=100：指定第几页，以及每页的记录数。\r\n	- ?sortby=name&order=asc：指定返回结果按照哪个属性排序，以及排序顺序。\r\n	- ?animal_type_id=1：指定筛选条件\r\n参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。\r\n\r\n七、状态码（Status Codes）\r\n服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。\r\n\r\n	- 200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。\r\n	- 201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。\r\n	- 202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）\r\n	- 204 NO CONTENT - [DELETE]：用户删除数据成功。\r\n	- 400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。\r\n	- 401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。\r\n	- 403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。\r\n	- 404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。\r\n	- 406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。\r\n	- 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。\r\n	- 422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。\r\n	- 500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。\r\n状态码的完全列表参见这里。\r\n\r\n八、错误处理（Error handling）\r\n如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。\r\n	{\r\n		error: \"Invalid API key\"\r\n	}\r\n\r\n九、返回结果\r\n针对不同操作，服务器向用户返回的结果应该符合以下规范。\r\n\r\n- GET /collection：返回资源对象的列表（数组）\r\n- GET /collection/resource：返回单个资源对象\r\n- POST /collection：返回新生成的资源对象\r\n- PUT /collection/resource：返回完整的资源对象\r\n- PATCH /collection/resource：返回完整的资源对象\r\n- DELETE /collection/resource：返回一个空文档\r\n十、Hypermedia API\r\nRESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。\r\n\r\n比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。\r\n	{\"link\": {\r\n	  \"rel\":   \"collection https://www.example.com/zoos\",\r\n	  \"href\":  \"https://api.example.com/zoos\",\r\n	  \"title\": \"List of zoos\",\r\n	  \"type\":  \"application/vnd.yourformat+json\"\r\n	}}\r\n\r\n上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。\r\n\r\nHypermedia API的设计被称为HATEOAS。Github的API就是这种设计，访问api.github.com会得到一个所有可用API的网址列表。\r\n{\r\n  \"current_user_url\": \"https://api.github.com/user\",\r\n  \"authorizations_url\": \"https://api.github.com/authorizations\",\r\n  // ...\r\n}\r\n\r\n从上面可以看到，如果想获取当前用户的信息，应该去访问api.github.com/user，然后就得到了下面结果。\r\n{\r\n  \"message\": \"Requires authentication\",\r\n  \"documentation_url\": \"https://developer.github.com/v3\"\r\n}\r\n上面代码表示，服务器给出了提示信息，以及文档的网址。\r\n\r\n十一、其他\r\n	（1）API的身份认证应该使用OAuth 2.0框架。\r\n	（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML。\r\n（完）', '<p>网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）。</p><p>因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现“API First”的设计思想。RESTful API是目前比较成熟的一套互联网应用程序的API设计理论。我以前写过一篇《理解RESTful架构》，探讨如何理解这个概念。</p><p>今天，我将介绍RESTful API的设计细节，探讨如何设计一套合理、好用的API。我的主要参考了两篇文章（1，2）。<br><img src=\"/uploads/article/20180102/5a4b3e557e1ff.png\" alt=\"\" title=\"\"><br>一、协议<br>API与用户的通信协议，总是使用HTTPs协议。</p><p>二、域名<br>应该尽量将API部署在专用域名之下。<br><a href=\"https://api.example.com\">https://api.example.com</a><br>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。<br><a href=\"https://example.org/api/\">https://example.org/api/</a><br>三、版本（Versioning）<br>应该将API的版本号放入URL。<br><a href=\"https://api.example.com/v1/\">https://api.example.com/v1/</a><br>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。<br>四、路径（Endpoint）<br>路径又称”终点”（endpoint），表示API的具体网址。</p><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><ul><li><a href=\"https://api.example.com/v1/zoos\">https://api.example.com/v1/zoos</a></li><li><a href=\"https://api.example.com/v1/animals\">https://api.example.com/v1/animals</a></li><li><a href=\"https://api.example.com/v1/employees\">https://api.example.com/v1/employees</a></li></ul><p>五、HTTP动词<br>对于资源的具体操作类型，由HTTP动词表示。<br>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p><pre><code>- GET（SELECT）：从服务器取出资源（一项或多项）。\n- POST（CREATE）：在服务器新建一个资源。\n- PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。\n- PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。\n- DELETE（DELETE）：从服务器删除资源。</code></pre><p>还有两个不常用的HTTP动词。<br>HEAD：获取资源的元数据。<br>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。<br>下面是一些例子。</p><pre><code>- GET /zoos：列出所有动物园\n- POST /zoos：新建一个动物园\n- GET /zoos/ID：获取某个指定动物园的信息\n- PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）\n- PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）\n- DELETE /zoos/ID：删除某个动物园\n- GET /zoos/ID/animals：列出某个指定动物园的所有动物\n- DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</code></pre><p>六、过滤信息（Filtering）<br>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p><p>下面是一些常见的参数。</p><pre><code>- ?limit=10：指定返回记录的数量\n- ?offset=10：指定返回记录的开始位置。\n- ?page=2&amp;per_page=100：指定第几页，以及每页的记录数。\n- ?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。\n- ?animal_type_id=1：指定筛选条件</code></pre><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p><p>七、状态码（Status Codes）<br>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p><pre><code>- 200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。\n- 201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。\n- 202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）\n- 204 NO CONTENT - [DELETE]：用户删除数据成功。\n- 400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。\n- 401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。\n- 403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。\n- 404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。\n- 406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。\n- 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。\n- 422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。\n- 500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</code></pre><p>状态码的完全列表参见这里。</p><p>八、错误处理（Error handling）<br>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p><pre><code>{\n    error: &quot;Invalid API key&quot;\n}\n</code></pre><p>九、返回结果<br>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><ul><li>GET /collection：返回资源对象的列表（数组）</li><li>GET /collection/resource：返回单个资源对象</li><li>POST /collection：返回新生成的资源对象</li><li>PUT /collection/resource：返回完整的资源对象</li><li>PATCH /collection/resource：返回完整的资源对象</li><li>DELETE /collection/resource：返回一个空文档</li></ul><p>十、Hypermedia API<br>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p><p>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p><pre><code>{&quot;link&quot;: {\n  &quot;rel&quot;:   &quot;collection https://www.example.com/zoos&quot;,\n  &quot;href&quot;:  &quot;https://api.example.com/zoos&quot;,\n  &quot;title&quot;: &quot;List of zoos&quot;,\n  &quot;type&quot;:  &quot;application/vnd.yourformat+json&quot;\n}}\n</code></pre><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p><p>Hypermedia API的设计被称为HATEOAS。Github的API就是这种设计，访问api.github.com会得到一个所有可用API的网址列表。<br>{<br>  \"current_user_url\": \"https://api.github.com/user\",<br>  \"authorizations_url\": \"https://api.github.com/authorizations\",<br>  // ...<br>}</p><p>从上面可以看到，如果想获取当前用户的信息，应该去访问api.github.com/user，然后就得到了下面结果。<br>{<br>  \"message\": \"Requires authentication\",<br>  \"documentation_url\": \"https://developer.github.com/v3\"<br>}<br>上面代码表示，服务器给出了提示信息，以及文档的网址。</p><p>十一、其他</p><pre><code>（1）API的身份认证应该使用OAuth 2.0框架。\n（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</code></pre><p>（完）</p>', '网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）。\r\n\r\n因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现“API First”的设计思想。RESTful API是目前比较成熟的一套互联网应用程序的API设计理论。我以前写过一篇《理解RESTful架构》，探讨如何理解这个概念。\r\n\r\n...', 'Restful,Restful-api', '1', '/uploads/article/20180102/5a4b3e557e1ff.png', '1', '0', '104', '2017-05-18 14:56:58', '2018-01-11 09:46:40', null);
INSERT INTO `syf_articles` VALUES ('53', '1', 'laravel拓展自定义函数的两种方法', '宋耀锋', 'laravel里面我们很多朋友不知道把自定义函数放在哪儿。我们的应用里经常会有一些全局都可能会用的函数，我们应该怎么放置它会比较好呢？现在匀们为大家准备了laravel放置函数的规范。  \r\n第一种方法;  \r\n```php\r\n1. 创建文件 app/helpers.php\r\n<?php// 示例函数\r\nfunction foo()\r\n{\r\n	return \"foo\";\r\n}\r\n2. 修改项目 composer.json在项目 composer.json 中 autoload 部分里的 files 字段加入该文件即可：\r\n{    ...     \"autoload\": {\r\n	\"files\": [\r\n		 \"app/helpers.php\"\r\n	]}    ...\r\n}\r\n然后运行:composer dump-autoload\r\n```\r\n第二种方法：\r\n\r\n①在app根目录下建Common/functions.php文件\r\n![](/uploads/article/20180102/5a4b407ec38bd.png)\r\n![](/uploads/article/20180102/5a4b408762af3.png)', '<p>laravel里面我们很多朋友不知道把自定义函数放在哪儿。我们的应用里经常会有一些全局都可能会用的函数，我们应该怎么放置它会比较好呢？现在匀们为大家准备了laravel放置函数的规范。  <br>第一种方法;</p><pre><code class=\"lang-php\">1. 创建文件 app/helpers.php\n&lt;?php// 示例函数\nfunction foo()\n{\n    return &quot;foo&quot;;\n}\n2. 修改项目 composer.json在项目 composer.json 中 autoload 部分里的 files 字段加入该文件即可：\n{    ...     &quot;autoload&quot;: {\n    &quot;files&quot;: [\n         &quot;app/helpers.php&quot;\n    ]}    ...\n}\n然后运行:composer dump-autoload</code></pre><p>第二种方法：</p><p>①在app根目录下建Common/functions.php文件<br><img src=\"/uploads/article/20180102/5a4b407ec38bd.png\" alt=\"\" title=\"\"><br><img src=\"/uploads/article/20180102/5a4b408762af3.png\" alt=\"\" title=\"\"></p>', 'laravel里面我们很多朋友不知道把自定义函数放在哪儿。我们的应用里经常会有一些全局都可能会用的函数，我们应该怎么放置它会比较好呢？现在匀们为大家准备了laravel放置函数的规范。  \r\n第一种方法;  \r\n```php\r\n1. 创建文件 app/helpers.php\r\n<?php// 示例函数\r\nfunction foo()\r\n{\r\n	return \"foo\";\r\n}\r\n2. 修改项目 c...', 'function', '2', '/uploads/article/20180102/5a4b407ec38bd.png', '0', '0', '117', '2017-05-17 15:53:45', '2017-05-17 15:53:45', null);
INSERT INTO `syf_articles` VALUES ('54', '1', 'Windows安装laravel出现You don\'t have permission to access / on this server.', '宋耀锋', '安装完wamp之后，安装网上的教程设置虚拟路径，出现了问题，同样的问题由不同的原因导致。希望对有些大意的人有帮助。\r\n\r\n1、httpd.conf去掉Include conf/extra/httpd-vhosts.conf前面的#。\r\n\r\n2、httpd.conf中添加Listen 相应的端口，我的是8080\r\n\r\n3、在conf\\extra下面的httpd-vhosts.conf文件中添加\r\n\r\n    <VirtualHost *:8080>\r\n    DocumentRoot D:/wamp/www/aa\r\n    ServerName localhost\r\n    <Directory “d:/wamp/www/aa”>\r\n        Options Indexes FollowSymLinks \r\n        Order allow,deny\r\n        Allow from all\r\n        AllowOverride All\r\n    </Directory>\r\n</VirtualHost>\r\n\r\n\r\n4、然后调用localhost，就出现下面的错误：\r\n\r\nForbidden\r\nYou don’t have permission to access /on this server.\r\n\r\n\r\n（没有设置这一切时，localhost访问的没有问题的）\r\n\r\n5、最后发现是没有删掉httpd-vhosts.conf文件中的这段代码导致的：\r\n\r\n<VirtualHost *:80>\r\n    ServerAdmin webmaster@dummy-host.example.com\r\n    DocumentRoot “c:/Apache23/docs/dummy-host.example.com”\r\n    ServerName dummy-host.example.com\r\n    ServerAlias www.dummy-host.example.com\r\n    ErrorLog “logs/dummy-host.example.com-error.log”\r\n    CustomLog “logs/dummy-host.example.com-access.log” common\r\n</VirtualHost>\r\n\r\n\r\n删掉或者注释掉这段代码，再运行localhost就没有问题了。\r\n\r\n\r\n6、localhost运行好使了，但运行localhost:8080却有新的问题：\r\n\r\nForbidden\r\nYou don’t have permission to access /index.phpon this server.\r\n\r\n\r\n7、然后也是找了很多，多是说什么allow from all等等的问题。但无论我怎么设置都是这个问题。\r\n\r\n几经波折，发现把Options Indexes FollowSymLinks 后面添加上 ExecCGI就好使了。\r\n`<VirtualHost *:8080>\r\n    DocumentRoot D:/wamp/www/aa\r\n    ServerName localhost\r\n    <Directory “d:/wamp/www/aa”>\r\n        Options Indexes FollowSymLinks ExecCGI\r\n        Order allow,deny\r\n        Allow from all\r\n        AllowOverride All\r\n    </Directory>\r\n</VirtualHost>`', '<p>安装完wamp之后，安装网上的教程设置虚拟路径，出现了问题，同样的问题由不同的原因导致。希望对有些大意的人有帮助。</p><p>1、httpd.conf去掉Include conf/extra/httpd-vhosts.conf前面的#。</p><p>2、httpd.conf中添加Listen 相应的端口，我的是8080</p><p>3、在confextra下面的httpd-vhosts.conf文件中添加</p><pre><code>&lt;VirtualHost *:8080&gt;\nDocumentRoot D:/wamp/www/aa\nServerName localhost\n&lt;Directory “d:/wamp/www/aa”&gt;\n    Options Indexes FollowSymLinks \n    Order allow,deny\n    Allow from all\n    AllowOverride All\n&lt;/Directory&gt;</code></pre><p>&lt;/VirtualHost&gt;</p><p>4、然后调用localhost，就出现下面的错误：</p><p>Forbidden<br>You don’t have permission to access /on this server.</p><p>（没有设置这一切时，localhost访问的没有问题的）</p><p>5、最后发现是没有删掉httpd-vhosts.conf文件中的这段代码导致的：</p><p>&lt;VirtualHost *:80&gt;</p><pre><code>ServerAdmin webmaster@dummy-host.example.com\nDocumentRoot “c:/Apache23/docs/dummy-host.example.com”\nServerName dummy-host.example.com\nServerAlias www.dummy-host.example.com\nErrorLog “logs/dummy-host.example.com-error.log”\nCustomLog “logs/dummy-host.example.com-access.log” common</code></pre><p>&lt;/VirtualHost&gt;</p><p>删掉或者注释掉这段代码，再运行localhost就没有问题了。</p><p>6、localhost运行好使了，但运行localhost:8080却有新的问题：</p><p>Forbidden<br>You don’t have permission to access /index.phpon this server.</p><p>7、然后也是找了很多，多是说什么allow from all等等的问题。但无论我怎么设置都是这个问题。</p><p>几经波折，发现把Options Indexes FollowSymLinks 后面添加上 ExecCGI就好使了。<br>`&lt;VirtualHost *:8080&gt;</p><pre><code>DocumentRoot D:/wamp/www/aa\nServerName localhost\n&lt;Directory “d:/wamp/www/aa”&gt;\n    Options Indexes FollowSymLinks ExecCGI\n    Order allow,deny\n    Allow from all\n    AllowOverride All\n&lt;/Directory&gt;</code></pre><p>&lt;/VirtualHost&gt;`</p>', '安装完wamp之后，安装网上的教程设置虚拟路径，出现了问题，同样的问题由不同的原因导致。希望对有些大意的人有帮助。\r\n\r\n1、httpd.conf去掉Include conf/extra/httpdvhosts.conf前面的。\r\n\r\n2、httpd.conf中添加Listen 相应的端口，我的是8080\r\n\r\n3、在conf\\extra下面的httpdvhosts.conf文件中添加\r\n\r\n  ...', 'laravel,permission', '2', 'uploads/article/default.jpg', '1', '1', '1665', '2017-05-16 11:07:51', '2018-01-10 15:33:10', null);
INSERT INTO `syf_articles` VALUES ('55', '1', '生成一个密钥', '宋耀锋', '```php\r\n<?php\r\n    // 生成规则：md5(\'id\'.$id.time().rand(1,1000))\r\n    // 获取ID\r\n    $id = session(\'id\');\r\n    $mobile = \'18812344321\';\r\n    $md5 = md5(\'id\'.$id.time().rand(1,1000));\r\n    // 将md5加密字符串转换为数组\r\n    $md5 = str_split($md5);\r\n    // 取其中16位，从第8位开始取\r\n    $md5 = array_slice($md5, 7, 16);\r\n    // 将数组分成4份\r\n    $md5 = array_chunk($md5, 4);\r\n    // 前三个数组中的尾部压入一个字符\'-\'\r\n    for($i=0; $i<4; $i++)\r\n    {\r\n        if($i<=2)\r\n        {\r\n            array_push($md5[$i], \'-\');\r\n        }\r\n    }\r\n    // 合并四个数组为一个数组\r\n    $md5 = array_merge($md5[0], $md5[1], $md5[2], $md5[3]);\r\n    // 连接每个数组元素为一个长字符串\r\n    $ickey = \'\';\r\n    foreach($md5 as $k => $v)\r\n    {\r\n        $ickey .= $v;\r\n    }\r\n    // 密钥字符串中小写小写自大转大写\r\n    $ickey = strtoupper($ickey);\r\n    echo $ickey;\r\n```', '<pre><code class=\"lang-php\">&lt;?php\n    // 生成规则：md5(\'id\'.$id.time().rand(1,1000))\n    // 获取ID\n    $id = session(\'id\');\n    $mobile = \'18812344321\';\n    $md5 = md5(\'id\'.$id.time().rand(1,1000));\n    // 将md5加密字符串转换为数组\n    $md5 = str_split($md5);\n    // 取其中16位，从第8位开始取\n    $md5 = array_slice($md5, 7, 16);\n    // 将数组分成4份\n    $md5 = array_chunk($md5, 4);\n    // 前三个数组中的尾部压入一个字符\'-\'\n    for($i=0; $i&lt;4; $i++)\n    {\n        if($i&lt;=2)\n        {\n            array_push($md5[$i], \'-\');\n        }\n    }\n    // 合并四个数组为一个数组\n    $md5 = array_merge($md5[0], $md5[1], $md5[2], $md5[3]);\n    // 连接每个数组元素为一个长字符串\n    $ickey = \'\';\n    foreach($md5 as $k =&gt; $v)\n    {\n        $ickey .= $v;\n    }\n    // 密钥字符串中小写小写自大转大写\n    $ickey = strtoupper($ickey);\n    echo $ickey;</code></pre>', '```php\r\n<?php\r\n    // 生成规则：md5(\'id\'.$id.time().rand(1,1000))\r\n    // 获取ID\r\n    $id = session(\'id\');\r\n    $mobile = \'18812344321\';\r\n    $md5 = md5(\'id\'.$id.time().rand(1,1000));\r\n    // 将md5加密字符串转换为数组\r...', '密钥', '1', 'uploads/article/default.jpg', '0', '0', '220', '2017-04-26 13:15:30', '2017-04-26 13:15:30', null);
INSERT INTO `syf_articles` VALUES ('56', '1', '几个PHP数组处理函数', '宋耀锋', '```php\r\n<?php\r\n\r\n// 从一个数组中拿掉几个元素，并返回拿掉的数组\r\n$color = [\'red\', \'yellow\', \'blue\', \'green\', \'black\'];\r\n$color = array_splice($color, 2);\r\necho \'<pre>\';\r\nprint_r($color);\r\necho \'</pre>\';\r\n\r\n// 遍历数组\r\nforeach($color as $k => $v)\r\n{\r\n	echo $k . \'=>\' . $v . \'<br />\';\r\n}\r\n\r\necho \'<hr />\';\r\n// 数组排序(sort(), rsort(), asort(), arsort())\r\n$number = [5, 10, 2, 3, 78, 100, 9];\r\n// arsort($number); //正数排序\r\nasort($number); //倒序排序\r\nforeach($number as $k => $v)\r\n{\r\n	echo $k . \'=>\' . $v . \'<br />\';\r\n}\r\n\r\necho \'number个数：\' . count($number) . \'<br />\';\r\necho \'number数组的总和：\' . array_sum($number);\r\n\r\n\r\necho \'<hr />\';\r\n$number = [5, 10, 2, 3, 78, 100, 9, 9, 100];\r\n$number = array_unique($number);\r\necho \'<pre>\';\r\nprint_r($number);\r\necho \'</pre>\';\r\n\r\n\r\necho \'<hr />\';\r\n$color = [\'red\', \'yellow\', \'blue\', \'green\', \'black\'];\r\n$key = array_search(\'red\', $color);\r\necho $key.\'<br />\';\r\n$color = array_slice($color, 0, 3);\r\n\r\n\r\necho \'<hr />\';\r\nprint_r($color);\r\n$color = array_keys($color);\r\nprint_r($color);\r\necho $key.\'<br />\';\r\n\r\n$number = [1, 2, 3, 4, 5];\r\nshuffle($number);\r\necho \'<pre>\';\r\nprint_r($number);\r\nprint_r(array_rand($number, 2));\r\necho \'</pre>\';\r\n```', '<pre><code class=\"lang-php\">&lt;?php\n\n// 从一个数组中拿掉几个元素，并返回拿掉的数组\n$color = [\'red\', \'yellow\', \'blue\', \'green\', \'black\'];\n$color = array_splice($color, 2);\necho \'&lt;pre&gt;\';\nprint_r($color);\necho \'&lt;/pre&gt;\';\n\n// 遍历数组\nforeach($color as $k =&gt; $v)\n{\n    echo $k . \'=&gt;\' . $v . \'&lt;br /&gt;\';\n}\n\necho \'&lt;hr /&gt;\';\n// 数组排序(sort(), rsort(), asort(), arsort())\n$number = [5, 10, 2, 3, 78, 100, 9];\n// arsort($number); //正数排序\nasort($number); //倒序排序\nforeach($number as $k =&gt; $v)\n{\n    echo $k . \'=&gt;\' . $v . \'&lt;br /&gt;\';\n}\n\necho \'number个数：\' . count($number) . \'&lt;br /&gt;\';\necho \'number数组的总和：\' . array_sum($number);\n\n\necho \'&lt;hr /&gt;\';\n$number = [5, 10, 2, 3, 78, 100, 9, 9, 100];\n$number = array_unique($number);\necho \'&lt;pre&gt;\';\nprint_r($number);\necho \'&lt;/pre&gt;\';\n\n\necho \'&lt;hr /&gt;\';\n$color = [\'red\', \'yellow\', \'blue\', \'green\', \'black\'];\n$key = array_search(\'red\', $color);\necho $key.\'&lt;br /&gt;\';\n$color = array_slice($color, 0, 3);\n\n\necho \'&lt;hr /&gt;\';\nprint_r($color);\n$color = array_keys($color);\nprint_r($color);\necho $key.\'&lt;br /&gt;\';\n\n$number = [1, 2, 3, 4, 5];\nshuffle($number);\necho \'&lt;pre&gt;\';\nprint_r($number);\nprint_r(array_rand($number, 2));\necho \'&lt;/pre&gt;\';</code></pre>', '```php\r\n<?php\r\n\r\n// 从一个数组中拿掉几个元素，并返回拿掉的数组\r\n$color = ;\r\n$color = array_splice($color, 2);\r\necho \'<pre\';\r\nprint_r($color);\r\necho \'</pre\';\r\n\r\n// 遍历数组\r\nforeach($color as $k = $v)\r\n{\r\n	echo $k . \'=\' . $v ....', 'PHP,PHP函数', '1', 'uploads/article/default.jpg', '0', '0', '88', '2017-04-24 22:28:29', '2017-04-24 22:28:29', null);
INSERT INTO `syf_articles` VALUES ('57', '1', 'TP5分页传参的形式改变', '宋耀锋', '```php\r\n$data = Article::alias(\'a\')->where($where)->order(\'id desc\')->paginate(3);  \r\n```\r\n默认URL：\r\n![](/uploads/article/20180102/5a4b429f5ee0a.png)\r\n有时候要对网站进行SEO优化或者静态化，这样的路径不抬友好，所以就需要对路径做一下改变，既可以在调用paginate方法的时候传入相关参数，page和path\r\n\r\n手册分页相关参数：\r\n![](/uploads/article/20180102/5a4b42be549c7.png)\r\n实际使用修改：\r\n```php\r\n// __ACTION__为自己项目中定义  \r\n$data = db(\'activity\') -> where($condition1)-> order(\'startline desc\') -> paginate(2,$total,[\r\n			\'page\' => input(\'param.page\'),\r\n			\'path\'=>__ACTION__.\'/channel/\'.$channel.\'/page/[PAGE].html\',\r\n		]);\r\n```\r\n修改后的URL样式\r\n![](/uploads/article/20180102/5a4b432693904.png)', '<pre><code class=\"lang-php\">$data = Article::alias(\'a\')-&gt;where($where)-&gt;order(\'id desc\')-&gt;paginate(3);  </code></pre><p>默认URL：<br><img src=\"/uploads/article/20180102/5a4b429f5ee0a.png\" alt=\"\" title=\"\"><br>有时候要对网站进行SEO优化或者静态化，这样的路径不抬友好，所以就需要对路径做一下改变，既可以在调用paginate方法的时候传入相关参数，page和path</p><p>手册分页相关参数：<br><img src=\"/uploads/article/20180102/5a4b42be549c7.png\" alt=\"\" title=\"\"><br>实际使用修改：</p><pre><code class=\"lang-php\">// __ACTION__为自己项目中定义  \n$data = db(\'activity\') -&gt; where($condition1)-&gt; order(\'startline desc\') -&gt; paginate(2,$total,[\n            \'page\' =&gt; input(\'param.page\'),\n            \'path\'=&gt;__ACTION__.\'/channel/\'.$channel.\'/page/[PAGE].html\',\n        ]);</code></pre><p>修改后的URL样式<br><img src=\"/uploads/article/20180102/5a4b432693904.png\" alt=\"\" title=\"\"></p>', '```php\r\n$data = Article::alias(\'a\')where($where)order(\'id desc\')paginate(3);  \r\n```\r\n默认URL：\r\n\r\n有时候要对网站进行SEO优化或者静态化，这样的路径不抬友好，所以就需要对路径做一下改变，既可以在调用paginate方法的时候传入相关参数，page和path\r\n\r\n手册分页相关参数：\r\n\r\n实际使用修改：\r\n...', 'ThinkPHP5', '1', '/uploads/article/20180102/5a4b429f5ee0a.png', '1', '1', '2641', '2017-04-17 10:23:00', '2018-01-10 15:19:11', null);
INSERT INTO `syf_articles` VALUES ('58', '2', 'jQuery常用知识点总结。。。', '宋耀锋', '![](/uploads/article/20180102/5a4b43ff3b31f.png)', '<p><img src=\"/uploads/article/20180102/5a4b43ff3b31f.png\" alt=\"\" title=\"\"></p>', '', 'jQuery', '1', '/uploads/article/20180102/5a4b43ff3b31f.png', '0', '0', '58', '2017-04-12 21:03:32', '2018-01-11 19:30:04', null);
INSERT INTO `syf_articles` VALUES ('59', '1', '弹窗Layer的简单使用', '宋耀锋', '简单使用\r\n\r\n①引入layer.js文件\r\n\r\n[html] view plain copy\r\n<script type=\"text/javascript\" src=\"{{asset(\'resources/org/layer/layer.js\')}}\"></script>  \r\n②layer.msg(‘进到你很高兴’, {icon: 6});\r\n![](/uploads/article/20180102/5a4b448e2293b.png)\r\n③layer.msg(‘不开心’, {icon: 5});\r\n![](/uploads/article/20180102/5a4b44a4190bc.png)', '<p>简单使用</p><p>①引入layer.js文件</p><p>[html] view plain copy<br>&lt;script type=&quot;text/javascript&quot; src=&quot;{{asset(\'resources/org/layer/layer.js\')}}&quot;&gt;&lt;/script&gt;  <br>②layer.msg(‘进到你很高兴’, {icon: 6});<br><img src=\"/uploads/article/20180102/5a4b448e2293b.png\" alt=\"\" title=\"\"><br>③layer.msg(‘不开心’, {icon: 5});<br><img src=\"/uploads/article/20180102/5a4b44a4190bc.png\" alt=\"\" title=\"\"></p>', '简单使用\r\n\r\n①引入layer.js文件\r\n\r\n view plain copy\r\n<script type=\"text/javascript\" src=\"{{asset(\'resources/org/layer/layer.js\')}}\"</script  \r\n②layer.msg(‘进到你很高兴’, {icon: 6});\r\n\r\n③layer.msg(‘不开心’, {icon: 5});\r\n...', 'Layer', '1', '/uploads/article/20180102/5a4b448e2293b.png', '1', '0', '106', '2017-04-06 21:23:24', '2018-01-10 16:11:44', null);
INSERT INTO `syf_articles` VALUES ('60', '1', '百度umeditor的使用', '宋耀锋', '```\r\n①HTML代码:\r\n\r\n[html] view plain copy\r\n<textarea id=\"content\" name=\"content\"></textarea>  \r\n\r\n②引入umeditor相关资源文件\r\n[html] view plain copy\r\n<link href=\"{{asset(\'resources/vender/umeditor/themes/default/css/umeditor.css\')}}\" type=\"text/css\" rel=\"stylesheet\">  \r\n<script type=\"text/javascript\" src=\"{{asset(\'resources/vender/umeditor/third-party/jquery.min.js\')}}\"></script>  \r\n<script type=\"text/javascript\" charset=\"utf-8\" src=\"{{asset(\'resources/vender/umeditor/umeditor.config.js\')}}\"></script>  \r\n<script type=\"text/javascript\" charset=\"utf-8\" src=\"{{asset(\'resources/vender/umeditor/umeditor.min.js\')}}\"></script>  \r\n<script type=\"text/javascript\" src=\"{{asset(\'resources/vender/umeditor/lang/zh-cn/zh-cn.js\')}}\"></script>  \r\n\r\n③实例化并穿入相关参数（自定义）\r\n[html] view plain copy\r\n<script type=\"text/javascript\">  \r\n    UM.getEditor(\'content\', {  \r\n        initialFrameWidth: 640,  \r\n        initialFrameHeight: 400,  \r\n        toolbars: [  \r\n            [\'source\', \'undo\', \'redo\', \'bold\' ,\'italic\' , \'underline\', \'superscript\', \'subscript\', \'forecolor\', \'backcolor\',  \r\n                \'paragraph\', \'fontfamily\', \'fontsize\', \'justifyleft\', \'justifycenter\', \'justifyright\', \'justifyjustify\', \'link\',  \r\n                \'unlink\', \'insertorderedlist\', \'insertunorderedlist\', \'selectall\', \'cleardoc\', \'removeformat\', \'image\', \'fullscreen\']  \r\n        ]  \r\n    });    \r\n</script>  \r\n此处引入资源文件的方式是在laravel框架中的使用，其他框架类似\r\n```\r\n![](/uploads/article/20180102/5a4b45ee3bddb.png)', '<pre><code>①HTML代码:\n\n[html] view plain copy\n&lt;textarea id=&quot;content&quot; name=&quot;content&quot;&gt;&lt;/textarea&gt;  \n\n②引入umeditor相关资源文件\n[html] view plain copy\n&lt;link href=&quot;{{asset(\'resources/vender/umeditor/themes/default/css/umeditor.css\')}}&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;  \n&lt;script type=&quot;text/javascript&quot; src=&quot;{{asset(\'resources/vender/umeditor/third-party/jquery.min.js\')}}&quot;&gt;&lt;/script&gt;  \n&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;{{asset(\'resources/vender/umeditor/umeditor.config.js\')}}&quot;&gt;&lt;/script&gt;  \n&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;{{asset(\'resources/vender/umeditor/umeditor.min.js\')}}&quot;&gt;&lt;/script&gt;  \n&lt;script type=&quot;text/javascript&quot; src=&quot;{{asset(\'resources/vender/umeditor/lang/zh-cn/zh-cn.js\')}}&quot;&gt;&lt;/script&gt;  \n\n③实例化并穿入相关参数（自定义）\n[html] view plain copy\n&lt;script type=&quot;text/javascript&quot;&gt;  \n    UM.getEditor(\'content\', {  \n        initialFrameWidth: 640,  \n        initialFrameHeight: 400,  \n        toolbars: [  \n            [\'source\', \'undo\', \'redo\', \'bold\' ,\'italic\' , \'underline\', \'superscript\', \'subscript\', \'forecolor\', \'backcolor\',  \n                \'paragraph\', \'fontfamily\', \'fontsize\', \'justifyleft\', \'justifycenter\', \'justifyright\', \'justifyjustify\', \'link\',  \n                \'unlink\', \'insertorderedlist\', \'insertunorderedlist\', \'selectall\', \'cleardoc\', \'removeformat\', \'image\', \'fullscreen\']  \n        ]  \n    });    \n&lt;/script&gt;  \n此处引入资源文件的方式是在laravel框架中的使用，其他框架类似</code></pre><p><img src=\"/uploads/article/20180102/5a4b45ee3bddb.png\" alt=\"\" title=\"\"></p>', '```\r\n①HTML代码:\r\n\r\n view plain copy\r\n<textarea id=\"content\" name=\"content\"</textarea  \r\n\r\n②引入umeditor相关资源文件\r\n view plain copy\r\n<link href=\"{{asset(\'resources/vender/umeditor/themes/default/css/umeditor....', 'Umeditor', '1', '/uploads/article/20180102/5a4b45ee3bddb.png', '0', '0', '127', '2017-04-06 21:09:47', '2018-01-10 15:54:53', null);
INSERT INTO `syf_articles` VALUES ('61', '1', 'phpstorm 常用设置', '宋耀锋', 'file->settings\r\n\r\n1.改变选中文字的背景颜色\r\n![](/uploads/article/20180102/5a4b46767b836.png)\r\n\r\n2.显示行号\r\n\r\n![](/uploads/article/20180102/5a4b469e59241.png)\r\n\r\n3.关闭一个已经打开的项目\r\n\r\n![](/uploads/article/20180102/5a4b46c4d354d.png)\r\n\r\n4.自动换行\r\n\r\n![](/uploads/article/20180102/5a4b46e6541c8.png)', '<p>file-&gt;settings</p><p>1.改变选中文字的背景颜色<br><img src=\"/uploads/article/20180102/5a4b46767b836.png\" alt=\"\" title=\"\"></p><p>2.显示行号</p><p><img src=\"/uploads/article/20180102/5a4b469e59241.png\" alt=\"\" title=\"\"></p><p>3.关闭一个已经打开的项目</p><p><img src=\"/uploads/article/20180102/5a4b46c4d354d.png\" alt=\"\" title=\"\"></p><p>4.自动换行</p><p><img src=\"/uploads/article/20180102/5a4b46e6541c8.png\" alt=\"\" title=\"\"></p>', 'filesettings\r\n\r\n1.改变选中文字的背景颜色\r\n\r\n\r\n2.显示行号\r\n\r\n\r\n\r\n3.关闭一个已经打开的项目\r\n\r\n\r\n\r\n4.自动换行\r\n\r\n', 'PhpStorm', '1', '/uploads/article/20180102/5a4b46767b836.png', '0', '0', '90', '2017-04-05 15:48:06', '2017-04-05 15:48:06', null);
INSERT INTO `syf_articles` VALUES ('62', '1', '从一个URL里取出文件的拓展名', '宋耀锋', '```php\r\nfunction getExt($url)  \r\n{  \r\n    $url = pathinfo($url);  \r\n    $url = explode(\'?\', $url[\'extension\']);  \r\n    $ext = $url[0];  \r\n    return $ext;  \r\n}  \r\n  \r\n  \r\nfunction getExt2($url)  \r\n{  \r\n    $url = parse_url($url);  \r\n    $path = $url[\'path\'];  \r\n    $ext = substr($path, -3);  \r\n    return $ext;  \r\n}  \r\n$url = \'http://blog.csdn.net/lingchen__/article/details/68943560.php?id=8\';  \r\n$ext = getExt($url);  \r\n$ext = getExt2($url);  \r\necho $ext;  \r\n```', '<pre><code class=\"lang-php\">function getExt($url)  \n{  \n    $url = pathinfo($url);  \n    $url = explode(\'?\', $url[\'extension\']);  \n    $ext = $url[0];  \n    return $ext;  \n}  \n  \n  \nfunction getExt2($url)  \n{  \n    $url = parse_url($url);  \n    $path = $url[\'path\'];  \n    $ext = substr($path, -3);  \n    return $ext;  \n}  \n$url = \'http://blog.csdn.net/lingchen__/article/details/68943560.php?id=8\';  \n$ext = getExt($url);  \n$ext = getExt2($url);  \necho $ext;  </code></pre>', '```php\r\nfunction getExt($url)  \r\n{  \r\n    $url = pathinfo($url);  \r\n    $url = explode(\'?\', $url);  \r\n    $ext = $url;  \r\n    return $ext;  \r\n}  \r\n  \r\n  \r\nfunction getExt2($url)  \r\n{  \r\n    $url = par...', 'URL', '1', 'uploads/article/default.jpg', '0', '0', '209', '2017-04-02 15:20:00', '2017-04-02 15:20:00', null);
INSERT INTO `syf_articles` VALUES ('63', '1', '几种算法', '宋耀锋', '```\r\n// 1.冒泡排序  \r\nfunction maopao($array)  \r\n{  \r\n    $length = count($array);  \r\n    // 第一层循环：控制轮数,一个数组总共n-1轮  \r\n    for($i=1; $i<=$length-1; $i++)  \r\n    {  \r\n        // 第二层循环：控制比较元素的下标，数组元素下标从零开始  \r\n        for($j=0; $j<$length-1; $j++)  \r\n        {  \r\n            if($array[$j] > $array[$j+1])  \r\n            {  \r\n                $temp = $array[$j];  \r\n                $array[$j] = $array[$j+1];  \r\n                $array[$j+1] = $temp;  \r\n            }  \r\n        }  \r\n    }  \r\n    return $array;  \r\n}  \r\n  \r\n$array = [10, 8, 7, 9, 1, 4, 6];  \r\n$array = maopao($array);  \r\necho \'<pre>\';  \r\necho \'冒泡排序：<br />\';  \r\nprint_r($array);  \r\necho \'</pre>\';  \r\n// 2.斐波那契额数列\r\nfunction naqie($n)\r\n{\r\n	if($n == 1)\r\n	{\r\n		return 1;\r\n	}elseif($n == 2)\r\n	{\r\n		return 1;\r\n	}\r\n\r\n	return naqie($n-1)+naqie($n-2);\r\n}\r\n\r\n$naqie1 = naqie(5);	\r\n$naqie2 = naqie(11);	\r\necho \'naqie1=\'.$naqie1.\'<br />\';	//5\r\necho \'naqie2=\'.$naqie2.\'<br />\';	//89\r\n\r\n//3.快速排序\r\n//快速排序\r\nfunction rapidSort($arr)\r\n{\r\n	$len = count($arr);\r\n	if($len <= 1)\r\n		return $arr;\r\n\r\n\r\n	$small = $big = [];\r\n	$cankao = $arr[0];\r\n\r\n\r\n	for($i=1; $i<$len; $i++)\r\n	{\r\n		if($arr[$i] > $cankao)\r\n		{\r\n			$big[] = $arr[$i]; \r\n		}else{\r\n			$small[] = $arr[$i];\r\n		}\r\n	}\r\n\r\n	$sortSmall = rapidSort($small);\r\n	$bigSort = rapidSort($big);\r\n	return array_merge($sortSmall, array($cankao), $bigSort);\r\n}\r\n$arr = [3, 2, 5, 6, 7, 1, 4];\r\n$arr = rapidSort($arr);\r\necho \'<pre>\';\r\nprint_r($arr);\r\necho \'</pre>\';\r\n\r\n\r\n\r\n```', '<pre><code>// 1.冒泡排序  \nfunction maopao($array)  \n{  \n    $length = count($array);  \n    // 第一层循环：控制轮数,一个数组总共n-1轮  \n    for($i=1; $i&lt;=$length-1; $i++)  \n    {  \n        // 第二层循环：控制比较元素的下标，数组元素下标从零开始  \n        for($j=0; $j&lt;$length-1; $j++)  \n        {  \n            if($array[$j] &gt; $array[$j+1])  \n            {  \n                $temp = $array[$j];  \n                $array[$j] = $array[$j+1];  \n                $array[$j+1] = $temp;  \n            }  \n        }  \n    }  \n    return $array;  \n}  \n  \n$array = [10, 8, 7, 9, 1, 4, 6];  \n$array = maopao($array);  \necho \'&lt;pre&gt;\';  \necho \'冒泡排序：&lt;br /&gt;\';  \nprint_r($array);  \necho \'&lt;/pre&gt;\';  \n// 2.斐波那契额数列\nfunction naqie($n)\n{\n    if($n == 1)\n    {\n        return 1;\n    }elseif($n == 2)\n    {\n        return 1;\n    }\n\n    return naqie($n-1)+naqie($n-2);\n}\n\n$naqie1 = naqie(5);    \n$naqie2 = naqie(11);    \necho \'naqie1=\'.$naqie1.\'&lt;br /&gt;\';    //5\necho \'naqie2=\'.$naqie2.\'&lt;br /&gt;\';    //89\n\n//3.快速排序\n//快速排序\nfunction rapidSort($arr)\n{\n    $len = count($arr);\n    if($len &lt;= 1)\n        return $arr;\n\n\n    $small = $big = [];\n    $cankao = $arr[0];\n\n\n    for($i=1; $i&lt;$len; $i++)\n    {\n        if($arr[$i] &gt; $cankao)\n        {\n            $big[] = $arr[$i]; \n        }else{\n            $small[] = $arr[$i];\n        }\n    }\n\n    $sortSmall = rapidSort($small);\n    $bigSort = rapidSort($big);\n    return array_merge($sortSmall, array($cankao), $bigSort);\n}\n$arr = [3, 2, 5, 6, 7, 1, 4];\n$arr = rapidSort($arr);\necho \'&lt;pre&gt;\';\nprint_r($arr);\necho \'&lt;/pre&gt;\';\n\n\n</code></pre>', '```\r\n// 1.冒泡排序  \r\nfunction maopao($array)  \r\n{  \r\n    $length = count($array);  \r\n    // 第一层循环：控制轮数,一个数组总共n1轮  \r\n    for($i=1; $i<=$length1; $i++)  \r\n    {  \r\n        // 第二层循环：控制比较元素的下标，数组元素下标从零开始  \r\n...', '算法', '1', 'uploads/article/default.jpg', '0', '0', '66', '2017-04-02 15:18:50', '2017-04-02 15:18:50', null);
INSERT INTO `syf_articles` VALUES ('64', '3', '虚拟机连网', '宋耀锋', '.虚拟机连网 安装好虚拟机后，网络连接会多出两个连接\r\n![](/uploads/article/20180102/5a4b4856733b3.png)\r\n①打开已经连网的本地连接，查看属性将允许其他网络用户通过此计算机的Internet链接来连接打钩，家庭网络链接选择VMware Network Adapter VMnet8，如果开启共享时出现无法共享的问题，请打开window firewall服务\r\n\r\n![](/uploads/article/20180102/5a4b486cae933.png)\r\n\r\n![](/uploads/article/20180102/5a4b4882a125c.png)\r\n\r\n②查看VMware Network Adapter VMnet8属性，会自动获得IP地址和子网掩码\r\n\r\n![](/uploads/article/20180102/5a4b48a58ecbf.png)\r\n\r\n- 打开虚拟机，设置虚拟网络（编辑->虚拟网络编辑器）\r\n\r\n![](/uploads/article/20180102/5a4b48bfe287b.png)\r\n\r\n- 虚拟机菜单（虚拟机->设置->网络适配器->自定义：特定虚拟网络）\r\n\r\n![](/uploads/article/20180102/5a4b48fa44a16.png)\r\n\r\n⑥打开终端，开启网络服务\r\n\r\n> service network start', '<p>.虚拟机连网 安装好虚拟机后，网络连接会多出两个连接<br><img src=\"/uploads/article/20180102/5a4b4856733b3.png\" alt=\"\" title=\"\"><br>①打开已经连网的本地连接，查看属性将允许其他网络用户通过此计算机的Internet链接来连接打钩，家庭网络链接选择VMware Network Adapter VMnet8，如果开启共享时出现无法共享的问题，请打开window firewall服务</p><p><img src=\"/uploads/article/20180102/5a4b486cae933.png\" alt=\"\" title=\"\"></p><p><img src=\"/uploads/article/20180102/5a4b4882a125c.png\" alt=\"\" title=\"\"></p><p>②查看VMware Network Adapter VMnet8属性，会自动获得IP地址和子网掩码</p><p><img src=\"/uploads/article/20180102/5a4b48a58ecbf.png\" alt=\"\" title=\"\"></p><ul><li>打开虚拟机，设置虚拟网络（编辑-&gt;虚拟网络编辑器）</li></ul><p><img src=\"/uploads/article/20180102/5a4b48bfe287b.png\" alt=\"\" title=\"\"></p><ul><li>虚拟机菜单（虚拟机-&gt;设置-&gt;网络适配器-&gt;自定义：特定虚拟网络）</li></ul><p><img src=\"/uploads/article/20180102/5a4b48fa44a16.png\" alt=\"\" title=\"\"></p><p>⑥打开终端，开启网络服务</p><blockquote>service network start</blockquote>', '.虚拟机连网 安装好虚拟机后，网络连接会多出两个连接\r\n\r\n①打开已经连网的本地连接，查看属性将允许其他网络用户通过此计算机的Internet链接来连接打钩，家庭网络链接选择VMware Network Adapter VMnet8，如果开启共享时出现无法共享的问题，请打开window firewall服务\r\n\r\n\r\n\r\n\r\n\r\n②查看VMware Network Adapter VMnet8属性...', 'Linux,Vmare Vhost', '1', '/uploads/article/20180102/5a4b4856733b3.png', '1', '0', '130', '2017-04-01 13:44:25', '2018-01-10 16:25:26', null);
INSERT INTO `syf_articles` VALUES ('65', '1', 'TP5 JSON对象数组转换为普通数组', '宋耀锋', '使用TP5框架做项目时，对于数据的查询返回的都是对象，虽然也可以当做普通的数组进行遍历进而进行后续处理，但这种形式直接扔给前端或者我想在返回的结果中临时增加一个数据字段，此时这种json对象数组形式就行了，临时的数据字段在对象数组里加不进去，所以转换为普通的数组后才能更方便的进行处理。\r\n```\r\n<?php\r\npublic function scanData()\r\n{\r\n   $model = model(\'Datacount\');\r\n   $data = $model -> all();\r\n   return json($data);\r\n}\r\n```\r\n在同一个控制器或者说类内调用sanData()后，获得的就是json对象数组，类似下图这样，如果前端直接请求这个方法，得到的是json格式的数据\r\n\r\n![](/uploads/article/20180102/5a4b49ea569a9.png)\r\n\r\n处理成普通数组：\r\n\r\n- 方法①\r\n$list = $this -> jsonDatacount();  \r\n$list = json_decode($list->getContent(),true); \r\n\r\n- 方法②\r\n$list = $this -> jsonDatacount()->toArray();  \r\n![](/uploads/article/20180102/5a4b4a2e93dab.png)', '<p>使用TP5框架做项目时，对于数据的查询返回的都是对象，虽然也可以当做普通的数组进行遍历进而进行后续处理，但这种形式直接扔给前端或者我想在返回的结果中临时增加一个数据字段，此时这种json对象数组形式就行了，临时的数据字段在对象数组里加不进去，所以转换为普通的数组后才能更方便的进行处理。</p><pre><code>&lt;?php\npublic function scanData()\n{\n   $model = model(\'Datacount\');\n   $data = $model -&gt; all();\n   return json($data);\n}</code></pre><p>在同一个控制器或者说类内调用sanData()后，获得的就是json对象数组，类似下图这样，如果前端直接请求这个方法，得到的是json格式的数据</p><p><img src=\"/uploads/article/20180102/5a4b49ea569a9.png\" alt=\"\" title=\"\"></p><p>处理成普通数组：</p><ul><li>方法①</li></ul><p>$list = $this -&gt; jsonDatacount();  <br>$list = json_decode($list-&gt;getContent(),true);</p><ul><li>方法②</li></ul><p>$list = $this -&gt; jsonDatacount()-&gt;toArray();  <br><img src=\"/uploads/article/20180102/5a4b4a2e93dab.png\" alt=\"\" title=\"\"></p>', '使用TP5框架做项目时，对于数据的查询返回的都是对象，虽然也可以当做普通的数组进行遍历进而进行后续处理，但这种形式直接扔给前端或者我想在返回的结果中临时增加一个数据字段，此时这种json对象数组形式就行了，临时的数据字段在对象数组里加不进去，所以转换为普通的数组后才能更方便的进行处理。\r\n```\r\n<?php\r\npublic function scanData()\r\n{\r\n   $model = ...', 'ThinkPHP5', '1', '/uploads/article/20180102/5a4b49ea569a9.png', '1', '0', '4017', '2017-03-28 22:49:59', '2018-01-10 17:05:29', null);
INSERT INTO `syf_articles` VALUES ('66', '1', '打印星星塔', '宋耀锋', '```\r\n$lines = 6;\r\n// 1.等腰三角，如果浏览器显示不正常(尽量用IE内核的浏览器)，则是浏览器的兼容性问题\r\n//      *\r\n//     ***\r\n//    *****\r\n//   *******\r\n//  *********\r\n// ***********\r\n// 第一层循环：控制行数\r\nfor($line=1; $line<=$lines; $line++)\r\n{\r\n    // 第二层循环：控制每行的前导空格\r\n    for($space=1; $space<=$lines-$line; $space++)\r\n    {\r\n        echo \'&nbsp;\';\r\n    }\r\n    //控制每行的星星数量\r\n    for($star=1; $star<=2*$line-1; $star++)\r\n    {\r\n        echo \'*\';\r\n    }\r\n    echo \'<br />\';\r\n}\r\necho \'<hr />\';\r\n// 2.等腰空三角，如果浏览器显示不正常，则是浏览器的兼容性问题\r\n//      *\r\n//     * *\r\n//    *   *\r\n//   *     *\r\n//  *       *\r\n// ***********\r\n\r\nfor($line=1; $line<=$lines; $line++)\r\n{\r\n    // 第二层循环：控制每行的前导空格\r\n    for($space=1; $space<=$lines-$line; $space++)\r\n    {\r\n        echo \'&nbsp;\';\r\n    }\r\n    //控制每行的星星数量\r\n    for($star=1; $star<=2*$line-1; $star++)\r\n    {\r\n        // 判断是应该输出星星还是空格\r\n        if($star == 1 || $star == 2*$line-1 || $line == $lines)\r\n        {\r\n            echo \'*\';\r\n        }\r\n        else\r\n        {\r\n            echo \'&nbsp;\';\r\n        }\r\n    }\r\n    echo \'<br />\';\r\n}\r\necho \'<hr />\';\r\n// 3.等腰无底空三角，如果浏览器显示不正常，则是浏览器的兼容性问题\r\n//      *\r\n//     * *\r\n//    *   *\r\n//   *     *\r\n//  *       *\r\n// *         *\r\n\r\nfor($line=1; $line<=$lines; $line++)\r\n{\r\n    // 第二层循环：控制每行的前导空格\r\n    for($space=1; $space<=$lines-$line; $space++)\r\n    {\r\n        echo \'&nbsp;\';\r\n    }\r\n    //控制每行的星星数量\r\n    for($star=1; $star<=2*$line-1; $star++)\r\n    {\r\n        // 判断是应该输出星星还是空格\r\n        if($star == 1 || $star == 2*$line-1)\r\n        {\r\n            echo \'*\';\r\n        }\r\n        else\r\n        {\r\n            echo \'&nbsp;\';\r\n        }\r\n    }\r\n    echo \'<br />\';\r\n}\r\necho \'<hr />\';\r\n\r\n// 4.菱形，如果浏览器显示不正常，则是浏览器的兼容性问题\r\n//      *\r\n//     * *\r\n//    *   *\r\n//   *     *\r\n//  *       *\r\n// *         *\r\n// *         *\r\n//  *       *\r\n//   *     *\r\n//    *   *\r\n//     * *\r\n//      *\r\nfor($line=1; $line<=$lines; $line++)\r\n{\r\n    // 第二层循环：控制每行的前导空格\r\n    for($space=1; $space<=$lines-$line; $space++)\r\n    {\r\n        echo \'&nbsp;\';\r\n    }\r\n    //控制每行的星星数量\r\n    for($star=1; $star<=2*$line-1; $star++)\r\n    {\r\n        // 判断是应该输出星星还是空格\r\n        if($star == 1 || $star == 2*$line-1)\r\n        {\r\n            echo \'*\';\r\n        }\r\n        else\r\n        {\r\n            echo \'&nbsp;\';\r\n        }\r\n    }\r\n    echo \'<br />\';\r\n}\r\nfor($line=$lines; $line>=1; $line--)\r\n{\r\n    // 第二层循环：控制每行的前导空格\r\n    for($space=1; $space<=$lines-$line; $space++)\r\n    {\r\n        echo \'&nbsp;\';\r\n    }\r\n    //控制每行的星星数量\r\n    for($star=1; $star<=2*$line-1; $star++)\r\n    {\r\n        // 判断是应该输出星星还是空格\r\n        if($star == 1 || $star == 2*$line-1)\r\n        {\r\n            echo \'*\';\r\n        }\r\n        else\r\n        {\r\n            echo \'&nbsp;\';\r\n        }\r\n    }\r\n    echo \'<br />\';\r\n}\r\necho \'<hr />\';\r\n// 5.等腰倒三角，如果浏览器显示不正常，则是浏览器的兼容性问题\r\n// ***********\r\n//  *********\r\n//   *******\r\n//    *****\r\n//     ***\r\n//      *\r\nfor($line=$lines; $line>=1; $line--)\r\n{\r\n    // 第二层循环：控制每行的前导空格\r\n    for($space=1; $space<=$lines-$line; $space++)\r\n    {\r\n        echo \'&nbsp;\';\r\n    }\r\n    //控制每行的星星数量\r\n    for($star=1; $star<=2*$line-1; $star++)\r\n    {\r\n        echo \'*\';\r\n    }\r\n    echo \'<br />\';\r\n}\r\necho \'<hr />\';\r\n// 5.等腰倒空三角，如果浏览器显示不正常，则是浏览器的兼容性问题\r\n// ***********\r\n//  *       *\r\n//   *     *\r\n//    *   *\r\n//     * *\r\n//      *\r\nfor($line=$lines; $line>=1; $line--)\r\n{\r\n    // 第二层循环：控制每行的前导空格\r\n    for($space=1; $space<=$lines-$line; $space++)\r\n    {\r\n        echo \'&nbsp;\';\r\n    }\r\n    //控制每行的星星数量\r\n    for($star=1; $star<=2*$line-1; $star++)\r\n    {\r\n        // 判断是应该输出星星还是空格\r\n        if($star == 1 || $star == 2*$line-1 || $line == $lines)\r\n        {\r\n            echo \'*\';\r\n        }\r\n        else\r\n        {\r\n            echo \'&nbsp;\';\r\n        }\r\n    }\r\n    echo \'<br />\';\r\n}\r\n```', '<pre><code>$lines = 6;\n// 1.等腰三角，如果浏览器显示不正常(尽量用IE内核的浏览器)，则是浏览器的兼容性问题\n//      *\n//     ***\n//    *****\n//   *******\n//  *********\n// ***********\n// 第一层循环：控制行数\nfor($line=1; $line&lt;=$lines; $line++)\n{\n    // 第二层循环：控制每行的前导空格\n    for($space=1; $space&lt;=$lines-$line; $space++)\n    {\n        echo \'&amp;nbsp;\';\n    }\n    //控制每行的星星数量\n    for($star=1; $star&lt;=2*$line-1; $star++)\n    {\n        echo \'*\';\n    }\n    echo \'&lt;br /&gt;\';\n}\necho \'&lt;hr /&gt;\';\n// 2.等腰空三角，如果浏览器显示不正常，则是浏览器的兼容性问题\n//      *\n//     * *\n//    *   *\n//   *     *\n//  *       *\n// ***********\n\nfor($line=1; $line&lt;=$lines; $line++)\n{\n    // 第二层循环：控制每行的前导空格\n    for($space=1; $space&lt;=$lines-$line; $space++)\n    {\n        echo \'&amp;nbsp;\';\n    }\n    //控制每行的星星数量\n    for($star=1; $star&lt;=2*$line-1; $star++)\n    {\n        // 判断是应该输出星星还是空格\n        if($star == 1 || $star == 2*$line-1 || $line == $lines)\n        {\n            echo \'*\';\n        }\n        else\n        {\n            echo \'&amp;nbsp;\';\n        }\n    }\n    echo \'&lt;br /&gt;\';\n}\necho \'&lt;hr /&gt;\';\n// 3.等腰无底空三角，如果浏览器显示不正常，则是浏览器的兼容性问题\n//      *\n//     * *\n//    *   *\n//   *     *\n//  *       *\n// *         *\n\nfor($line=1; $line&lt;=$lines; $line++)\n{\n    // 第二层循环：控制每行的前导空格\n    for($space=1; $space&lt;=$lines-$line; $space++)\n    {\n        echo \'&amp;nbsp;\';\n    }\n    //控制每行的星星数量\n    for($star=1; $star&lt;=2*$line-1; $star++)\n    {\n        // 判断是应该输出星星还是空格\n        if($star == 1 || $star == 2*$line-1)\n        {\n            echo \'*\';\n        }\n        else\n        {\n            echo \'&amp;nbsp;\';\n        }\n    }\n    echo \'&lt;br /&gt;\';\n}\necho \'&lt;hr /&gt;\';\n\n// 4.菱形，如果浏览器显示不正常，则是浏览器的兼容性问题\n//      *\n//     * *\n//    *   *\n//   *     *\n//  *       *\n// *         *\n// *         *\n//  *       *\n//   *     *\n//    *   *\n//     * *\n//      *\nfor($line=1; $line&lt;=$lines; $line++)\n{\n    // 第二层循环：控制每行的前导空格\n    for($space=1; $space&lt;=$lines-$line; $space++)\n    {\n        echo \'&amp;nbsp;\';\n    }\n    //控制每行的星星数量\n    for($star=1; $star&lt;=2*$line-1; $star++)\n    {\n        // 判断是应该输出星星还是空格\n        if($star == 1 || $star == 2*$line-1)\n        {\n            echo \'*\';\n        }\n        else\n        {\n            echo \'&amp;nbsp;\';\n        }\n    }\n    echo \'&lt;br /&gt;\';\n}\nfor($line=$lines; $line&gt;=1; $line--)\n{\n    // 第二层循环：控制每行的前导空格\n    for($space=1; $space&lt;=$lines-$line; $space++)\n    {\n        echo \'&amp;nbsp;\';\n    }\n    //控制每行的星星数量\n    for($star=1; $star&lt;=2*$line-1; $star++)\n    {\n        // 判断是应该输出星星还是空格\n        if($star == 1 || $star == 2*$line-1)\n        {\n            echo \'*\';\n        }\n        else\n        {\n            echo \'&amp;nbsp;\';\n        }\n    }\n    echo \'&lt;br /&gt;\';\n}\necho \'&lt;hr /&gt;\';\n// 5.等腰倒三角，如果浏览器显示不正常，则是浏览器的兼容性问题\n// ***********\n//  *********\n//   *******\n//    *****\n//     ***\n//      *\nfor($line=$lines; $line&gt;=1; $line--)\n{\n    // 第二层循环：控制每行的前导空格\n    for($space=1; $space&lt;=$lines-$line; $space++)\n    {\n        echo \'&amp;nbsp;\';\n    }\n    //控制每行的星星数量\n    for($star=1; $star&lt;=2*$line-1; $star++)\n    {\n        echo \'*\';\n    }\n    echo \'&lt;br /&gt;\';\n}\necho \'&lt;hr /&gt;\';\n// 5.等腰倒空三角，如果浏览器显示不正常，则是浏览器的兼容性问题\n// ***********\n//  *       *\n//   *     *\n//    *   *\n//     * *\n//      *\nfor($line=$lines; $line&gt;=1; $line--)\n{\n    // 第二层循环：控制每行的前导空格\n    for($space=1; $space&lt;=$lines-$line; $space++)\n    {\n        echo \'&amp;nbsp;\';\n    }\n    //控制每行的星星数量\n    for($star=1; $star&lt;=2*$line-1; $star++)\n    {\n        // 判断是应该输出星星还是空格\n        if($star == 1 || $star == 2*$line-1 || $line == $lines)\n        {\n            echo \'*\';\n        }\n        else\n        {\n            echo \'&amp;nbsp;\';\n        }\n    }\n    echo \'&lt;br /&gt;\';\n}</code></pre>', '```\r\n$lines = 6;\r\n// 1.等腰三角，如果浏览器显示不正常(尽量用IE内核的浏览器)，则是浏览器的兼容性问题\r\n//      \r\n//     \r\n//    \r\n//   \r\n//  \r\n// \r\n// 第一层循环：控制行数\r\nfor($line=1; $line<=$lines; $line++)\r\n{\r\n    // 第二层循环：控制每行的前导空格\r\n    for($s...', '星星塔', '1', 'uploads/article/default.jpg', '0', '0', '157', '2017-03-26 19:00:28', '2017-03-26 19:00:28', null);
INSERT INTO `syf_articles` VALUES ('67', '1', 'PHP常用字符串处理函数', '宋耀锋', '```\r\n<textarea readonly=\"readonly\" name=\"code\" class=\"php\"> \r\n// 1.strstr($string, $find) 查找字符串的首次出现，返回从$find到￥string结尾的字符串，区分大小写，不区分大小写：stristr()\r\n$s1 = \'abcdcefg\';\r\n$r = strstr($s1, \'f\');\r\n$r2 = strstr($s1, \'c\');\r\necho $r.\'<br />\';    //fg\r\nvar_dump($r2); //string(6) \"cdcefg\"\r\n// 2.strpos(),获取字符串首次出现的位置，返回字符串首次出现的数字位置,区分大小写stripos()\r\n$s1 = \'abcdcefg\';\r\n$r = strpos($s1, \'c\');\r\nvar_dump($r);  //int(2)\r\n//3.strrpos(),获取字符串最后一次出现的位置，区分大小写strripos()\r\n$s1 = \'abcdcefg\';\r\n$r = strrpos($s1, \'c\');\r\nvar_dump($r);  //int(4)\r\n// 4.substr();截取字符串，返回字符串的子串\r\n$s1 = \'abcdcefg\';\r\n$r = substr($s1, 0, 2);\r\n$r2 = substr($s1, -3);\r\nvar_dump($r);  //string(2) \"ab\"\r\nvar_dump($r2); //string(3) \"efg\"\r\n// 5.strchr() strstr()函数的别名，用法同strstr();\r\n// 6.strrchr($string, $find),查找字符串最后一次出现，返回从$find到$string结尾的字符串\r\n$s1 = \'abcdcefg\';\r\n$r = strrchr($s1, \'c\');\r\nvar_dump($r);  //string(4) \"cefg\"\r\n// 7.strrev($string)； 字符串翻转，返回字符串反转后的字符串\r\n$s1 = \'hello, world!\';\r\n$r = strrev($s1);\r\nvar_dump($r);  //string(13) \"!dlrow ,olleh\"\r\n// 8.strtoupper($string);将字符串中英文字符转换为大写；\r\n$s = \'我们，women\';\r\n$r = strtoupper($s);\r\nvar_dump($r);  //string(14) \"我们，WOMEN\"\r\n// 9.strtolower($string);将字符串中英文字符转换为小写；\r\n$s = \'我们，WOMEN\';\r\n$r = strtoupper($s);\r\nvar_dump($r);  //string(14) \"我们，women\"\r\n// 10.strtotime();将日期字符串转换为时间戳\r\n$s = \'2017-3-26\';\r\n$r = strtotime($s);\r\nvar_dump($r);  //int(1490482800)\r\n// 11.number_format — 以千位分隔符方式格式化一个数字\r\n$s = \'1234567890\';\r\n$r = number_format($s);\r\nvar_dump($r);  //string(13) \"1,234,567,890\"\r\n// 12.str_split — 将字符串转换为数组\r\n$s = \'hello\';\r\n$r = str_split($s);\r\nvar_dump($r);  //array(5) { [0]=> string(1) \"h\" [1]=> string(1) \"e\" [2]=> string(1) \"l\" [3]=> string(1) \"l\" [4]=> string(1) \"o\" }\r\n// 13.str_repeat — 重复一个字符串\r\necho \'<br />\';\r\n$s = \'——\';\r\n$r = str_repeat($s, 4);\r\nvar_dump($r);  //string(24) \"————————\"\r\n// 14.str_replace — 子字符串替换\r\n$s = \'he——ll0\';\r\n$r = str_replace(\'——\', \'\', $s);\r\nvar_dump($r);  //string(5) \"hell0\"\r\n// 15.str_shuffle — 随机打乱一个字符串\r\n$s = \'hello, world!\';\r\n$r = str_shuffle($s);\r\nvar_dump($r);  //string(13) \"orolh! ,lewdl\"\r\n// 16.ip2long — 将一个IPV4的字符串互联网协议转换成数字格式\r\n$s = \'127.0.0.1\';\r\n$r = ip2long($s);\r\nvar_dump($r);  //int(2130706433)\r\n// 17.long2ip — 将一个数字格式的IP转换成IPV4的字符串\r\n$s = 2130706433;\r\n$r = long2ip($s);\r\nvar_dump($r);  //string(9) \"127.0.0.1\"\r\n// 18.strval — 获取变量的字符串值\r\n$s = \'abc我们\';\r\n$r = strval($s);\r\nvar_dump($r);  // string(9) \"abc我们\"\r\n// 19.substr_count — 计算字串出现的次数\r\n$s = \'abcaaaaaa4354jhj我们\';\r\n$r = substr_count($s, \'a\');\r\nvar_dump($r);  //int(7)\r\n// 20.strlen — 获取字符串长度\r\n$s = \'abcaaaaaa4354jhj我们\';\r\n$r = strlen($s);\r\nvar_dump($r);  //int(22)\r\n// 21.explode — 使用一个字符串分割另一个字符串\r\n$s = \'a,b,c,d\';\r\n$r = explode(\',\', $s);\r\nvar_dump($r);  //array(4) { [0]=> string(1) \"a\" [1]=> string(1) \"b\" [2]=> string(1) \"c\" [3]=> string(1) \"d\" }\r\n// 22.implode — 将一个一维数组的值转化为字符串\r\n$arr = [\'a\', \'b\', \'c\', \'d\'];\r\n$r = implode(\',\', $arr);\r\nvar_dump($r);  //string(7) \"a,b,c,d\"\r\n// 23.trim — 去除字符串首尾处的空白字符（或者其他字符）\r\n// 24.ltrim — 删除字符串开头的空白字符（或其他字符）\r\n// 25.rtrim(str)  — 删除字符串结尾的空白字符（或其他字符）\r\n// 26.strip_tags — 从字符串中去除 HTML 和 PHP 标记\r\n$s = \'<p>hello, world!</p><br />你好，世界\';\r\n$r = strip_tags($s);\r\nvar_dump($r);  //string(28) \"hello, world!你好，世界\"\r\n// 27.chunk_split — 将字符串分割成小块\r\n$s = \'abcdefg\';\r\n$r = chunk_split($s, 2, \'!\');\r\nvar_dump($r);  //string(11) \"ab!cd!ef!g!\"\r\n$r2 = chunk_split(base64_encode($s));\r\nvar_dump($r2); //string(14) \"YWJjZGVmZw== \"\r\n// 28.htmlspecialchars — Convert special characters to HTML entities\r\n$s = \'<p>abcdefg</p>\';\r\n$r = htmlspecialchars($s);\r\nvar_dump($r);  //string(26) \"<p>abcdefg</p>\"\r\n// 29.ucfirst — 将字符串的首字母转换为大写\r\n// 30.ucwords — 将字符串中每个单词的首字母转换为大写\r\n// 31.addslashes — 使用反斜线引用字符串,返回字符串，该字符串为了数据库查询语句等的需要在某些字符前加上了反斜线。这些字符是单引号（\'）、双引号（\"）、反斜线（\\）与 NUL（NULL 字符）。\r\n$s = \'\\abcdefg\\/\';\r\n$r = addslashes($s);\r\nvar_dump($r);  // \"\\\\abcdefg\\\\/\"\r\n// 32.stripslashes — 反引用一个引用\r\n$s = \'\\abcd\\ef\\g\\/\';\r\n$r = stripslashes($s);\r\nvar_dump($r);  //string(8) \"abcdefg/\"\r\n</textarea>\r\n```', '<pre><code>&lt;textarea readonly=&quot;readonly&quot; name=&quot;code&quot; class=&quot;php&quot;&gt; \n// 1.strstr($string, $find) 查找字符串的首次出现，返回从$find到￥string结尾的字符串，区分大小写，不区分大小写：stristr()\n$s1 = \'abcdcefg\';\n$r = strstr($s1, \'f\');\n$r2 = strstr($s1, \'c\');\necho $r.\'&lt;br /&gt;\';    //fg\nvar_dump($r2); //string(6) &quot;cdcefg&quot;\n// 2.strpos(),获取字符串首次出现的位置，返回字符串首次出现的数字位置,区分大小写stripos()\n$s1 = \'abcdcefg\';\n$r = strpos($s1, \'c\');\nvar_dump($r);  //int(2)\n//3.strrpos(),获取字符串最后一次出现的位置，区分大小写strripos()\n$s1 = \'abcdcefg\';\n$r = strrpos($s1, \'c\');\nvar_dump($r);  //int(4)\n// 4.substr();截取字符串，返回字符串的子串\n$s1 = \'abcdcefg\';\n$r = substr($s1, 0, 2);\n$r2 = substr($s1, -3);\nvar_dump($r);  //string(2) &quot;ab&quot;\nvar_dump($r2); //string(3) &quot;efg&quot;\n// 5.strchr() strstr()函数的别名，用法同strstr();\n// 6.strrchr($string, $find),查找字符串最后一次出现，返回从$find到$string结尾的字符串\n$s1 = \'abcdcefg\';\n$r = strrchr($s1, \'c\');\nvar_dump($r);  //string(4) &quot;cefg&quot;\n// 7.strrev($string)； 字符串翻转，返回字符串反转后的字符串\n$s1 = \'hello, world!\';\n$r = strrev($s1);\nvar_dump($r);  //string(13) &quot;!dlrow ,olleh&quot;\n// 8.strtoupper($string);将字符串中英文字符转换为大写；\n$s = \'我们，women\';\n$r = strtoupper($s);\nvar_dump($r);  //string(14) &quot;我们，WOMEN&quot;\n// 9.strtolower($string);将字符串中英文字符转换为小写；\n$s = \'我们，WOMEN\';\n$r = strtoupper($s);\nvar_dump($r);  //string(14) &quot;我们，women&quot;\n// 10.strtotime();将日期字符串转换为时间戳\n$s = \'2017-3-26\';\n$r = strtotime($s);\nvar_dump($r);  //int(1490482800)\n// 11.number_format — 以千位分隔符方式格式化一个数字\n$s = \'1234567890\';\n$r = number_format($s);\nvar_dump($r);  //string(13) &quot;1,234,567,890&quot;\n// 12.str_split — 将字符串转换为数组\n$s = \'hello\';\n$r = str_split($s);\nvar_dump($r);  //array(5) { [0]=&gt; string(1) &quot;h&quot; [1]=&gt; string(1) &quot;e&quot; [2]=&gt; string(1) &quot;l&quot; [3]=&gt; string(1) &quot;l&quot; [4]=&gt; string(1) &quot;o&quot; }\n// 13.str_repeat — 重复一个字符串\necho \'&lt;br /&gt;\';\n$s = \'——\';\n$r = str_repeat($s, 4);\nvar_dump($r);  //string(24) &quot;————————&quot;\n// 14.str_replace — 子字符串替换\n$s = \'he——ll0\';\n$r = str_replace(\'——\', \'\', $s);\nvar_dump($r);  //string(5) &quot;hell0&quot;\n// 15.str_shuffle — 随机打乱一个字符串\n$s = \'hello, world!\';\n$r = str_shuffle($s);\nvar_dump($r);  //string(13) &quot;orolh! ,lewdl&quot;\n// 16.ip2long — 将一个IPV4的字符串互联网协议转换成数字格式\n$s = \'127.0.0.1\';\n$r = ip2long($s);\nvar_dump($r);  //int(2130706433)\n// 17.long2ip — 将一个数字格式的IP转换成IPV4的字符串\n$s = 2130706433;\n$r = long2ip($s);\nvar_dump($r);  //string(9) &quot;127.0.0.1&quot;\n// 18.strval — 获取变量的字符串值\n$s = \'abc我们\';\n$r = strval($s);\nvar_dump($r);  // string(9) &quot;abc我们&quot;\n// 19.substr_count — 计算字串出现的次数\n$s = \'abcaaaaaa4354jhj我们\';\n$r = substr_count($s, \'a\');\nvar_dump($r);  //int(7)\n// 20.strlen — 获取字符串长度\n$s = \'abcaaaaaa4354jhj我们\';\n$r = strlen($s);\nvar_dump($r);  //int(22)\n// 21.explode — 使用一个字符串分割另一个字符串\n$s = \'a,b,c,d\';\n$r = explode(\',\', $s);\nvar_dump($r);  //array(4) { [0]=&gt; string(1) &quot;a&quot; [1]=&gt; string(1) &quot;b&quot; [2]=&gt; string(1) &quot;c&quot; [3]=&gt; string(1) &quot;d&quot; }\n// 22.implode — 将一个一维数组的值转化为字符串\n$arr = [\'a\', \'b\', \'c\', \'d\'];\n$r = implode(\',\', $arr);\nvar_dump($r);  //string(7) &quot;a,b,c,d&quot;\n// 23.trim — 去除字符串首尾处的空白字符（或者其他字符）\n// 24.ltrim — 删除字符串开头的空白字符（或其他字符）\n// 25.rtrim(str)  — 删除字符串结尾的空白字符（或其他字符）\n// 26.strip_tags — 从字符串中去除 HTML 和 PHP 标记\n$s = \'&lt;p&gt;hello, world!&lt;/p&gt;&lt;br /&gt;你好，世界\';\n$r = strip_tags($s);\nvar_dump($r);  //string(28) &quot;hello, world!你好，世界&quot;\n// 27.chunk_split — 将字符串分割成小块\n$s = \'abcdefg\';\n$r = chunk_split($s, 2, \'!\');\nvar_dump($r);  //string(11) &quot;ab!cd!ef!g!&quot;\n$r2 = chunk_split(base64_encode($s));\nvar_dump($r2); //string(14) &quot;YWJjZGVmZw== &quot;\n// 28.htmlspecialchars — Convert special characters to HTML entities\n$s = \'&lt;p&gt;abcdefg&lt;/p&gt;\';\n$r = htmlspecialchars($s);\nvar_dump($r);  //string(26) &quot;&lt;p&gt;abcdefg&lt;/p&gt;&quot;\n// 29.ucfirst — 将字符串的首字母转换为大写\n// 30.ucwords — 将字符串中每个单词的首字母转换为大写\n// 31.addslashes — 使用反斜线引用字符串,返回字符串，该字符串为了数据库查询语句等的需要在某些字符前加上了反斜线。这些字符是单引号（\'）、双引号（&quot;）、反斜线（\\）与 NUL（NULL 字符）。\n$s = \'\\abcdefg\\/\';\n$r = addslashes($s);\nvar_dump($r);  // &quot;\\\\abcdefg\\\\/&quot;\n// 32.stripslashes — 反引用一个引用\n$s = \'\\abcd\\ef\\g\\/\';\n$r = stripslashes($s);\nvar_dump($r);  //string(8) &quot;abcdefg/&quot;\n&lt;/textarea&gt;</code></pre>', '```\r\n<textarea readonly=\"readonly\" name=\"code\" class=\"php\" \r\n// 1.strstr($string, $find) 查找字符串的首次出现，返回从$find到￥string结尾的字符串，区分大小写，不区分大小写：stristr()\r\n$s1 = \'abcdcefg\';\r\n$r = strstr($s1, \'f\');\r\n$r2 = strs...', '字符串处理', '1', 'uploads/article/default.jpg', '0', '0', '125', '2017-03-26 17:58:47', '2017-03-26 17:58:47', null);
INSERT INTO `syf_articles` VALUES ('68', '1', 'TP5中Request类可以获得哪些常量信息', '宋耀锋', '获取当前包含协议的域名：domain();\r\n\r\n获取当前完整URL 包括QUERY_STRING：url();\r\n\r\n获取当前URL 不含QUERY_STRING：baseUrl();\r\n\r\n获取当前执行的文件 SCRIPT_NAME：baseFile();\r\n\r\n获取URL访问根地址：root();\r\n\r\n获取当前请求URL的pathinfo信息（含URL后缀）：pathinfo();\r\n\r\n获取当前请求URL的pathinfo信息(不含URL后缀)：path();\r\n\r\n当前URL的访问后缀：ext();\r\n\r\n获取当前请求的时间：time();\r\n\r\n当前请求的资源类型：type();\r\n\r\n获取上传的文件信息：file()\r\n\r\n获取环境变量：env();\r\n\r\n获取客户端IP地址：ip();\r\n\r\n当前请求的host：host();\r\n\r\n获取当前的请求的路由信息：routeInfo();\r\n\r\n设置或者获取当前的模块名：module();\r\n\r\n设置或者获取当前的控制器名：controller();\r\n\r\n设置或者获取当前的操作名：action();', '<p>获取当前包含协议的域名：domain();</p><p>获取当前完整URL 包括QUERY_STRING：url();</p><p>获取当前URL 不含QUERY_STRING：baseUrl();</p><p>获取当前执行的文件 SCRIPT_NAME：baseFile();</p><p>获取URL访问根地址：root();</p><p>获取当前请求URL的pathinfo信息（含URL后缀）：pathinfo();</p><p>获取当前请求URL的pathinfo信息(不含URL后缀)：path();</p><p>当前URL的访问后缀：ext();</p><p>获取当前请求的时间：time();</p><p>当前请求的资源类型：type();</p><p>获取上传的文件信息：file()</p><p>获取环境变量：env();</p><p>获取客户端IP地址：ip();</p><p>当前请求的host：host();</p><p>获取当前的请求的路由信息：routeInfo();</p><p>设置或者获取当前的模块名：module();</p><p>设置或者获取当前的控制器名：controller();</p><p>设置或者获取当前的操作名：action();</p>', '获取当前包含协议的域名：domain();\r\n\r\n获取当前完整URL 包括QUERY_STRING：url();\r\n\r\n获取当前URL 不含QUERY_STRING：baseUrl();\r\n\r\n获取当前执行的文件 SCRIPT_NAME：baseFile();\r\n\r\n获取URL访问根地址：root();\r\n\r\n获取当前请求URL的pathinfo信息（含URL后缀）：pathinfo();\r\n\r\n...', 'Request', '1', 'uploads/article/default.jpg', '0', '0', '353', '2017-03-24 09:55:48', '2017-03-24 09:55:48', null);

-- ----------------------------
-- Table structure for syf_banners
-- ----------------------------
DROP TABLE IF EXISTS `syf_banners`;
CREATE TABLE `syf_banners` (
  `id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,
  `banner_title` varchar(64) NOT NULL DEFAULT '' COMMENT '标题',
  `banner_path` varchar(127) NOT NULL DEFAULT '',
  `status` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT 'banner状态： 0草稿 1发布',
  `created_at` timestamp NULL DEFAULT NULL COMMENT '创建时间',
  `updated_at` timestamp NULL DEFAULT NULL COMMENT '更新时间',
  `deleted_at` timestamp NULL DEFAULT NULL COMMENT '删除时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT='首页banner表';

-- ----------------------------
-- Records of syf_banners
-- ----------------------------
INSERT INTO `syf_banners` VALUES ('1', 'banner_01', '2018-01-08/5a530417aa5da.jpg', '1', '2018-01-08 13:39:40', '2018-01-08 13:39:40', null);
INSERT INTO `syf_banners` VALUES ('2', 'banner_02', '2018-01-08/5a53042d9cb15.jpg', '1', '2018-01-08 13:39:59', '2018-01-08 13:39:59', null);
INSERT INTO `syf_banners` VALUES ('3', 'banner_03', '2018-01-08/5a53043ed3e9d.jpg', '1', '2018-01-08 13:40:18', '2018-01-08 13:40:18', null);

-- ----------------------------
-- Table structure for syf_categories
-- ----------------------------
DROP TABLE IF EXISTS `syf_categories`;
CREATE TABLE `syf_categories` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '分类主键id',
  `name` varchar(15) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '分类名称',
  `keywords` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '关键词',
  `description` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '描述',
  `sort` tinyint(1) NOT NULL DEFAULT '0' COMMENT '排序',
  `pid` tinyint(1) NOT NULL DEFAULT '0' COMMENT '父级栏目id',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of syf_categories
-- ----------------------------
INSERT INTO `syf_categories` VALUES ('1', 'PHP', 'php', 'PHP相关的文章', '1', '0', '2017-07-16 07:35:12', '2017-12-28 15:53:04', null);
INSERT INTO `syf_categories` VALUES ('2', '前端技术', 'web', '前端技术相关的文章', '4', '0', '2017-12-28 15:54:12', '2017-12-28 16:41:35', null);
INSERT INTO `syf_categories` VALUES ('3', 'Linux', 'linux，服务器，serve', 'Linux有关的文章', '3', '0', '2017-12-28 15:55:21', '2017-12-28 15:55:21', null);
INSERT INTO `syf_categories` VALUES ('4', '工具集', 'Tool，共具集', '相关软件工具', '5', '0', '2017-12-28 15:56:38', '2017-12-28 16:41:49', null);
INSERT INTO `syf_categories` VALUES ('5', '数据库', 'sql, mysql, nosql,mariadb', '数据库相关的文章', '2', '0', '2017-12-28 15:58:45', '2017-12-28 16:35:34', null);

-- ----------------------------
-- Table structure for syf_chats
-- ----------------------------
DROP TABLE IF EXISTS `syf_chats`;
CREATE TABLE `syf_chats` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `content` text COLLATE utf8_unicode_ci NOT NULL COMMENT '内容',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of syf_chats
-- ----------------------------
INSERT INTO `syf_chats` VALUES ('1', '以前博客在CSDN，现在博客终于独立门户了！！！', '2017-07-18 07:35:12', '2016-07-18 07:35:12', null);

-- ----------------------------
-- Table structure for syf_comments
-- ----------------------------
DROP TABLE IF EXISTS `syf_comments`;
CREATE TABLE `syf_comments` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `oauth_user_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '评论用户id 关联oauth_user表的id',
  `type` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1：文章评论',
  `pid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '父级id',
  `article_id` int(10) unsigned NOT NULL COMMENT '文章id',
  `content` text COLLATE utf8_unicode_ci NOT NULL COMMENT '内容',
  `status` tinyint(1) NOT NULL COMMENT '1:已审核 0：未审核',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of syf_comments
-- ----------------------------
INSERT INTO `syf_comments` VALUES ('1', '1', '1', '0', '1', '评论的内容', '1', '2017-07-16 07:35:12', '2016-07-16 07:35:12', null);

-- ----------------------------
-- Table structure for syf_configs
-- ----------------------------
DROP TABLE IF EXISTS `syf_configs`;
CREATE TABLE `syf_configs` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
  `name` varchar(100) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '配置项键名',
  `value` text COLLATE utf8_unicode_ci COMMENT '配置项键值 1表示开启 0 关闭',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=54 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of syf_configs
-- ----------------------------
INSERT INTO `syf_configs` VALUES ('1', 'WEB_NAME', '灵晨的BLOG', '2017-04-25 12:12:00', '2017-04-25 12:12:00', null);
INSERT INTO `syf_configs` VALUES ('2', 'WEB_KEYWORDS', '个人博,laravel博客系统,技术博客,宋耀锋', '2017-04-25 12:12:00', '2017-06-21 22:51:54', null);
INSERT INTO `syf_configs` VALUES ('3', 'WEB_DESCRIPTION', '宋耀锋的php博客,个人技术博客,songyaofeng,songyaofeng官方网站', '2017-04-25 12:12:00', '2017-04-25 12:12:00', null);
INSERT INTO `syf_configs` VALUES ('4', 'WEB_STATUS', '1', '2017-04-25 12:12:00', '2017-04-25 12:12:00', null);
INSERT INTO `syf_configs` VALUES ('6', 'WATER_TYPE', '1', '2017-04-25 12:12:00', '2017-04-25 12:12:00', null);
INSERT INTO `syf_configs` VALUES ('7', 'TEXT_WATER_WORD', 'http://www.songyaofeng.cc', '2017-04-25 12:12:00', '2017-04-25 12:12:00', null);
INSERT INTO `syf_configs` VALUES ('8', 'TEXT_WATER_TTF_PTH', './Public/static/font/ariali.ttf', '2017-04-25 12:12:00', '2017-04-25 12:12:00', null);
INSERT INTO `syf_configs` VALUES ('9', 'TEXT_WATER_FONT_SIZE', '15', '2017-04-25 12:12:00', '2017-04-25 12:12:00', null);
INSERT INTO `syf_configs` VALUES ('10', 'TEXT_WATER_COLOR', '#008CBA', '2017-04-25 12:12:00', '2017-04-25 12:12:00', null);
INSERT INTO `syf_configs` VALUES ('11', 'TEXT_WATER_ANGLE', '0', '2017-04-25 12:12:00', '2017-04-25 12:12:00', null);
INSERT INTO `syf_configs` VALUES ('12', 'TEXT_WATER_LOCATE', '9', '2017-04-25 12:12:00', '2017-04-25 12:12:00', null);
INSERT INTO `syf_configs` VALUES ('13', 'IMAGE_WATER_PIC_PTAH', './Upload/image/logo/logo.png', '2017-04-25 12:12:00', '2017-04-25 12:12:00', null);
INSERT INTO `syf_configs` VALUES ('14', 'IMAGE_WATER_LOCATE', '9', '2017-04-25 12:12:00', '2017-04-25 12:12:00', null);
INSERT INTO `syf_configs` VALUES ('15', 'IMAGE_WATER_ALPHA', '80', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('16', 'WEB_CLOSE_WORD', '网站升级中，请稍后访问。', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('17', 'WEB_ICP_NUMBER', '豫ICP备14009546号-3', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('18', 'ADMIN_EMAIL', 'songyaofeng@aliyun.com', '2017-04-25 12:12:01', '2017-06-21 22:51:54', null);
INSERT INTO `syf_configs` VALUES ('19', 'COPYRIGHT_WORD', '本文为宋耀锋原创文章,转载无需和我联系,但请注明来自<a href=\"http://songyaofeng.cc\">宋耀锋博客</a>http://songyaofeng.cc', '2017-04-25 12:12:01', '2017-06-21 22:51:54', null);
INSERT INTO `syf_configs` VALUES ('20', 'QQ_APP_ID', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('21', 'CHANGYAN_APP_ID', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('22', 'CHANGYAN_CONF', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('23', 'WEB_STATISTICS', '', '2017-04-25 12:12:01', '2017-06-21 22:51:54', null);
INSERT INTO `syf_configs` VALUES ('24', 'CHANGEYAN_RETURN_COMMENT', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('25', 'AUTHOR', '宋耀锋', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('26', 'QQ_APP_KEY', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('27', 'CHANGYAN_COMMENT', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('28', 'BAIDU_SITE_URL', '', '2017-04-25 12:12:01', '2017-06-21 22:51:54', null);
INSERT INTO `syf_configs` VALUES ('29', 'DOUBAN_API_KEY', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('30', 'DOUBAN_SECRET', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('31', 'RENREN_API_KEY', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('32', 'RENREN_SECRET', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('33', 'SINA_API_KEY', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('34', 'SINA_SECRET', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('35', 'KAIXIN_API_KEY', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('36', 'KAIXIN_SECRET', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('37', 'SOHU_API_KEY', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('38', 'SOHU_SECRET', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('39', 'GITHUB_CLIENT_ID', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('40', 'GITHUB_CLIENT_SECRET', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('41', 'IMAGE_TITLE_ALT_WORD', '宋耀锋博客', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('42', 'EMAIL_SMTP', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('43', 'EMAIL_USERNAME', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('44', 'EMAIL_PASSWORD', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('45', 'EMAIL_FROM_NAME', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('46', 'COMMENT_REVIEW', '0', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('47', 'COMMENT_SEND_EMAIL', '1', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('48', 'EMAIL_RECEIVE', '', '2017-04-25 12:12:01', '2017-04-25 12:12:01', null);
INSERT INTO `syf_configs` VALUES ('49', 'WEB_TITLE', '宋耀锋博客,技术博客, Laravel博客', null, null, null);
INSERT INTO `syf_configs` VALUES ('50', 'QQ_QUN_ARTICLE_ID', '1', null, null, null);
INSERT INTO `syf_configs` VALUES ('51', 'QQ_QUN_NUMBER', '88199093', null, null, null);
INSERT INTO `syf_configs` VALUES ('52', 'QQ_QUN_CODE', '<a target=\"_blank\" href=\"//shang.qq.com/wpa/qunwpa?idkey=bba3fea90444ee6caf1fb1366027873fe14e86bada254d41ce67768fadd729ee\"><img border=\"0\" src=\"//pub.idqqimg.com/wpa/images/group.png\" alt=\"宋耀锋博客群\" title=\"宋耀锋博客群\"></a>', null, null, null);
INSERT INTO `syf_configs` VALUES ('53', 'QQ_QUN_OR_CODE', '/uploads/images/default.png', null, null, null);

-- ----------------------------
-- Table structure for syf_failed_jobs
-- ----------------------------
DROP TABLE IF EXISTS `syf_failed_jobs`;
CREATE TABLE `syf_failed_jobs` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `connection` text COLLATE utf8_unicode_ci NOT NULL,
  `queue` text COLLATE utf8_unicode_ci NOT NULL,
  `payload` longtext COLLATE utf8_unicode_ci NOT NULL,
  `exception` longtext COLLATE utf8_unicode_ci NOT NULL,
  `failed_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of syf_failed_jobs
-- ----------------------------

-- ----------------------------
-- Table structure for syf_files
-- ----------------------------
DROP TABLE IF EXISTS `syf_files`;
CREATE TABLE `syf_files` (
  `id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,
  `file_title` varchar(64) NOT NULL DEFAULT '' COMMENT '标题',
  `file_path` varchar(127) NOT NULL DEFAULT '',
  `status` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT 'banner状态： 0草稿 1发布',
  `created_at` timestamp NULL DEFAULT NULL COMMENT '创建时间',
  `updated_at` timestamp NULL DEFAULT NULL COMMENT '更新时间',
  `deleted_at` timestamp NULL DEFAULT NULL COMMENT '删除时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='文件管理';

-- ----------------------------
-- Records of syf_files
-- ----------------------------

-- ----------------------------
-- Table structure for syf_friendship_links
-- ----------------------------
DROP TABLE IF EXISTS `syf_friendship_links`;
CREATE TABLE `syf_friendship_links` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `name` varchar(50) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '链接名',
  `url` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '链接地址',
  `sort` tinyint(1) DEFAULT '1' COMMENT '排序',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of syf_friendship_links
-- ----------------------------
INSERT INTO `syf_friendship_links` VALUES ('1', '白俊遥博客', 'https://baijunyao.com', '1', '2017-07-16 07:35:12', '2016-07-16 07:35:12', null);

-- ----------------------------
-- Table structure for syf_git_project
-- ----------------------------
DROP TABLE IF EXISTS `syf_git_project`;
CREATE TABLE `syf_git_project` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '项目主键',
  `sort` tinyint(4) NOT NULL DEFAULT '1' COMMENT '排序',
  `type` tinyint(4) NOT NULL DEFAULT '1' COMMENT '1:github 2:gitee',
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '项目名',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of syf_git_project
-- ----------------------------
INSERT INTO `syf_git_project` VALUES ('1', '1', '1', 'baijunyao/thinkphp-bjyadmin', '2017-10-23 21:09:04', '2017-10-26 21:42:40', null);
INSERT INTO `syf_git_project` VALUES ('2', '2', '2', 'shuaibai123/thinkphp-bjyadmin', '2017-10-26 21:43:07', '2017-10-26 22:02:28', null);
INSERT INTO `syf_git_project` VALUES ('3', '3', '1', 'baijunyao/thinkphp-bjyblog', '2017-10-26 21:43:26', '2017-10-26 22:02:40', null);
INSERT INTO `syf_git_project` VALUES ('4', '4', '2', 'shuaibai123/thinkbjy', '2017-10-26 21:43:56', '2017-10-26 22:02:59', null);
INSERT INTO `syf_git_project` VALUES ('5', '5', '1', 'baijunyao/laravel-bjyadmin', '2017-10-26 22:03:15', '2017-10-26 22:03:15', null);
INSERT INTO `syf_git_project` VALUES ('6', '6', '1', 'baijunyao/laravel-bjyblog', '2017-10-26 22:03:23', '2017-10-26 22:03:23', null);
INSERT INTO `syf_git_project` VALUES ('7', '7', '2', 'shuaibai123/laravel-bjyadmin', '2017-10-26 22:07:24', '2017-10-26 22:07:59', null);
INSERT INTO `syf_git_project` VALUES ('8', '8', '2', 'shuaibai123/laravel-bjyblog', '2017-10-26 22:07:47', '2017-10-26 22:08:04', null);

-- ----------------------------
-- Table structure for syf_git_projects
-- ----------------------------
DROP TABLE IF EXISTS `syf_git_projects`;
CREATE TABLE `syf_git_projects` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '项目主键',
  `sort` tinyint(4) NOT NULL DEFAULT '1' COMMENT '排序',
  `type` tinyint(4) NOT NULL DEFAULT '1' COMMENT '1:github 2:gitee',
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '项目名',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of syf_git_projects
-- ----------------------------

-- ----------------------------
-- Table structure for syf_jobs
-- ----------------------------
DROP TABLE IF EXISTS `syf_jobs`;
CREATE TABLE `syf_jobs` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `queue` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `payload` longtext COLLATE utf8_unicode_ci NOT NULL,
  `attempts` tinyint(3) unsigned NOT NULL,
  `reserved_at` int(10) unsigned DEFAULT NULL,
  `available_at` int(10) unsigned NOT NULL,
  `created_at` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `jobs_queue_reserved_at_index` (`queue`,`reserved_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of syf_jobs
-- ----------------------------

-- ----------------------------
-- Table structure for syf_migrations
-- ----------------------------
DROP TABLE IF EXISTS `syf_migrations`;
CREATE TABLE `syf_migrations` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `migration` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of syf_migrations
-- ----------------------------
INSERT INTO `syf_migrations` VALUES ('1', '2014_10_12_000000_create_users_table', '1');
INSERT INTO `syf_migrations` VALUES ('2', '2014_10_12_100000_create_password_resets_table', '1');
INSERT INTO `syf_migrations` VALUES ('3', '2017_07_11_225347_create_article_tags_table', '1');
INSERT INTO `syf_migrations` VALUES ('4', '2017_07_11_225347_create_articles_table', '1');
INSERT INTO `syf_migrations` VALUES ('5', '2017_07_11_225347_create_categories_table', '1');
INSERT INTO `syf_migrations` VALUES ('6', '2017_07_11_225347_create_chats_table', '1');
INSERT INTO `syf_migrations` VALUES ('7', '2017_07_11_225347_create_comments_table', '1');
INSERT INTO `syf_migrations` VALUES ('8', '2017_07_11_225347_create_configs_table', '1');
INSERT INTO `syf_migrations` VALUES ('9', '2017_07_11_225347_create_friendship_links_table', '1');
INSERT INTO `syf_migrations` VALUES ('10', '2017_07_11_225347_create_oauth_users_table', '1');
INSERT INTO `syf_migrations` VALUES ('11', '2017_07_11_225347_create_tags_table', '1');
INSERT INTO `syf_migrations` VALUES ('12', '2017_08_26_211441_create_jobs_table', '1');
INSERT INTO `syf_migrations` VALUES ('13', '2017_08_26_212556_create_failed_jobs_table', '1');
INSERT INTO `syf_migrations` VALUES ('14', '2017_10_18_203752_create_git_projects_table', '1');

-- ----------------------------
-- Table structure for syf_notices
-- ----------------------------
DROP TABLE IF EXISTS `syf_notices`;
CREATE TABLE `syf_notices` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `notice_title` varchar(150) NOT NULL DEFAULT '' COMMENT '公告标题',
  `notice_content` text NOT NULL COMMENT '公告内容',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COMMENT='网站公告';

-- ----------------------------
-- Records of syf_notices
-- ----------------------------
INSERT INTO `syf_notices` VALUES ('6', '博客首次上线', 'PHPer一枚，以前博客（http://blog.csdn.net/lingchen__），博客首次上线，各项功能逐步完善中，希望和大家交流分享技术，互换链接，欢迎来访！', '2018-01-04 13:21:02', '2018-01-04 13:21:02', null);

-- ----------------------------
-- Table structure for syf_oauth_users
-- ----------------------------
DROP TABLE IF EXISTS `syf_oauth_users`;
CREATE TABLE `syf_oauth_users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `type` tinyint(1) NOT NULL DEFAULT '1' COMMENT '类型 1：QQ  2：新浪微博 3：github',
  `name` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '第三方昵称',
  `avatar` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '头像',
  `openid` varchar(40) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '第三方用户id',
  `access_token` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT 'access_token token',
  `last_login_ip` varchar(16) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '最后登录ip',
  `login_times` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '登录次数',
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '邮箱',
  `is_admin` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否是admin',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of syf_oauth_users
-- ----------------------------
INSERT INTO `syf_oauth_users` VALUES ('1', '1', '宋耀锋', '/uploads/article/default.jpg', '', '', '127.0.0.1', '1', 'baijunyao@baijunyao.com', '0', '2017-07-24 07:35:12', '2017-07-24 07:35:12', null);

-- ----------------------------
-- Table structure for syf_password_resets
-- ----------------------------
DROP TABLE IF EXISTS `syf_password_resets`;
CREATE TABLE `syf_password_resets` (
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  KEY `password_resets_email_index` (`email`),
  KEY `password_resets_token_index` (`token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of syf_password_resets
-- ----------------------------

-- ----------------------------
-- Table structure for syf_tags
-- ----------------------------
DROP TABLE IF EXISTS `syf_tags`;
CREATE TABLE `syf_tags` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '标签主键',
  `name` varchar(50) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '标签名',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of syf_tags
-- ----------------------------
INSERT INTO `syf_tags` VALUES ('1', 'Laravel', '2017-07-16 07:35:12', '2017-12-28 15:32:46', null);
INSERT INTO `syf_tags` VALUES ('2', 'ThinkPHP3', '2017-12-28 15:32:29', '2017-12-28 15:32:29', null);
INSERT INTO `syf_tags` VALUES ('3', 'ThinkPHP5', '2017-12-28 15:33:05', '2017-12-28 15:33:05', null);
INSERT INTO `syf_tags` VALUES ('4', 'Docker', '2017-12-28 15:33:32', '2017-12-28 15:33:32', null);
INSERT INTO `syf_tags` VALUES ('5', 'Nginx', '2017-12-28 15:33:43', '2017-12-28 15:33:43', null);
INSERT INTO `syf_tags` VALUES ('6', 'PhpStorm', '2017-12-28 15:34:17', '2017-12-28 15:34:17', null);
INSERT INTO `syf_tags` VALUES ('7', 'MySQL', '2017-12-28 15:34:26', '2017-12-28 15:34:26', null);
INSERT INTO `syf_tags` VALUES ('8', 'Yii', '2017-12-28 15:35:46', '2017-12-28 15:35:46', null);
INSERT INTO `syf_tags` VALUES ('9', 'Npm', '2017-12-28 16:48:11', '2017-12-28 16:48:11', null);
INSERT INTO `syf_tags` VALUES ('10', 'Git', '2017-12-28 18:50:16', '2017-12-28 18:50:16', null);
INSERT INTO `syf_tags` VALUES ('11', 'Windows', '2017-12-28 18:50:39', '2017-12-28 18:50:39', null);
INSERT INTO `syf_tags` VALUES ('12', 'Serve', '2017-12-28 18:50:46', '2017-12-28 18:50:54', null);
INSERT INTO `syf_tags` VALUES ('13', 'SQL', '2017-12-28 18:58:27', '2017-12-28 18:58:27', null);
INSERT INTO `syf_tags` VALUES ('14', 'jQuery', '2017-12-28 18:58:39', '2017-12-28 18:58:39', null);
INSERT INTO `syf_tags` VALUES ('15', 'ES6', '2017-12-28 18:58:58', '2017-12-28 18:58:58', null);
INSERT INTO `syf_tags` VALUES ('19', 'Angular', '2018-01-02 13:08:37', '2018-01-02 13:08:37', null);
INSERT INTO `syf_tags` VALUES ('20', 'Vim', '2018-01-02 13:38:52', '2018-01-02 13:38:52', null);
INSERT INTO `syf_tags` VALUES ('21', 'Redis', '2018-01-02 14:07:31', '2018-01-02 14:07:31', null);
INSERT INTO `syf_tags` VALUES ('22', 'Xunsou', '2018-01-02 14:59:44', '2018-01-02 14:59:44', null);
INSERT INTO `syf_tags` VALUES ('23', 'Design Pattern', '2018-01-02 15:33:18', '2018-01-02 15:33:18', null);
INSERT INTO `syf_tags` VALUES ('24', 'Trait', '2018-01-02 15:48:37', '2018-01-02 15:48:37', null);
INSERT INTO `syf_tags` VALUES ('25', 'function', '2018-01-02 15:51:40', '2018-01-02 15:51:40', null);
INSERT INTO `syf_tags` VALUES ('26', 'Captcha', '2018-01-02 15:54:52', '2018-01-02 15:54:52', null);
INSERT INTO `syf_tags` VALUES ('27', 'RESTFUL', '2018-01-02 16:07:21', '2018-01-02 16:07:21', null);
INSERT INTO `syf_tags` VALUES ('28', 'Layer', '2018-01-02 16:35:38', '2018-01-02 16:35:38', null);
INSERT INTO `syf_tags` VALUES ('29', '富文本', '2018-01-02 16:39:08', '2018-01-02 16:39:08', null);

-- ----------------------------
-- Table structure for syf_users
-- ----------------------------
DROP TABLE IF EXISTS `syf_users`;
CREATE TABLE `syf_users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `remember_token` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_email_unique` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of syf_users
-- ----------------------------
INSERT INTO `syf_users` VALUES ('1', 'songyaofeng', '862761213@qq.com', '$2y$10$UFU2uvTiGTiiyxj7WdxEIOOnOyPdnawd0pSoThutLzMdfmmll/Yye', 'J5Qg2hAvGAkTtwwj6pI3IFvhWQf6cbrq7XlPIeYIGx5GBYjNx5cF0NuUihnC', '2016-10-22 07:35:12', '2018-01-08 13:27:12', null);
